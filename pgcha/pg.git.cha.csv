----------------------------
Tab complete second argument to \c with role names. Ian Barwick 	095d40123cedcdfa81c55f0de113067d95370d57
----------------------------
doc: Update pg_receivexlog note The old note about how to use pg_receivexlog as an alternative to archive_command was obsoleted by replication slots. 	552faefd68f1cec6bbaf0a038d8d410b59edb17f
----------------------------
Fix building with WAL_DEBUG. Now that the backup blocks are appended to the WAL record in xloginsert.c, XLogInsert doesn't see them anymore and cannot remove them from the version reconstructed for xlog_outdesc. This makes running with wal_debug=on more expensive, as we now make (unnecessary) temporary copies of the backup blocks, but it doesn't seem worth convoluting the code to keep that optimization. Reported by Alvaro Herrera. 	7250d8535b11d6443a9b27299e586c3df0654302
----------------------------
Cope with more than 64K phrases in a thesaurus dictionary. dict_thesaurus stored phrase IDs in uint16 fields, so it would get confused and even crash if there were more than 64K entries in the configuration file.  It turns out to be basically free to widen the phrase IDs to uint32, so let's just do so. This was complained of some time ago by David Boutin (in bug #7793); he later submitted an informal patch but it was never acted on. We now have another complaint (bug #11901 from Luc Ouellette) so it's time to make something happen. This is basically Boutin's patch, but for future-proofing I also added a defense against too many words per phrase.  Note that we don't need any explicit defense against overflow of the uint32 counters, since before that happens we'd hit array allocation sizes that repalloc rejects. Back-patch to all supported branches because of the crash risk. 	d6e37b35cda9a88dfd938dd61e9986dd93cc6dd3
----------------------------
"Remove the last vestige of server-side autocommit. Long ago we briefly had an ""autocommit"" GUC that turned server-side autocommit on and off.  That behavior was removed in 7.4 after concluding that it broke far too much client-side logic, and making clients cope with both behaviors was impractical.  But the GUC variable was left behind, so as not to break any client code that might be trying to read its value. Enough time has now passed that we should remove the GUC completely. Whatever vestigial backwards-compatibility benefit it had is outweighed by the risk of confusion for newbies who assume it ought to do something, as per a recent complaint from Wolfgang Wilhelm. In passing, adjust what seemed to me a rather confusing documentation reference to libpq's autocommit behavior.  libpq as such knows nothing about autocommit, so psql is probably what was meant. "	525a489915cad1c5b2fc39e43e8005025afe63b2
----------------------------
Add configure --enable-tap-tests option Don't skip the TAP tests anymore when IPC::Run is not found.  This will fail normally now. 	a409b464f91e0bdf61f2b3fb81218a0e4312987b
----------------------------
doc: Check DocBook XML validity during the build Building the documentation with XSLT does not check the DTD, like a DSSSL build would.  One can often get away with having invalid XML, but the stylesheets might then create incorrect output, as they are not designed to handle that.  Therefore, check the validity of the XML against the DTD, using xmllint, during the build. Add xmllint detection to configure, and add some documentation. xmllint comes with libxml2, which is already in use, but it might be in a separate package, such as libxml2-utils on Debian. Reviewed-by: Fabien COELHO <coelho@cri.ensmp.fr> 	5d93ce2d0c619ba1b408eb749715e7223e23f6ae
----------------------------
pg_test_fsync: Update output format Apparently, computers are now a bit faster than when this was first added, so we need to make room for a digit or two in the ops/sec format. While we're at it, adjust some of the other output for a more consistent line length. 	83dc5908c207bc0ff4256eb862f6a211ad5596ec
----------------------------
Allow setting effective_io_concurrency even on unsupported systems This matches the behavior of other parameters that are unsupported on some systems (e.g., ssl). Also document the default value. 	7feaccc21791d9d745bac013e5e0396bdde2d81c
----------------------------
"Support timezone abbreviations that sometimes change. Up to now, PG has assumed that any given timezone abbreviation (such as ""EDT"") represents a constant GMT offset in the usage of any particular region; we had a way to configure what that offset was, but not for it to be changeable over time.  But, as with most things horological, this view of the world is too simplistic: there are numerous regions that have at one time or another switched to a different GMT offset but kept using the same timezone abbreviation.  Almost the entire Russian Federation did that a few years ago, and later this month they're going to do it again. And there are similar examples all over the world. To cope with this, invent the notion of a ""dynamic timezone abbreviation"", which is one that is referenced to a particular underlying timezone (as defined in the IANA timezone database) and means whatever it currently means in that zone.  For zones that use or have used daylight-savings time, the standard and DST abbreviations continue to have the property that you can specify standard or DST time and get that time offset whether or not DST was theoretically in effect at the time.  However, the abbreviations mean what they meant at the time in question (or most recently before that time) rather than being absolutely fixed. The standard abbreviation-list files have been changed to use this behavior for abbreviations that have actually varied in meaning since 1970.  The old simple-numeric definitions are kept for abbreviations that have not changed, since they are a bit faster to resolve. While this is clearly a new feature, it seems necessary to back-patch it into all active branches, because otherwise use of Russian zone abbreviations is going to become even more problematic than it already was. This change supersedes the changes in commit 513d06ded et al to modify the fixed meanings of the Russian abbreviations; since we've not shipped that yet, this will avoid an undesirably incompatible (not to mention incorrect) change in behavior for timestamps between 2011 and 2014. This patch makes some cosmetic changes in ecpglib to keep its usage of datetime lookup tables as similar as possible to the backend code, but doesn't do anything about the increasingly obsolete set of timezone abbreviation definitions that are hard-wired into ecpglib.  Whatever we do about that will likely not be appropriate material for back-patching. Also, a potential free() of a garbage pointer after an out-of-memory failure in ecpglib has been fixed. This patch also fixes pre-existing bugs in DetermineTimeZoneOffset() that caused it to produce unexpected results near a timezone transition, if both the ""before"" and ""after"" states are marked as standard time.  We'd only ever thought about or tested transitions between standard and DST time, but that's not what's happening when a zone simply redefines their base GMT offset. In passing, update the SGML documentation to refer to the Olson/zoneinfo/ zic timezone database as the ""IANA"" database, since it's now being maintained under the auspices of IANA. "	b2cbced9eef20692b51a84d68d469627f4fc43ac
----------------------------
"Increase number of hash join buckets for underestimate. If we expect batching at the very beginning, we size nbuckets for ""full work_mem"" (see how many tuples we can get into work_mem, while not breaking NTUP_PER_BUCKET threshold). If we expect to be fine without batching, we start with the 'right' nbuckets and track the optimal nbuckets as we go (without actually resizing the hash table). Once we hit work_mem (considering the optimal nbuckets value), we keep the value. At the end of the first batch, we check whether (nbuckets != nbuckets_optimal) and resize the hash table if needed. Also, we keep this value for all batches (it's OK because it assumes full work_mem, and it makes the batchno evaluation trivial). So the resize happens only once. There could be cases where it would improve performance to allow the NTUP_PER_BUCKET threshold to be exceeded to keep everything in one batch rather than spilling to a second batch, but attempts to generate such a case have so far been unsuccessful; that issue may be addressed with a follow-on patch after further investigation. Tomas Vondra with minor format and comment cleanup by me Reviewed by Robert Haas, Heikki Linnakangas, and Kevin Grittner "	30d7ae3c76d2de144232ae6ab328ca86b70e72c3
----------------------------
Change the way encoding and locale checks are done in pg_upgrade. Lc_collate and lc_ctype have been per-database settings since server version 8.4, but pg_upgrade was still treating them as cluster-wide options. It fetched the values for the template0 databases in old and new cluster, and compared them. That's backwards; the encoding and locale of the template0 database doesn't matter, as template0 is guaranteed to contain only ASCII characters. But if there are any other databases that exist on both clusters (in particular template1 and postgres databases), their encodings and locales must be compatible. Also, make the locale comparison more lenient. If the locale names are not equal, try to canonicalize both of them by passing them to setlocale(). We used to do that only when upgrading from 9.1 or below, but it seems like a good idea even with newer versions. If we change the canonical form of a locale, this allows pg_upgrade to still work. I'm about to do just that to fix bug #11431, by mapping a locale name that contains non-ASCII characters to a pure-ASCII alias of the same locale. No backpatching, because earlier versions of pg_upgrade still support upgrading from 8.3 servers. That would be more complicated, so it doesn't seem worth it, given that we haven't received any complaints about this from users. 	33755e8edf149dabfc0ed9b697a84f70b0cca0de
----------------------------
Don't balance vacuum cost delay when per-table settings are in effect When there are cost-delay-related storage options set for a table, trying to make that table participate in the autovacuum cost-limit balancing algorithm produces undesirable results: instead of using the configured values, the global values are always used, as illustrated by Mark Kirkwood in http://www.postgresql.org/message-id/52FACF15.8020507@catalyst.net.nz Since the mechanism is already complicated, just disable it for those cases rather than trying to make it cope.  There are undesirable side-effects from this too, namely that the total I/O impact on the system will be higher whenever such tables are vacuumed.  However, this is seen as less harmful than slowing down vacuum, because that would cause bloat to accumulate.  Anyway, in the new system it is possible to tweak options to get the precise behavior one wants, whereas with the previous system one was simply hosed. This has been broken forever, so backpatch to all supported branches. This might affect systems where cost_limit and cost_delay have been set for individual tables. 	1021bd6a89bc756c2a72b29eeee1a7a5c25f64f5
----------------------------
Code review for row security. Buildfarm member tick identified an issue where the policies in the relcache for a relation were were being replaced underneath a running query, leading to segfaults while processing the policies to be added to a query.  Similar to how TupleDesc RuleLocks are handled, add in a equalRSDesc() function to check if the policies have actually changed and, if not, swap back the rsdesc field (using the original instead of the temporairly built one; the whole structure is swapped and then specific fields swapped back).  This now passes a CLOBBER_CACHE_ALWAYS for me and should resolve the buildfarm error. In addition to addressing this, add a new chapter in Data Definition under Privileges which explains row security and provides examples of its usage, change \d to always list policies (even if row security is disabled- but note that it is disabled, or enabled with no policies), rework check_role_for_policy (it really didn't need the entire policy, but it did need to be using has_privs_of_role()), and change the field in pg_class to relrowsecurity from relhasrowsecurity, based on Heikki's suggestion.  Also from Heikki, only issue SET ROW_SECURITY in pg_restore when talking to a 9.5+ server, list Bypass RLS in \du, and document --enable-row-security options for pg_dump and pg_restore. Lastly, fix a number of minor whitespace and typo issues from Heikki, Dimitri, add a missing #include, per Peter E, fix a few minor variable-assigned-but-not-used and resource leak issues from Coverity and add tab completion for role attribute bypassrls as well. 	6550b901fe7c47c03775400e0c790c6c1234a017
----------------------------
Log ALTER SYSTEM statements as DDL Per discussion in bug #11350, log ALTER SYSTEM commands at the log_statement=ddl level, rather than at the log_statement=all level. Pointed out by Tomonari Katsumata. Back-patch to 9.4 where ALTER SYSTEM was introduced. 	43bed84c320443ee7247f7ca8d609640651aab93
----------------------------
Row-Level Security Policies (RLS) Building on the updatable security-barrier views work, add the ability to define policies on tables to limit the set of rows which are returned from a query and which are allowed to be added to a table.  Expressions defined by the policy for filtering are added to the security barrier quals of the query, while expressions defined to check records being added to a table are added to the with-check options of the query. New top-level commands are CREATE/ALTER/DROP POLICY and are controlled by the table owner.  Row Security is able to be enabled and disabled by the owner on a per-table basis using ALTER TABLE .. ENABLE/DISABLE ROW SECURITY. Per discussion, ROW SECURITY is disabled on tables by default and must be enabled for policies on the table to be used.  If no policies exist on a table with ROW SECURITY enabled, a default-deny policy is used and no records will be visible. By default, row security is applied at all times except for the table owner and the superuser.  A new GUC, row_security, is added which can be set to ON, OFF, or FORCE.  When set to FORCE, row security will be applied even for the table owner and superusers. When set to OFF, row security will be disabled when allowed and an error will be thrown if the user does not have rights to bypass row security. Per discussion, pg_dump sets row_security = OFF by default to ensure that exports and backups will have all data in the table or will error if there are insufficient privileges to bypass row security. A new option has been added to pg_dump, --enable-row-security, to ask pg_dump to export with row security enabled. A new role capability, BYPASSRLS, which can only be set by the superuser, is added to allow other users to be able to bypass row security using row_security = OFF. Many thanks to the various individuals who have helped with the design, particularly Robert Haas for his feedback. Authors include Craig Ringer, KaiGai Kohei, Adam Brightwell, Dean Rasheed, with additional changes and rework by me. Reviewers have included all of the above, Greg Smith, Jeff McCormick, and Robert Haas. 	491c029dbc4206779cf659aa0ff986af7831d2ff
----------------------------
Add the capability to display summary statistics to pg_xlogdump. The new --stats/--stats=record options to pg_xlogdump display per rmgr/per record statistics about the parsed WAL. This is useful to understand what the WAL primarily consists of, to allow targeted optimizations on application, configuration, and core code level. It is likely that we will want to fine tune the statistics further, but the feature already is quite helpful. Author: Abhijit Menon-Sen, slightly editorialized by me Reviewed-By: Andres Freund, Dilip Kumar and Furuya Osamu Discussion: 20140604104716.GA3989@toroid.org 	bdd5726c347016ea34e9fb68d1b8b71046e25d2e
----------------------------
Fix configure check for %z printf support after INT64_MODIFIER changes. The PGAC_FUNC_SNPRINTF_SIZE_T_SUPPORT test was broken by ce486056ecd28050. Among others it made the UINT64_FORMAT macro to be defined in c.h, instead of directly being defined by configure. This lead to the replacement printf being used on all platforms for a while. Which seems to work, because this was only used due to different profiles ;) Fix by relying on INT64_MODIFIER instead. 	7e3f728353fa9b36c7f98b6ec447d3f1b8deec14
----------------------------
Invent PGC_SU_BACKEND and mark log_connections/log_disconnections that way. This new GUC context option allows GUC parameters to have the combined properties of PGC_BACKEND and PGC_SUSET, ie, they don't change after session start and non-superusers can't change them.  This is a more appropriate choice for log_connections and log_disconnections than their previous context of PGC_BACKEND, because we don't want non-superusers to be able to affect whether their sessions get logged. Note: the behavior for log_connections is still a bit odd, in that when a superuser attempts to set it from PGOPTIONS, the setting takes effect but it's too late to enable or suppress connection startup logging. It's debatable whether that's worth fixing, and in any case there is a reasonable argument for PGC_SU_BACKEND to exist. In passing, re-pgindent the files touched by this commit. Fujii Masao, reviewed by Joe Conway and Amit Kapila 	fe550b2ac249af5fbd8e9e19290a4ba43c882f2d
----------------------------
Change NTUP_PER_BUCKET to 1 to improve hash join lookup speed. Since this makes the bucket headers use ~10x as much memory, properly account for that memory when we figure out whether everything fits in work_mem.  This might result in some cases that previously used only a single batch getting split into multiple batches, but it's unclear as yet whether we need defenses against that case, and if so, what the shape of those defenses should be. It's worth noting that even in these edge cases, users should still be no worse off than they would have been last week, because commit 45f6240a8fa9d35548eb2ef23dba2c11540aa02a saved a big pile of memory on exactly the same workloads. Tomas Vondra, reviewed and somewhat revised by me. 	8cce08f168481c5fc5be4e7e29b968e314f1b41e
----------------------------
Add GUC to enable logging of replication commands. Previously replication commands like IDENTIFY_COMMAND were not logged even when log_statements is set to all. Some users who want to audit all types of statements were not satisfied with this situation. To address the problem, this commit adds new GUC log_replication_commands. If it's enabled, all replication commands are logged in the server log. There are many ways to allow us to enable that logging. For example, we can extend log_statement so that replication commands are logged when it's set to all. But per discussion in the community, we reached the consensus to add separate GUC for that. Reviewed by Ian Barwick, Robert Haas and Heikki Linnakangas. 	4ad2a548050fdde07fed93e6c60a4d0a7eba0622
----------------------------
doc:  improve configuration management section Patch by David Johnston Backpatch through 9.4 	4c4654afeb5208c80720b8c373a31c499237989b
----------------------------
Add support for optional_argument to our own getopt_long() implementation. 07c8651dd91d5a currently causes compilation errors on mscv (and probably some other) compilers because our getopt_long() implementation doesn't have support for optional_argument. Thus implement optional_argument in our fallback implemenation. It's quite possibly also useful in other cases. Arguably this needs a configure check for optional_argument, but it has existed pretty much since getopt_long() was introduced and thus doesn't seem worth the configure runtime. Normally I'd would not push a patch this fast, but this allows msvc to build again and has low risk as only optional_argument behaviour has changed. Author: Michael Paquier and Andres Freund Discussion: CAB7nPqS5VeedSCxrK=QouokbawgGKLpyc1Q++RRFCa_sjcSVrg@mail.gmail.com 	311da16439ef69fc2054af3f4377fd4acd29a0e3
----------------------------
Support ALTER SYSTEM RESET command. This patch allows us to execute ALTER SYSTEM RESET command to remove the configuration entry from postgresql.auto.conf. Vik Fearing, reviewed by Amit Kapila and me. 	bd3b7a9eef6fd8d71ad9aa5eaf1f90e904e96f0b
----------------------------
Make backend local tracking of buffer pins memory efficient. Since the dawn of time (aka Postgres95) multiple pins of the same buffer by one backend have been optimized not to modify the shared refcount more than once. This optimization has always used a NBuffer sized array in each backend keeping track of a backend's pins. That array (PrivateRefCount) was one of the biggest per-backend memory allocations, depending on the shared_buffers setting. Besides the waste of memory it also has proven to be a performance bottleneck when assertions are enabled as we make sure that there's no remaining pins left at the end of transactions. Also, on servers with lots of memory and a correspondingly high shared_buffers setting the amount of random memory accesses can also lead to poor cpu cache efficiency. Because of these reasons a backend's buffers pins are now kept track of in a small statically sized array that overflows into a hash table when necessary. Benchmarks have shown neutral to positive performance results with considerably lower memory usage. Patch by me, review by Robert Haas. Discussion: 20140321182231.GA17111@alap3.anarazel.de 	4b4b680c3d6d8485155d4d4bf0a92d3a874b7a65
----------------------------
"Always use our getaddrinfo.c on Windows. Commit a16bac36eca8158cbf78987e95376f610095f792 let ""configure"" detect the system getaddrinfo() when building under 64-bit MinGW-w64.  However, src/include/port/win32/sys/socket.h assumes all native Windows configurations use our replacement.  This change placates buildfarm member jacana until we establish a plan for getaddrinfo() on Windows. "	ec544a65c9090bc9da11ea384d1369fd552ca8b0
----------------------------
Allow escaping of option values for options passed at connection start. This is useful to allow to set GUCs to values that include spaces; something that wasn't previously possible. The primary case motivating this is the desire to set default_transaction_isolation to 'repeatable read' on a per connection basis, but other usecases like seach_path do also exist. This introduces a slight backward incompatibility: Previously a \ in an option value would have been passed on literally, now it'll be taken as an escape. The relevant mailing list discussion starts with 20140204125823.GJ12016@awork2.anarazel.de. 	11a020eb6e4023a1570a2788ba22dd6aafbd02dc
----------------------------
Allow units to be specified in relation option setting value. This introduces an infrastructure which allows us to specify the units like ms (milliseconds) in integer relation option, like GUC parameter. Currently only autovacuum_vacuum_cost_delay reloption can accept the units. Reviewed by Michael Paquier 	e23014f3d40f7d2c23bc97207fd28efbe5ba102b
----------------------------
doc: Document valid checkpoint_timeout range Author: Fabien COELHO <coelho@cri.ensmp.fr> 	8e484bc4abccc03d49af25d32a5ffaecd3c6cf2d
----------------------------
Specify the port in dblink and postgres_fdw tests. That allows to run those tests against a postmaster listening on a nonstandard port without requiring to export PGPORT in postmaster's environment. This still doesn't support connecting to a nondefault host without configuring it in postmaster's environment. That's harder and less frequently used though. So this is a useful step. 	57ca1d4f0175f60e9cfb0f997c864173d9c72607
----------------------------
pg_upgrade:  add SET log_min_error_statement = warning Add to commit 73d78e11a0f7183c80b93eefbbb6026fe9664015 	b0488e5c4fbfdce8acc989bdc17d9f0ec09ac281
----------------------------
"Use comma+space as the separator in the default search_path. While the space is optional, it seems nicer to be consistent with what you get if you do ""SET search_path=..."". SET always normalizes the separator to be comma+space. Christoph Martin "	02587dcddc2cb5d9f7a17cb0281d168f5a0d6297
----------------------------
Fix obsolete mention of non-int64 support in CREATE SEQUENCE documentation. The old text explained what happened if we didn't have working int64 arithmetic.  Since that case has been explicitly rejected by configure since 8.4.3, documenting it in the 9.x branches can only produce confusion. 	2b475c5946bc8a9beaff3f57b45cc440a78561a1
----------------------------
Update SysV parameter configuration documentation for FreeBSD. FreeBSD hasn't made any use of kern.ipc.semmap since 1.1, and newer releases reject attempts to set it altogether; so stop recommending that it be adjusted.  Per bug #11161. Back-patch to all supported branches.  Before 9.3, also incorporate commit 7a42dff47, which touches the same text and for some reason was not back-patched at the time. 	5ff5bfb5f0d83a538766903275b230499fa9ebe1
----------------------------
Change first call of ProcessConfigFile so as to process only data_directory. When both postgresql.conf and postgresql.auto.conf have their own entry of the same parameter, PostgreSQL uses the entry in postgresql.auto.conf because it appears last in the configuration scan. IOW, the other entries which appear earlier are ignored. But, previously, ProcessConfigFile() detected the invalid settings of even those unused entries and emitted the error messages complaining about them, at postmaster startup. Complaining about the entries to ignore is basically useless. This problem happened because ProcessConfigFile() was called twice at postmaster startup and the first call read only postgresql.conf. That is, the first call could check the entry which might be ignored eventually by the second call which read both postgresql.conf and postgresql.auto.conf. To work around the problem, this commit changes ProcessConfigFile so that its first call processes only data_directory and the second one does all the entries. It's OK to process data_directory in the first call because it's ensured that data_directory doesn't exist in postgresql.auto.conf. Back-patch to 9.4 where postgresql.auto.conf was added. Patch by me. Review by Amit Kapila 	3e3f65973a3c94a699a1659254b89c4f77f0a6a7
----------------------------
Add -F option to pg_receivexlog, for specifying fsync interval. This allows us to specify the maximum time to issue fsync to ensure the received WAL file is safely flushed to disk. Without this, pg_receivexlog always flushes WAL file only when it's closed and which can cause WAL data to be lost at the event of a crash. Furuya Osamu, heavily modified by me. 	3dad73e71f08abd86564d5090a58ca71740e07e0
----------------------------
Change ParseConfigFp() so that it doesn't process unused entry of each parameter. When more than one setting entries of same parameter exist in the configuration file, PostgreSQL uses only entry appearing last in configuration file scan. Since the other entries are not used, ParseConfigFp() doesn't need to process them, but previously it did that. This problematic behavior caused the configuration file scan to detect invalid settings of unused entries (e.g., existence of multiple entries of PGC_POSTMASTER parameter) and log the messages complaining about them. This commit changes the configuration file scan so that it processes only last entry of each parameter. Note that when multiple entries of same parameter exist both in postgresql.conf and postgresql.auto.conf, unused entries in postgresql.conf are still processed only at postmaster startup. The problem has existed since old version, but a user is more likely to encounter it since 9.4 where ALTER SYSTEM command was introduced. So back-patch to 9.4. Amit Kapila, slightly modified by me. Per report from Christoph Berg. 	e3da0d4d1a47e2049ae16aa30bb7bf3105dc8c45
----------------------------
pg_upgrade:  remove reference to autovacuum_multixact_freeze_max_age autovacuum_multixact_freeze_max_age was added as a pg_ctl start parameter in 9.3.X to prevent autovacuum from running.  However, only some 9.3.X releases have autovacuum_multixact_freeze_max_age as it was added in a minor PG 9.3 release.  It also isn't needed because -b turns off autovacuum in 9.1+. Without this fix, trying to upgrade from an early 9.3 release to 9.4 would fail. Report by EDB Backpatch through 9.3 	b4bd6f6b054f62a4ed70065b7b3fa95c012ae89a
----------------------------
Avoid wholesale autovacuuming when autovacuum is nominally off. When autovacuum is nominally off, we will still launch autovac workers to vacuum tables that are at risk of XID wraparound.  But after we'd done that, an autovac worker would proceed to autovacuum every table in the targeted database, if they meet the usual thresholds for autovacuuming. This is at best pretty unexpected; at worst it delays response to the wraparound threat.  Fix it so that if autovacuum is nominally off, we *only* do forced vacuums and not any other work. Per gripe from Andrey Zhidenkov.  This has been like this all along, so back-patch to all supported branches. 	f51ead09df19f0a074c07657b7de8dba0f3050d6
----------------------------
Treat 2PC commit/abort the same as regular xacts in recovery. There were several oversights in recovery code where COMMIT/ABORT PREPARED records were ignored: * pg_last_xact_replay_timestamp() (wasn't updated for 2PC commits) * recovery_min_apply_delay (2PC commits were applied immediately) * recovery_target_xid (recovery would not stop if the XID used 2PC) The first of those was reported by Sergiy Zuban in bug #11032, analyzed by Tom Lane and Andres Freund. The bug was always there, but was masked before commit d19bd29f07aef9e508ff047d128a4046cc8bc1e2, because COMMIT PREPARED always created an extra regular transaction that was WAL-logged. Backpatch to all supported versions (older versions didn't have all the features and therefore didn't have all of the above bugs). 	e74e0906fad5fcdcc807d4655cdc69dded5d58f2
----------------------------
Move PGAC_LDAP_SAFE to config/programs.m4. This restores the style of keeping configure.in free of AC_DEFUN.  Per gripe from Tom Lane. 	e565ff7553e60b3d13dde410ef96f5256c5525eb
----------------------------
"Diagnose incompatible OpenLDAP versions during build and test. With OpenLDAP versions 2.4.24 through 2.4.31, inclusive, PostgreSQL backends can crash at exit.  Raise a warning during ""configure"" based on the compile-time OpenLDAP version number, and test the crash scenario in the dblink test suite.  Back-patch to 9.0 (all supported versions). "	d7cdf6ee36adeac9233678fb8f2a112e6678a770
----------------------------
Fix xreflabel for hot_standby_feedback. Rather remarkable that this has been wrong since 9.1 and nobody noticed. 	4cbe3abb3162d14a86bc8ec73fd9331638ec18a0
----------------------------
"Limit pg_upgrade authentication advice to always-secure techniques. ~/.pgpass is a sound choice everywhere, and ""peer"" authentication is safe on every platform it supports.  Cease to recommend ""trust"" authentication, the safety of which is deeply configuration-specific. Back-patch to 9.0, where pg_upgrade was introduced. "	85f95739ec0c2d9c6afb10d9a0b42732191fbbde
----------------------------
Move check for SSL_get_current_compression to run on mingw Mingw uses a different header file than msvc, so we don't get the hardcoded value, so we need the configure test to run. 	5571caf42d62ea30c452b0ae5f1748289ae613b4
----------------------------
Fix REASSIGN OWNED for text search objects Trying to reassign objects owned by a user that had text search dictionaries or configurations used to fail with: ERROR:  unexpected classid 3600 or ERROR:  unexpected classid 3602 Fix by adding cases for those object types in a switch in pg_shdepend.c. Both REASSIGN OWNED and text search objects go back all the way to 8.1, so backpatch to all supported branches.  In 9.3 the alter-owner code was made generic, so the required change in recent branches is pretty simple; however, for 9.2 and older ones we need some additional reshuffling to enable specifying objects by OID rather than name. Text search templates and parsers are not owned objects, so there's no change required for them. Per bug #9749 reported by Michal Novotný 	6bdf4b9c7dde84902a0cc19c27c51c016485b8e6
----------------------------
"Add missing serial commas Also update one place where the wal_level ""logical"" was not added to an error message. "	d38228fe4029cce3af396bf5b1728d8000ab32c8
----------------------------
Support --with-extra-version equivalent functionality in MSVC build Adds a configuration parameter, extraver, that is appended to the version number when built. Michael Paquier, reviewed by Muhammad Asif Naeem 	8d9a0e85bd6ab4fe5268a1d759a787f72ff9333e
----------------------------
Minimal psql tab completion support for SET search_path. Complete SET search_path = ... to non-temporary and non-toast schemas. Since there pretty much is no use case to add those to the search path and there can be many it's helpful to exclude them. It'd be nicer to complete multiple search path elements, but that's not easy. Jeff Janes 	bd409519bd19911d2d2cba64415447d2fa9d766b
----------------------------
Add autocompletion of locale keywords for CREATE DATABASE Adds support for autocomplete of LC_COLLATE and LC_CTYPE to the CREATE DATABASE command in psql. 	deee42ab015d54baa1b9e0165bf3635dab4f9f7a
----------------------------
Prevent psql from issuing BEGIN before ALTER SYSTEM when AUTOCOMMIT is off. The autocommit-off mode works by issuing an implicit BEGIN just before any command that is not already in a transaction block and is not itself a BEGIN or other transaction-control command, nor a command that cannot be executed inside a transaction block. This commit prevents psql from issuing such an implicit BEGIN before ALTER SYSTEM because it's not allowed inside a transaction block. Backpatch to 9.4 where ALTER SYSTEM was added. Report by Feike Steenbergen 	d97e98e8337e915e3404f7b2a8a6b966b6f5394f
----------------------------
Refactor CREATE/ALTER DATABASE syntax so options need not be keywords. Most of the existing option names are keywords anyway, but we can get rid of LC_COLLATE and LC_CTYPE as keywords known to the lexer/grammar.  This immediately reduces the size of the grammar tables by about 8KB, and will save more when we add additional CREATE/ALTER DATABASE options in future. A side effect of the implementation is that the CONNECTION LIMIT option can now also be spelled CONNECTION_LIMIT.  We choose not to document this, however. Vik Fearing, based on a suggestion by me; reviewed by Pavel Stehule 	15c82efd6994affd1d5654d13bc8911a9faff659
----------------------------
"Remove some useless code in the configure script. Almost ten years ago, commit e48322a6d6cfce1ec52ab303441df329ddbc04d1 broke the logic in ACX_PTHREAD by looping through all the possible flags rather than stopping with the first one that would work.  This meant that $acx_pthread_ok was no longer meaningful after the loop; it would usually be ""no"", whether or not we'd found working thread flags.  The reason nobody noticed is that Postgres doesn't actually use any of the symbols set up by the code after the loop.  Rather than complicate things some more to make it work as designed, let's just remove all that dead code, and thereby save a few cycles in each configure run. "	2e8ce9ae46d15b2bfd34c2d53193da9858d3471a
----------------------------
Fix inadequately-sized output buffer in contrib/unaccent. The output buffer size in unaccent_lexize() was calculated as input string length times pg_database_encoding_max_length(), which effectively assumes that replacement strings aren't more than one character.  While that was all that we previously documented it to support, the code actually has always allowed replacement strings of arbitrary length; so if you tried to make use of longer strings, you were at risk of buffer overrun.  To fix, use an expansible StringInfo buffer instead of trying to determine the maximum space needed a-priori. This would be a security issue if unaccent rules files could be installed by unprivileged users; but fortunately they can't, so in the back branches the problem can be labeled as improper configuration by a superuser. Nonetheless, a memory stomp isn't a nice way of reacting to improper configuration, so let's back-patch the fix. 	5a421a47eb1fc4398f42678c09e35aa72dc7cf18
----------------------------
Fix and enhance the assertion of no palloc's in a critical section. The assertion failed if WAL_DEBUG or LWLOCK_STATS was enabled; fix that by using separate memory contexts for the allocations made within those code blocks. This patch introduces a mechanism for marking any memory context as allowed in a critical section. Previously ErrorContext was exempt as a special case. Instead of a blanket exception of the checkpointer process, only exempt the memory context used for the pending ops hash table. 	1c6821be31f91ab92547a8ed4246762c8cefb1b3
----------------------------
Remove obsolete example of CSV log file name from log_filename document. 7380b63 changed log_filename so that epoch was not appended to it when no format specifier is given. But the example of CSV log file name with epoch still left in log_filename document. This commit removes such obsolete example. This commit also documents the defaults of log_directory and log_filename. Backpatch to all supported versions. Christoph Berg 	de42ed401a9622917b09f549d80946dda35c5f3f
----------------------------
"Don't allow foreign tables with OIDs. The syntax doesn't let you specify ""WITH OIDS"" for foreign tables, but it was still possible with default_with_oids=true. But the rest of the system, including pg_dump, isn't prepared to handle foreign tables with OIDs properly. Backpatch down to 9.1, where foreign tables were introduced. It's possible that there are databases out there that already have foreign tables with OIDs. There isn't much we can do about that, but at least we can prevent them from being created in the future. Patch by Etsuro Fujita, reviewed by Hadi Moshayedi. "	a87a7dc8b64a99e5e497591dddb37b3ecdfae2eb
----------------------------
Fix bug in WAL_DEBUG. The record header was not copied correctly to the buffer that was passed to the rm_desc function. Broken by my rm_desc signature refactoring patch. 	85ba0748ed5aa069643887af84fc28c380b1e815
----------------------------
Don't allow to disable backend assertions via the debug_assertions GUC. The existance of the assert_enabled variable (backing the debug_assertions GUC) reduced the amount of knowledge some static code checkers (like coverity and various compilers) could infer from the existance of the assertion. That could have been solved by optionally removing the assertion_enabled variable from the Assert() et al macros at compile time when some special macro is defined, but the resulting complication doesn't seem to be worth the gain from having debug_assertions. Recompiling is fast enough. The debug_assertions GUC is still available, but readonly, as it's useful when diagnosing problems. The commandline/client startup option -A, which previously also allowed to enable/disable assertions, has been removed as it doesn't serve a purpose anymore. While at it, reduce code duplication in bufmgr.c and localbuf.c assertions checking for spurious buffer pins. That code had to be reindented anyway to cope with the assert_enabled removal. 	3bdcf6a5a7555035810e2ba2b8a0fb04dc5c66b8
----------------------------
Don't allow data_directory to be set in postgresql.auto.conf by ALTER SYSTEM. data_directory could be set both in postgresql.conf and postgresql.auto.conf so far. This could cause some problematic situations like circular definition. To avoid such situations, this commit forbids a user to set data_directory in postgresql.auto.conf. Backpatch this to 9.4 where ALTER SYSTEM command was introduced. Amit Kapila, reviewed by Abhijit Menon-Sen, with minor adjustments by me. 	9ba78fb0b9e6c5a7115592c2c3116fca16b5184e
----------------------------
Revert accidental change of WAL_DEBUG default. Oops. 	b29e7151434b4403d70fd35da25cec585fbd3114
----------------------------
Have configuration templates augment, not replace, LDFLAGS. This preserves user-specified LDFLAGS; we already kept user-specified CFLAGS and CPPFLAGS.  Given the shortage of complaints and the fact that any problem caused is likely to appear at build time, no back-patch. Dag-Erling Smørgrav and Noah Misch 	4d92b158555452ba62ee3caf5c5546fd4a8cba5b
----------------------------
Fix obsolete config-module-exclusion logic in vcregress.pl. The recent addition of regression tests to uuid-ossp exposed the fact that the MSVC build system wasn't being consistent about whether it was building/testing that contrib module, ie, it would try to test the module even when it hadn't built it.  The same hazard was latent for sslinfo. For the moment I just copied the more up-to-date logic from point A to point B, but this is screaming for refactoring. Per buildfarm results. 	8600031147cee7845e1ad9e64304e1f5fe585515
----------------------------
Avoid unportable usage of sscanf(UINT64_FORMAT). On Mingw, it seems that scanf() doesn't necessarily accept the same format codes that printf() does, and in particular it may fail to recognize %llu even though printf() does.  Since configure only probes printf() behavior while setting up the INT64_FORMAT macros, this means it's unsafe to use those macros with scanf().  We had only one instance of such a coding pattern, in contrib/pg_stat_statements, so change that code to avoid the problem. Per buildfarm warnings.  Back-patch to 9.0 where the troublesome code was introduced. Michael Paquier 	9d7ded0f4277f5c0063eca8e871a34e2355a8371
----------------------------
Don't allocate memory inside an Assert() iff in a critical section. HeapTupleHeaderGetCmax() asserts that it is only used if the tuple has been updated by the current transaction. That check is correct and sensible but requires allocating memory if xmax is a multixact. When wal_level is set to logical cmax needs to be included in a wal record , generated inside a critical section, which can trigger the assertion added in 4a170ee9e. Reported-By: Steve Singer 	9fa93530c878a0e23147a65f7d9a62802b22a995
----------------------------
Ignore config.pl and buildenv.pl in src/tools/msvc. config.pl and buildenv.pl can be used to customize build settings when using MSVC.  They should never get committed into the common source tree. Back-patch to 9.0; it looks like the rules were different in 8.4. Michael Paquier 	73011f35eca7f4a3973289d5813648abbc1074a0
----------------------------
Find postgresql.auto.conf in PGDATA even when postgresql.conf is elsewhere. The original coding for ALTER SYSTEM made a fundamentally bogus assumption that postgresql.auto.conf could be sought relative to the main config file if we hadn't yet determined the value of data_directory.  This fails for common arrangements with the config file elsewhere, as reported by Christoph Berg. The simplest fix is to not try to read postgresql.auto.conf until after SelectConfigFiles has chosen (and locked down) the data_directory setting. Because of the logic in ProcessConfigFile for handling resetting of GUCs that've been removed from the config file, we cannot easily read the main and auto config files separately; so this patch adopts a brute force approach of reading the main config file twice during postmaster startup. That's a tad ugly, but the actual time cost is likely to be negligible, and there's no time for a more invasive redesign before beta. With this patch, any attempt to set data_directory via ALTER SYSTEM will be silently ignored.  It would probably be better to throw an error, but that can be dealt with later.  This bug, however, would prevent any testing of ALTER SYSTEM by a significant fraction of the userbase, so it seems important to get it fixed before beta. 	195e81aff5d63da1e1f9dd0314a13859ec15c7c0
----------------------------
"Accept tcl 8.6 in configure's probe for tclsh. Usually the search would find plain ""tclsh"" without any trouble, but some installations might only have the version-numbered flavor of that program. No compatibility problems have been reported with 8.6, so we might as well back-patch this to all active branches. Christoph Berg "	eaba54c20c5ab2cb6aaffa574444fd4990dfe2c7
----------------------------
Update config.guess and config.sub 	7fa5bc43aaaf01e23c3a6ab59a57c19273f6f7f4
----------------------------
Remove overeager assertion in logical_heap_begin_rewrite. It's legal to configure wal_level=logical and max_replication_slots=0 simultaneously. Andres Freund 	b2dada8f5f90ab015ca8a62b46261ef01a7c781f
----------------------------
Increase the default value of effective_cache_size to 4GB. Per discussion, the old value of 128MB is ridiculously small on modern machines; in fact, it's not even any larger than the default value of shared_buffers, which it certainly should be.  Increase to 4GB, which is unlikely to be any worse than the old default for anyone, and should be noticeably better for most.  Eventually we might have an autotuning scheme for this setting, but the recent attempt crashed and burned, so for now just do this. 	b910d7ea358b0134d170ebf4002248df25a5f244
----------------------------
"Revert ""Auto-tune effective_cache size to be 4x shared buffers"" This reverts commit ee1e5662d8d8330726eaef7d3110cb7add24d058, as well as a remarkably large number of followup commits, which were mostly concerned with the fact that the implementation didn't work terribly well.  It still doesn't: we probably need some rather basic work in the GUC infrastructure if we want to fully support GUCs whose default varies depending on the value of another GUC.  Meanwhile, it also emerged that there wasn't really consensus in favor of the definition the patch tried to implement (ie, effective_cache_size should default to 4 times shared_buffers).  So whack it all back to where it was.  In a followup commit, I'll do what was recently agreed to, which is to simply change the default to a higher value. "	a16d421ca4fc639929bc964b2585e8382cf16e33
----------------------------
Run autoconf in wake of commit a692ee5870f0f442565b4c4bff367094599e9bdf. Heikki updated configure.in but evidently forgot to include the updated configure script in the commit.  Per buildfarm. 	9252b8eec27bbefbeae9d60d8cd4f6b8be80b861
----------------------------
Replace SYSTEMQUOTEs with Windows-specific wrapper functions. It's easy to forget using SYSTEMQUOTEs when constructing command strings for system() or popen(). Even if we fix all the places missing it now, it is bound to be forgotten again in the future. Introduce wrapper functions that do the the extra quoting for you, and get rid of SYSTEMQUOTEs in all the callers. We previosly used SYSTEMQUOTEs in all the hard-coded command strings, and this doesn't change the behavior of those. But user-supplied commands, like archive_command, restore_command, COPY TO/FROM PROGRAM calls, as well as pgbench's \shell, will now gain an extra pair of quotes. That is desirable, but if you have existing scripts or config files that include an extra pair of quotes, those might need to be adjusted. Reviewed by Amit Kapila and Tom Lane 	a692ee5870f0f442565b4c4bff367094599e9bdf
----------------------------
"Fix ""quiet inline"" configure test for newer clang compilers. This test used to just define an unused static inline function and check whether that causes a warning.  But newer clang versions warn about unused static inline functions when defined inside a .c file, but not when defined in an included header, which is the case we care about. Change the test to cope. Andres Freund "	4c8aa8b5aea1e032f569222d4b6c1019e84622dc
----------------------------
"Fix two bugs in WAL-logging of GIN pending-list pages. In writeListPage, never take a full-page image of the page, because we have all the information required to re-initialize in the WAL record anyway. Before this fix, a full-page image was always generated, unless full_page_writes=off, because when the page is initialized its LSN is always 0. In stable-branches, keep the code to restore the backup blocks if they exist, in case that the WAL is generated with an older minor version, but in master Assert that there are no full-page images. In the redo routine, add missing ""off++"". Otherwise the tuples are added to the page in reverse order. That happens to be harmless because we always scan and remove all the tuples together, but it was clearly wrong. Also, it was masked by the first bug unless full_page_writes=off, because the page was always restored from a full-page image. Backpatch to all supported versions. "	d2722443d993988ff2e529b652c61fec1ca527f7
----------------------------
doc: CREATE DATABASE doesn't copy template database-level config params Report by Alexey Bashtanov 	012025f9ae20e174b81f71af45b467f9a62fe478
----------------------------
doc: mention archive_command and recovery_command are exec'ed locally Report by Craig Ringer 	0e8beed515b78d5a987c04ec047b7c9bee69ac83
----------------------------
docs: adjustments for streaming standbys that disconnect frequently Document problems when disconnection causes loss of hot_standby_feedback and suggest adjusting max_standby_archive_delay and max_standby_streaming_delay. Initial patch by Marko Tiikkaja, adjustments by me 	52e757420fa98a76015c2c88432db94269f3e8f4
----------------------------
docs:  make max_wal_senders higher to handle disconnects Document abrupt streaming client disconnection might leave slots in use, so max_wal_senders should be slightly higher than needed to allow for immediate reconnection. Per mention by Magnus 	9c5334650085d441324e0f4fd9f8db12657b25c7
----------------------------
vacuumdb: Add option --analyze-in-stages Add vacuumdb option --analyze-in-stages which runs ANALYZE three times with different configuration settings, adopting the logic from the analyze_new_cluster.sh script that pg_upgrade generates.  That way, users of pg_dump/pg_restore can also use that functionality. Change pg_upgrade to create the script so that it calls vacuumdb instead of implementing the logic itself. 	c92c3d50d7fbe7391b5fc864b444346b2db29ffe
----------------------------
Have lcov call the right gcov By default, lcov will call whatever gcov it can find in the path.  But if the user has specified a different gcov to configure, this could be incompatible.  So tell lcov explicitly with an option which gcov program to call. 	0d3b2b80aa6aee753f372bb0300a131691e9f55c
----------------------------
Add @configure_input@ marker to Makefile.global.in That way, when looking at Makefile.global, we don't get confused by the comment that claims that this is Makefile.global.in. 	e3fd9327384abc1cd252ddd8ce9429ab7bef48b5
----------------------------
C comment:  track_activity_query_size doesn't support memory units And explain why. Per report from Pavel Stehule 	8fcccadfea491a1074be38266e2346162faa03e3
----------------------------
Fix processing of PGC_BACKEND GUC parameters on Windows. EXEC_BACKEND builds (i.e., Windows) failed to absorb values of PGC_BACKEND parameters if they'd been changed post-startup via the config file.  This for example prevented log_connections from working if it were turned on post-startup.  The mechanism for handling this case has always been a bit of a kluge, and it wasn't revisited when we implemented EXEC_BACKEND. While in a normal forking environment new backends will inherit the postmaster's value of such settings, EXEC_BACKEND backends have to read the settings from the CONFIG_EXEC_PARAMS file, and they were mistakenly rejecting them.  So this case has always been broken in the Windows port; so back-patch to all supported branches. Amit Kapila 	6862ca6970d11c47996d99e49a1cf8b55ef9b40d
----------------------------
"Allow ""-C variable"" and ""--describe-config"" even to root users. There's no really compelling reason to refuse to do these read-only, non-server-starting options as root, and there's at least one good reason to allow -C: pg_ctl uses -C to find out the true data directory location when pointed at a config-only directory.  On Windows, this is done before dropping administrator privileges, which means that pg_ctl fails for administrators if and only if a config-only layout is used. Since the root-privilege check is done so early in startup, it's a bit awkward to check for these switches.  Make the somewhat arbitrary decision that we'll only skip the root check if -C is the first switch. This is not just to make the code a bit simpler: it also guarantees that we can't misinterpret a --boot mode switch.  (While AuxiliaryProcessMain doesn't currently recognize any such switch, it might have one in the future.)  This is no particular problem for pg_ctl, and since the whole behavior is undocumented anyhow, it's not a documentation issue either. (--describe-config only works as the first switch anyway, so this is no restriction for that case either.) Back-patch to 9.2 where pg_ctl first began to use -C. MauMau, heavily edited by me "	b203c57bb778d90bb8728be19e78825134d5820f
----------------------------
Document platform-specificity of unix_socket_permissions. Back-patch to 8.4 (all supported versions). 	fbd32b0cab806a2244bd5171e4b60e53f4a9dfe7
----------------------------
Pass more than the first XLogRecData entry to rm_desc, with WAL_DEBUG. If you compile with WAL_DEBUG and enable it with wal_debug=on, we used to only pass the first XLogRecData entry to the rm_desc routine. I think the original assumprion was that the first XLogRecData entry contains all the necessary information for the rm_desc routine, but that's a pretty shaky assumption. At least standby_redo didn't get the memo. To fix, piece together all the data in a temporary buffer, and pass that to the rm_desc routine. It's been like this forever, but the patch didn't apply cleanly to back-branches. Probably wouldn't be hard to fix the conflicts, but it's not worth the trouble. 	c2a6724823c14fd442c5441eb169b2581781fef0
----------------------------
Again fix initialization of auto-tuned effective_cache_size. The previous method was overly complex and underly correct; in particular, by assigning the default value with PGC_S_OVERRIDE, it prevented later attempts to change the setting in postgresql.conf, as noted by Jeff Janes. We should just assign the default value with source PGC_S_DYNAMIC_DEFAULT, which will have the desired priority relative to the boot_val as well as user-set values. There is still a gap in this method: if there's an explicit assignment of effective_cache_size = -1 in the postgresql.conf file, and that assignment appears before shared_buffers is assigned, the code will substitute 4 times the bootstrap default for shared_buffers, and that value will then persist (since it will have source PGC_S_FILE).  I don't see any very nice way to avoid that though, and it's not a case to be expected in practice. The existing comments in guc-file.l look forward to a redesign of the DYNAMIC_DEFAULT mechanism; if that ever happens, we should consider this case as one of the things we'd like to improve. 	af930e606a3217db3909029c6c3f8d003ba70920
----------------------------
"Setup error context callback for transaction lock waits With this in place, a session blocking behind another one because of tuple locks will get a context line mentioning the relation name, tuple TID, and operation being done on tuple.  For example: LOG:  process 11367 still waiting for ShareLock on transaction 717 after 1000.108 ms DETAIL:  Process holding the lock: 11366. Wait queue: 11367. CONTEXT:  while updating tuple (0,2) in relation ""foo"" STATEMENT:  UPDATE foo SET value = 3; Most usefully, the new line is displayed by log entries due to log_lock_waits, although of course it will be printed by any other log message as well. Author: Christian Kruse, some tweaks by Álvaro Herrera Reviewed-by: Amit Kapila, Andres Freund, Tom Lane, Robert Haas "	f88d4cfc9d417dac2ee41a8f5e593898e56fd2bd
----------------------------
Cleanups from the remove-native-krb5 patch krb_srvname is actually not available anymore as a parameter server-side, since with gssapi we accept all principals in our keytab. It's still used in libpq for client side specification. In passing remove declaration of krb_server_hostname, where all the functionality was already removed. Noted by Stephen Frost, though a different solution than his suggestion 	0294023a6b1c5df7683707a77238ab634d4ea8c1
----------------------------
Prevent interrupts while reporting non-ERROR elog messages. This should eliminate the risk of recursive entry to syslog(3), which appears to be the cause of the hang reported in bug #9551 from James Morton. Arguably, the real problem here is auth.c's willingness to turn on ImmediateInterruptOK while executing fairly wide swaths of backend code. We may well need to work at narrowing the code ranges in which the authentication_timeout interrupt is enabled.  For the moment, though, this is a cheap and reasonably noninvasive fix for a field-reported failure; the other approach would be complex and not necessarily bug-free itself. Back-patch to all supported branches. 	6c461cb92f295788446fbd5659b92e279244c725
----------------------------
Show PIDs of lock holders and waiters in log_lock_waits log message. Christian Kruse, reviewed by Kumar Rajeev Rastogi. 	588fb5071545ce6e8ffb6a88e146789560e6c879
----------------------------
Fix name of syslog_ident GUC in docs. Michael Paquier 	2b8483d69d1be9700abae0dc7c48c5b7edb77498
----------------------------
Allocate fresh memory for post_opts/exec_path Instead of having read_post_opts() depend on the memory allocated for the config file (which is now getting free'd), pg_strdup() for post_opts and exec_path (similar to how it's being done elsewhere). Noted by Thom Brown. 	dd917bb793b27f8c7616f0e64f9a119e8d98eb24
----------------------------
Do wal_level and hot standby checks when doing crash-then-archive recovery. CheckRequiredParameterValues() should perform the checks if archive recovery was requested, even if we are going to perform crash recovery first. Reported by Kyotaro HORIGUCHI. Backpatch to 9.2, like the crash-then-archive recovery mode. 	956685f82b6983ff17e6a39bd386b11f554715a8
----------------------------
pg_dump et al: Add --if-exists option This option makes pg_dump, pg_dumpall and pg_restore inject an IF EXISTS clause to each DROP command they emit.  (In pg_dumpall, the clause is not added to individual objects drops, but rather to the CREATE DATABASE commands, as well as CREATE ROLE and CREATE TABLESPACE.) This allows for a better user dump experience when using --clean in case some objects do not already exist.  Per bug #7873 by Dave Rolsky. Author: Pavel Stěhule Reviewed-by: Jeevan Chalke, Álvaro Herrera, Josh Kupershmidt 	9067310cc5dd590e36c2c3219dbf3961d7c9f8cb
----------------------------
Various Coverity-spotted fixes A number of issues were identified by the Coverity scanner and are addressed in this patch.  None of these appear to be security issues and many are mostly cosmetic changes. Short comments for each of the changes follows. Correct the semi-colon placement in be-secure.c regarding SSL retries. Remove a useless comparison-to-NULL in proc.c (value is dereferenced prior to this check and therefore can't be NULL). Add checking of chmod() return values to initdb. Fix a couple minor memory leaks in initdb. Fix memory leak in pg_ctl- involves free'ing the config file contents. Use an int to capture fgetc() return instead of an enum in pg_dump. Fix minor memory leaks in pg_dump. (note minor change to convertOperatorReference()'s API) Check fclose()/remove() return codes in psql. Check fstat(), find_my_exec() return codes in psql. Various ECPG memory leak fixes. Check find_my_exec() return in ECPG. Explicitly ignore pqFlush return in libpq error-path. Change PQfnumber() to avoid doing an strdup() when no changes required. Remove a few useless check-against-NULL's (value deref'd beforehand). Check rmtree(), malloc() results in pg_regress. Also check get_alternative_expectfile() return in pg_regress. 	b1aebbb6a86e96d7b8f3035ac730dfc24652496c
----------------------------
Update and clarify ssl_ciphers default - Write HIGH:MEDIUM instead of DEFAULT:!LOW:!EXP for clarity. - Order 3DES last to work around inappropriate OpenSSL default. - Remove !MD5 and @STRENGTH, because they are irrelevant. - Add clarifying documentation. Effectively, the new default is almost the same as the old one, but it is arguably easier to understand and modify. Author: Marko Kreen <markokr@gmail.com> 	32001ab0b7b4ee143e195f100543f531757a555b
----------------------------
Increase work_mem and maintenance_work_mem defaults by 4x New defaults are 4MB and 64MB. 	848ae330a497b4d430d93bd813f93c40d2bb0157
----------------------------
"Prefer pg_any_to_server/pg_server_to_any over pg_do_encoding_conversion. A large majority of the callers of pg_do_encoding_conversion were specifying the database encoding as either source or target of the conversion, meaning that we can use the less general functions pg_any_to_server/pg_server_to_any instead. The main advantage of using the latter functions is that they can make use of a cached conversion-function lookup in the common case that the other encoding is the current client_encoding.  It's notationally cleaner too in most cases, not least because of the historical artifact that the latter functions use ""char *"" rather than ""unsigned char *"" in their APIs. Note that pg_any_to_server will apply an encoding verification step in some cases where pg_do_encoding_conversion would have just done nothing. This seems to me to be a good idea at most of these call sites, though it partially negates the performance benefit. Per discussion of bug #9210. "	769065c1b2471f484bb48bb58a8bdcf1d12a419c
----------------------------
configure.in: Use dnl in place of # where appropriate The comment added by ed011d9754fd4b76eac0eaa8c057fcfc0c302a6a used #, which means it gets copied into configure, but it doesn't make sense there.  So use dnl, which gets dropped when creating configure. 	2c65856b7b444a5e804d4f694438e7444811d26b
----------------------------
Avoid using dllwrap to build pgevent in Mingw builds. If this works, we can get rid of configure's support for locating dllwrap ... but let's see what the buildfarm says, first. Hiroshi Inoue 	4f5f485d10cad372a3a0cd8dd70780f1a32f43f0
----------------------------
"Prevent potential overruns of fixed-size buffers. Coverity identified a number of places in which it couldn't prove that a string being copied into a fixed-size buffer would fit.  We believe that most, perhaps all of these are in fact safe, or are copying data that is coming from a trusted source so that any overrun is not really a security issue.  Nonetheless it seems prudent to forestall any risk by using strlcpy() and similar functions. Fixes by Peter Eisentraut and Jozef Mlich based on Coverity reports. In addition, fix a potential null-pointer-dereference crash in contrib/chkpass.  The crypt(3) function is defined to return NULL on failure, but chkpass.c didn't check for that before using the result. The main practical case in which this could be an issue is if libc is configured to refuse to execute unapproved hashing algorithms (e.g., ""FIPS mode"").  This ideally should've been a separate commit, but since it touches code adjacent to one of the buffer overrun changes, I included it in this commit to avoid last-minute merge issues. This issue was reported by Honza Horak. Security: CVE-2014-0065 for buffer overruns, CVE-2014-0066 for crypt() "	01824385aead50e557ca1af28640460fa9877d51
----------------------------
Document security implications of check_function_bodies. Back-patch to 8.4 (all supported versions). 	540b4e5bc85f7e44842493a810b04a84881db20f
----------------------------
Prevent privilege escalation in explicit calls to PL validators. The primary role of PL validators is to be called implicitly during CREATE FUNCTION, but they are also normal functions that a user can call explicitly.  Add a permissions check to each validator to ensure that a user cannot use explicit validator calls to achieve things he could not otherwise achieve.  Back-patch to 8.4 (all supported versions). Non-core procedural language extensions ought to make the same two-line change to their own validators. Andres Freund, reviewed by Tom Lane and Noah Misch. Security: CVE-2014-0061 	537cbd35c893e67a63c59bc636c3e888bd228bc7
----------------------------
Shore up ADMIN OPTION restrictions. Granting a role without ADMIN OPTION is supposed to prevent the grantee from adding or removing members from the granted role.  Issuing SET ROLE before the GRANT bypassed that, because the role itself had an implicit right to add or remove members.  Plug that hole by recognizing that implicit right only when the session user matches the current role. Additionally, do not recognize it during a security-restricted operation or during execution of a SECURITY DEFINER function.  The restriction on SECURITY DEFINER is not security-critical.  However, it seems best for a user testing his own SECURITY DEFINER function to see the same behavior others will see.  Back-patch to 8.4 (all supported versions). The SQL standards do not conflate roles and users as PostgreSQL does; only SQL roles have members, and only SQL users initiate sessions.  An application using PostgreSQL users and roles as SQL users and roles will never attempt to grant membership in the role that is the session user, so the implicit right to add or remove members will never arise. The security impact was mostly that a role member could revoke access from others, contrary to the wishes of his own grantor.  Unapproved role member additions are less notable, because the member can still largely achieve that by creating a view or a SECURITY DEFINER function. Reviewed by Andres Freund and Tom Lane.  Reported, independently, by Jonas Sundman and Noah Misch. Security: CVE-2014-0060 	fea164a72a7bfd50d77ba5fb418d357f8f2bb7d0
----------------------------
PGDLLIMPORT'ify DateStyle and IntervalStyle. This is needed on Windows to support contrib/postgres_fdw.  Although it's been broken since last March, we didn't notice until recently because there were no active buildfarm members that complained about missing PGDLLIMPORT marking.  Efforts are underway to improve that situation, in support of which we're delaying fixing some other cases of global variables that should be marked PGDLLIMPORT.  However, this case affects 9.3, so we can't wait any longer to fix it. I chose to mark DateOrder as well, though it's not strictly necessary for postgres_fdw. 	a5cf60682e4c61e7cc35c5024abf52ed561775ea
----------------------------
Separate multixact freezing parameters from xid's Previously we were piggybacking on transaction ID parameters to freeze multixacts; but since there isn't necessarily any relationship between rates of Xid and multixact consumption, this turns out not to be a good idea. Therefore, we now have multixact-specific freezing parameters: vacuum_multixact_freeze_min_age: when to remove multis as we come across them in vacuum (default to 5 million, i.e. early in comparison to Xid's default of 50 million) vacuum_multixact_freeze_table_age: when to force whole-table scans instead of scanning only the pages marked as not all visible in visibility map (default to 150 million, same as for Xids).  Whichever of both which reaches the 150 million mark earlier will cause a whole-table scan. autovacuum_multixact_freeze_max_age: when for cause emergency, uninterruptible whole-table scans (default to 400 million, double as that for Xids).  This means there shouldn't be more frequent emergency vacuuming than previously, unless multixacts are being used very rapidly. Backpatch to 9.3 where multixacts were made to persist enough to require freezing.  To avoid an ABI break in 9.3, VacuumStmt has a couple of fields in an unnatural place, and StdRdOptions is split in two so that the newly added fields can go at the end. Patch by me, reviewed by Robert Haas, with additional input from Andres Freund and Tom Lane. 	801c2dc72cb3c68a7c430bb244675b7a68fd541a
----------------------------
pg_test_fsync: add C comment about direct I/O and write size failure Report from Marti Raudsepp 	f9bb944cd879949cf454b941f2b8fa7b00fcc1e4
----------------------------
Flush a stray definition of $(DLLTOOL). Even if this is needed, it'd be configure's responsibility to set it. 	7a98d323df2d0839ebb4aab2004c626b64343b76
----------------------------
Make pg_basebackup skip temporary statistics files. The temporary statistics files don't need to be included in the backup because they are always reset at the beginning of the archive recovery. This patch changes pg_basebackup so that it skips all files located in $PGDATA/pg_stat_tmp or the directory specified by stats_temp_directory parameter. 	3e8554a54a95425e93fe49025ccda499a1a93173
----------------------------
"Introduce replication slots. Replication slots are a crash-safe data structure which can be created on either a master or a standby to prevent premature removal of write-ahead log segments needed by a standby, as well as (with hot_standby_feedback=on) pruning of tuples whose removal would cause replication conflicts.  Slots have some advantages over existing techniques, as explained in the documentation. In a few places, we refer to the type of replication slots introduced by this patch as ""physical"" slots, because forthcoming patches for logical decoding will also have slots, but with somewhat different properties. Andres Freund and Robert Haas "	858ec11858a914d4c380971985709b6d6b7dd6fc
----------------------------
Code review for auto-tuned effective_cache_size. Fix integer overflow issue noted by Magnus Hagander, as well as a bunch of other infelicities in commit ee1e5662d8d8330726eaef7d3110cb7add24d058 and its unreasonably large number of followups. 	2850896961994aa0993b9e2ed79a209750181b8a
----------------------------
ALTER TABLESPACE ... MOVE ... OWNED BY Add the ability to specify the objects to move by who those objects are owned by (as relowner) and change ALL to mean ALL objects.  This makes the command always operate against a well-defined set of objects and not have the objects-to-be-moved based on the role of the user running the command. Per discussion with Simon and Tom. 	fbe19ee3b87590f1006d072be5fecf8a33d4e9f5
----------------------------
"Allow use of ""z"" flag in our printf calls, and use it where appropriate. Since C99, it's been standard for printf and friends to accept a ""z"" size modifier, meaning ""whatever size size_t has"".  Up to now we've generally dealt with printing size_t values by explicitly casting them to unsigned long and using the ""l"" modifier; but this is really the wrong thing on platforms where pointers are wider than longs (such as Win64).  So let's start using ""z"" instead.  To ensure we can do that on all platforms, teach src/port/snprintf.c to understand ""z"", and add a configure test to force use of that implementation when the platform's version doesn't handle ""z"". Having done that, modify a bunch of places that were using the unsigned-long hack to use ""z"" instead.  This patch doesn't pretend to have gotten everyplace that could benefit, but it catches many of them.  I made an effort in particular to ensure that all uses of the same error message text were updated together, so as not to increase the number of translatable strings. It's possible that this change will result in format-string warnings from pre-C99 compilers.  We might have to reconsider if there are any popular compilers that will warn about this; but let's start by seeing what the buildfarm thinks. Andres Freund, with a little additional work by me "	ac4ef637ad2ff2a24847f67d14027b8745f6741e
----------------------------
Allow type_func_name_keywords in even more places A while back, 2c92edad48796119c83d7dbe6c33425d1924626d allowed type_func_name_keywords to be used in more places, including role identifiers.  Unfortunately, that commit missed out on cases where name_list was used for lists-of-roles, eg: for DROP ROLE.  This resulted in the unfortunate situation that you could CREATE a role with a type_func_name_keywords-allowed identifier, but not DROP it (directly- ALTER could be used to rename it to something which could be DROP'd). This extends allowing type_func_name_keywords to places where role lists can be used. Back-patch to 9.0, as 2c92edad48796119c83d7dbe6c33425d1924626d was. 	6c36f383df728866d7085c155cbe45ebc07b195f
----------------------------
"Fix inadvertent semantics change in last patch to plug memory leaks. Commit a5bca4ef034f71175d46462963af2329d22068c2 accidentally changed the semantics when the ""skipping missing configuration file"" is emitted, because it forced OK to true instead of leaving the value untouched. Spotted by Tom Lane. "	033b2343fae9d8c9df124cde62087dcb481c9c5e
----------------------------
Plug more memory leaks when reloading config file. Commit 138184adc5f7c60c184972e4d23f8cdb32aed77d plugged some but not all of the leaks from commit 2a0c81a12c7e6c5ac1557b0f1f4a581f23fd4ca7. This tightens things up some more. Amit Kapila, per an observation by Tom Lane 	a5bca4ef034f71175d46462963af2329d22068c2
----------------------------
Show SSL encryption information when logging connections Expand the messages when log_connections is enabled to include the fact that SSL is used and the SSL cipher information. Dr. Andreas Kunert, review by Marko Kreen 	4cba1f6bbf7c8f956c95e72c43e517a56b97665b
----------------------------
Define WIN32 when _WIN32 is set _WIN32 is set by the compiler, whereas our code uses WIN32 that is normally set through our build system. To make it possible to build extensions out of tree we cannot rely on that, so set the WIN32 symbol explicitly whenever the compiler has set _WIN32. Not setting this symbol causes double inclusion of pg_config_os.h, and possibly other errors as well. Craig Ringer 	9c14dd22e144a5bef9b114a7a94df97cb23c6b9b
----------------------------
Code improvements for ALTER SYSTEM .. SET. Move FreeConfigVariables() later to make sure ErrorConfFile is valid when we use it, and get rid of an unnecessary string copy operation. Amit Kapila, kibitzed by me. 	05ff5062da5fb4b0c950260ed12af0ae5d8932a4
----------------------------
Fix pause_at_recovery_target + recovery_target_inclusive combination. If pause_at_recovery_target is set, recovery pauses *before* applying the target record, even if recovery_target_inclusive is set. If you then continue with pg_xlog_replay_resume(), it will apply the target record before ending recovery. In other words, if you log in while it's paused and verify that the database looks OK, ending recovery changes its state again, possibly destroying data that you were tring to salvage with PITR. Backpatch to 9.1, this has been broken since pause_at_recovery_target was added. 	3739e5ab93afb21b69da2e42f6e161ef63aa95c8
----------------------------
If multiple recovery_targets are specified, use the latest one. The docs say that only one of recovery_target_xid, recovery_target_time, or recovery_target_name can be specified. But the code actually did something different, so that a name overrode time, and xid overrode both time and name. Now the target specified last takes effect, whether it's an xid, time or name. With this patch, we still accept multiple recovery_target settings, even though docs say that only one can be specified. It's a general property of the recovery.conf file parser that you if you specify the same option twice, the last one takes effect, like with postgresql.conf. 	815d71deed5df2a91b06da76edbe5bc64965bfea
----------------------------
Change the way we mark tuples as frozen. Instead of changing the tuple xmin to FrozenTransactionId, the combination of HEAP_XMIN_COMMITTED and HEAP_XMIN_INVALID, which were previously never set together, is now defined as HEAP_XMIN_FROZEN.  A variety of previous proposals to freeze tuples opportunistically before vacuum_freeze_min_age is reached have foundered on the objection that replacing xmin by FrozenTransactionId might hinder debugging efforts when things in this area go awry; this patch is intended to solve that problem by keeping the XID around (but largely ignoring the value to which it is set). Third-party code that checks for HEAP_XMIN_INVALID on tuples where HEAP_XMIN_COMMITTED might be set will be broken by this change.  To fix, use the new accessor macros in htup_details.h rather than consulting the bits directly.  HeapTupleHeaderGetXmin has been modified to return FrozenTransactionId when the infomask bits indicate that the tuple is frozen; use HeapTupleHeaderGetRawXmin when you already know that the tuple isn't marked commited or frozen, or want the raw value anyway. We currently do this in routines that display the xmin for user consumption, in tqual.c where it's known to be safe and important for the avoidance of extra cycles, and in the function-caching code for various procedural languages, which shouldn't invalidate the cache just because the tuple gets frozen. Robert Haas and Andres Freund 	37484ad2aacef5ec794f4dd3d5cf814475180a78
----------------------------
Add ALTER SYSTEM command to edit the server configuration file. Patch contributed by Amit Kapila. Reviewed by Hari Babu, Masao Fujii, Boszormenyi Zoltan, Andres Freund, Greg Smith and others. 	65d6e4cb5c62371dae6c236a7e709d503ae6ddf8
----------------------------
configure: Allow adding a custom string to PG_VERSION This can be used to mark custom built binaries with an extra version string such as a git describe identifier or distribution package release version. From: Oskari Saarenmaa <os@ohmu.fi> 	46328916eefc5f9eaf249518e96f68afcd35923b
----------------------------
New autovacuum_work_mem parameter If autovacuum_work_mem is set, autovacuum workers now use this parameter in preference to maintenance_work_mem. Peter Geoghegan 	8693559cacf1765697c32fc38574af3c19ce61c1
----------------------------
Under wal_level=logical, when saving old tuples, always save OID. There's no real point in not doing this.  It doesn't cost anything in performance or space.  So let's go wild. Andres Freund, with substantial editing as to style by me. 	60dd40bbda92cb1818d5a2651b9d2ba49afd804c
----------------------------
Add a new option, -g, to createuser, to add membership in a role. Chistopher Browne, reviewed by Sameer Thakur, Amit Kapila, and Peter Eisentraut. 	6bea96dd49619122bdb3fe9ddfd559a82b26ff73
----------------------------
Add a new reloption, user_catalog_table. When this reloption is set and wal_level=logical is configured, we'll record the CIDs stamped by inserts, updates, and deletes to the table just as we would for an actual catalog table.  This will allow logical decoding to use historical MVCC snapshots to access such tables just as they access ordinary catalog tables. Replication solutions built around the logical decoding machinery will likely need to set this operation for their configuration tables; it might also be needed by extensions which perform table access in their output functions. Andres Freund, reviewed by myself and others. 	66abc2608c7c00fcd449e00a9e23f13f02e65d04
----------------------------
Add new wal_level, logical, sufficient for logical decoding. When wal_level=logical, we'll log columns from the old tuple as configured by the REPLICA IDENTITY facility added in commit 07cacba983ef79be4a84fcd0e0ca3b5fcb85dd65.  This makes it possible a properly-configured logical replication solution to correctly follow table updates even if they change the chosen key columns, or, with REPLICA IDENTITY FULL, even if the table has no key at all.  Note that updates which do not modify the replica identity column won't log anything extra, making the choice of a good key (i.e. one that will rarely be changed) important to performance when wal_level=logical is configured. Each insert, update, or delete to a catalog table will also log the CMIN and/or CMAX values of stamped by the current transaction. This is necessary because logical decoding will require access to historical snapshots of the catalog in order to decode some data types, and the CMIN/CMAX values that we may need in order to judge row visibility may have been overwritten by the time we need them. Andres Freund, reviewed in various versions by myself, Heikki Linnakangas, KONDO Mitsumasa, and many others. 	e55704d8b2fe522fbc9435acbb5bc59033478bd5
----------------------------
"SSL: Add configuration option to prefer server cipher order By default, OpenSSL (and SSL/TLS in general) lets the client cipher order take priority.  This is OK for browsers where the ciphers were tuned, but few PostgreSQL client libraries make the cipher order configurable.  So it makes sense to have the cipher order in postgresql.conf take priority over client defaults. This patch adds the setting ""ssl_prefer_server_ciphers"" that can be turned on so that server cipher order is preferred.  Per discussion, this now defaults to on. From: Marko Kreen <markokr@gmail.com> Reviewed-by: Adrian Klaver <adrian.klaver@gmail.com> "	ef3267523d1ecf53bb6d4ffbeb6a0ae1af84ed47
----------------------------
Report exit code from external recovery commands properly When an external recovery command such as restore_command or archive_cleanup_command fails, report the exit code properly, distinguishing signals and normal exists, using the existing wait_result_to_str() facility, instead of just reporting the return value from system(). Reviewed-by: Peter Geoghegan <pg@heroku.com> 	fef88b3fdaa3537c64e3d7df9261bc75ece80d3f
----------------------------
pg_upgrade:  Handle default_transaction_read_only settings Setting default_transaction_read_only=true could prevent pg_upgrade from completing, so prepend default_transaction_read_only=false to PGOPTIONS. 	e7d56aee2d1805cd9d280c0e6f8c8af80a13aa3e
----------------------------
Fix pg_dumpall to work for databases flagged as read-only. pg_dumpall's charter is to be able to recreate a database cluster's contents in a virgin installation, but it was failing to honor that contract if the cluster had any ALTER DATABASE SET default_transaction_read_only settings.  By including a SET command for the connection for each connection opened by pg_dumpall output, errors are avoided and the source cluster is successfully recreated. There was discussion of whether to also set this for the connection applying pg_dump output, but it was felt that it was both less appropriate in that context, and far easier to work around. Backpatch to all supported branches. 	4bd371f6f886446b6c0886f088992e6f3d4ab4a2
----------------------------
"Fix full-table-vacuum request mechanism for MultiXactIds While autovacuum dutifully launched anti-multixact-wraparound vacuums when the multixact ""age"" was reached, the vacuum code was not aware that it needed to make them be full table vacuums.  As the resulting partial-table vacuums aren't capable of actually increasing relminmxid, autovacuum continued to launch anti-wraparound vacuums that didn't have the intended effect, until age of relfrozenxid caused the vacuum to finally be a full table one via vacuum_freeze_table_age. To fix, introduce logic for multixacts similar to that for plain TransactionIds, using the same GUCs. Backpatch to 9.3, where permanent MultiXactIds were introduced. Andres Freund, some cleanup by Álvaro "	f54106f77e6d71cbb3fa0924095e5142341fde2b
----------------------------
Replace hardcoded 200000000 with autovacuum_freeze_max_age Parts of the code used autovacuum_freeze_max_age to determine whether anti-multixact-wraparound vacuums are necessary, while others used a hardcoded 200000000 value.  This leads to problems when autovacuum_freeze_max_age is set to a non-default value.  Use the latter everywhere. Backpatch to 9.3, where vacuuming of multixacts was introduced. Andres Freund 	76a31c689c627268067175b5d0687ce0dac9a4f4
----------------------------
Fix assorted race conditions in the new timeout infrastructure. Prevent handle_sig_alarm from losing control partway through due to a query cancel (either an asynchronous SIGINT, or a cancel triggered by one of the timeout handler functions).  That would at least result in failure to schedule any required future interrupt, and might result in actual corruption of timeout.c's data structures, if the interrupt happened while we were updating those. We could still lose control if an asynchronous SIGINT arrives just as the function is entered.  This wouldn't break any data structures, but it would have the same effect as if the SIGALRM interrupt had been silently lost: we'd not fire any currently-due handlers, nor schedule any new interrupt. To forestall that scenario, forcibly reschedule any pending timer interrupt during AbortTransaction and AbortSubTransaction.  We can avoid any extra kernel call in most cases by not doing that until we've allowed LockErrorCleanup to kill the DEADLOCK_TIMEOUT and LOCK_TIMEOUT events. Another hazard is that some platforms (at least Linux and *BSD) block a signal before calling its handler and then unblock it on return.  When we longjmp out of the handler, the unblock doesn't happen, and the signal is left blocked indefinitely.  Again, we can fix that by forcibly unblocking signals during AbortTransaction and AbortSubTransaction. These latter two problems do not manifest when the longjmp reaches postgres.c, because the error recovery code there kills all pending timeout events anyway, and it uses sigsetjmp(..., 1) so that the appropriate signal mask is restored.  So errors thrown outside any transaction should be OK already, and cleaning up in AbortTransaction and AbortSubTransaction should be enough to fix these issues.  (We're assuming that any code that catches a query cancel error and doesn't re-throw it will do at least a subtransaction abort to clean up; but that was pretty much required already by other subsystems.) Lastly, ProcSleep should not clear the LOCK_TIMEOUT indicator flag when disabling that event: if a lock timeout interrupt happened after the lock was granted, the ensuing query cancel is still going to happen at the next CHECK_FOR_INTERRUPTS, and we want to report it as a lock timeout not a user cancel. Per reports from Dan Wood. Back-patch to 9.3 where the new timeout handling infrastructure was introduced.  We may at some point decide to back-patch the signal unblocking changes further, but I'll desist from that until we hear actual field complaints about it. 	16e1b7a1b7f7ffd8a18713e83c8cd72c9ce48e07
----------------------------
doc: Enhance documentation of ssl_ciphers setting a bit 	50107ee7a58f36568997db84df641fde122f3132
----------------------------
Add missing entry for session_preload_libraries in sample config. The omission was apparently an oversight in the original patch. 	7cc0ba9f17fdae610187411439e8c01b26da15ac
----------------------------
Lessen library-loading log level. Previously, messages were emitted at the LOG level every time a backend preloaded a library. That was acceptable (though unnecessary) for shared_preload_libraries; but it was excessive for local_preload_libraries and session_preload_libraries. Reduce to DEBUG1. Also, there was logic in the EXEC_BACKEND case to avoid repeated messages for shared_preload_libraries by demoting them to DEBUG2. DEBUG1 seems more appropriate there, as well, so eliminate that special case. Peter Geoghegan. 	559d535819908adfe2d2ca674fb8562bbd133cef
----------------------------
Fix Hot-Standby initialization of clog and subtrans. These bugs can cause data loss on standbys started with hot_standby=on at the moment they start to accept read only queries, by marking committed transactions as uncommited. The likelihood of such corruptions is small unless the primary has a high transaction rate. 5a031a5556ff83b8a9646892715d7fef415b83c3 fixed bugs in HS's startup logic by maintaining less state until at least STANDBY_SNAPSHOT_PENDING state was reached, missing the fact that both clog and subtrans are written to before that. This only failed to fail in common cases because the usage of ExtendCLOG in procarray.c was superflous since clog extensions are actually WAL logged. f44eedc3f0f347a856eea8590730769125964597/I then tried to fix the missing extensions of pg_subtrans due to the former commit's changes - which are not WAL logged - by performing the extensions when switching to a state > STANDBY_INITIALIZED and not performing xid assignments before that - again missing the fact that ExtendCLOG is unneccessary - but screwed up twice: Once because latestObservedXid wasn't updated anymore in that state due to the earlier commit and once by having an off-by-one error in the loop performing extensions. This means that whenever a CLOG_XACTS_PER_PAGE (32768 with default settings) boundary was crossed between the start of the checkpoint recovery started from and the first xl_running_xact record old transactions commit bits in pg_clog could be overwritten if they started and committed in that window. Fix this mess by not performing ExtendCLOG() in HS at all anymore since it's unneeded and evidently dangerous and by performing subtrans extensions even before reaching STANDBY_SNAPSHOT_PENDING. Analysis and patch by Andres Freund. Reported by Christophe Pettus. Backpatch down to 9.0, like the previous commit that caused this. 	98f58a30c1beb6ec0870d6520f49fb40d9d0b566
----------------------------
"Be more robust when strerror() doesn't give a useful result. glibc, at least, is capable of returning ""???"" instead of anything useful if it doesn't like the setting of LC_CTYPE.  If this happens, or in the previously-known case of strerror() returning an empty string, try to print the C macro name for the error code (""EACCES"" etc).  Only if we don't have the error code in our compiled-in list of popular error codes (which covers most though not quite all of what's called out in the POSIX spec) will we fall back to printing a numeric error code.  This should simplify debugging. Note that this functionality is currently only provided for %m in backend ereport/elog messages.  That may be sufficient, since we don't fool with the locale environment in frontend clients, but it's foreseeable that we might want similar code in libpq for instance. There was some talk of back-patching this, but let's see how the buildfarm likes it first.  It seems likely that at least some of the POSIX-defined error code symbols don't exist on all platforms.  I don't want to clutter the entire list with #ifdefs, but we may need more than are here now. MauMau, edited by me "	8e68816cc2567642c6fcca4eaac66c25e0ae5ced
----------------------------
Increase the number of different values used when seeding random(). When a backend process is forked, we initialize the system's random number generator with srandom(). The seed used is derived from the backend's pid and the timestamp. However, we only used the microseconds part of the timestamp, and it was XORed with the pid, so the total range of different seed values chosen was 0-999999. That's quite limited. Change the code to also use the seconds part of the timestamp in the seed, and shift the microseconds so that all 32 bits of the seed are used. Honza Horak 	98c50656cac2e6b873419fd09569a9119c02148c
----------------------------
Improve documentation of random() function. Move random() and setseed() to a separate table, to have them grouped together. Also add a notice that random() is not cryptographically secure. Original patch by Honza Horak, although I didn't use his version. 	75fdcec14543b60cc0c67483d8cc47d5c7adf1a8
----------------------------
Plug memory leak when reloading config file. The absolute path to config file was not pfreed. There are probably more small leaks here and there in the config file reload code and assign hooks, and in practice no-one reloads the config files frequently enough for it to be a problem, but this one is trivial enough that might as well fix it. Backpatch to 9.3 where the leak was introduced. 	138184adc5f7c60c184972e4d23f8cdb32aed77d
----------------------------
Consistently use unsigned arithmetic for alignment calculations. This avoids an assumption about the signed number representation.  It is anticipated to have no functional changes on supported configurations; many two's complement assumptions remain elsewhere. Per a suggestion from Andres Freund. 	709170b790c11b4012004a6baf11a0fc6ec950de
----------------------------
doc: Configure TOC generation in XSLT HTML build The default table of contents in the XSLT HTML build is much too big and deep.  Configure it to look more like the one that is currently being produced by the DSSSL build. 	ed632ab21e9c638328498a85ccf77452645943bb
----------------------------
initdb: Suppress dynamic shared memory when probing for max_connections. This might not be the right long-term solution here, but it will hopefully turn the buildfarm green again. Oversight noted by Andres Freund 	d41ab71712a4457ed39d5471b23949872ac91def
----------------------------
Remove maintainer-check target, fold into normal build make maintainer-check was obscure and rarely called in practice, and many breakages were missed.  Fold everything that make maintainer-check used to do into the normal build.  Specifically: - Call duplicate_oids when genbki.pl is called. - Check for tabs in SGML files when the documentation is built. - Run msgfmt with the -c option during the regular build.  Add an additional configure check to see whether we are using the GNU version.  (make maintainer-check probably used to fail with non-GNU msgfmt.) Keep maintainer-check as around as phony target for the time being in case anyone is calling it.  But it won't do anything anymore. 	5dd41f3574871757e6b8e2a16b3e736fee36c20d
----------------------------
Centralize effective_cache_size default setting 	0c6b67507631fd9f563e0329da418060f45ac1f0
----------------------------
Adjust the effective_cache_size default for standalone backends 	96dfa6ec0d809bb49f3472921b3ed941d9bd1b8c
----------------------------
Again move function where we set effective_cache_size's default 	6b82f78ff95d7d4201d44359dad41882e7111960
----------------------------
Move new effective_cache_size function Previously set_default_effective_cache_size() could not handle fork, non-fork, and bootstrap cases. 	cbafd6618af9f10e89ed05ff82dac69e65a70307
----------------------------
Fix C comment in check_effective_cache_size() 	bf46524b3136928bfe61c782a950a30638bbd159
----------------------------
doc:  Fix typo in effective_cache_size patch 	3e5a9eee8a8afb729ea393fd0fa6c6495241f6bb
----------------------------
Update postgres.conf.sample for effective_cache_size's new default 	6648775028a85bc024f37eab5e572510977008b1
----------------------------
Allow printf-style padding specifications in log_line_prefix. David Rowley, after a suggestion from Heikki Linnakangas.  Reviewed by Albe Laurenz, and further edited by me. 	4334639f4bb9fb88c13b8dd5faca22b207248504
----------------------------
Fix SSL deadlock risk in libpq In libpq, we set up and pass to OpenSSL callback routines to handle locking.  When we run out of SSL connections, we try to clean things up by de-registering the hooks.  Unfortunately, we had a few calls into the OpenSSL library after these hooks were de-registered during SSL cleanup which lead to deadlocking.  This moves the thread callback cleanup to be after all SSL-cleanup related OpenSSL library calls. I've been unable to reproduce the deadlock with this fix. In passing, also move the close_SSL call to be after unlocking our ssl_config mutex when in a failure state.  While it looks pretty unlikely to be an issue, it could have resulted in deadlocks if we ended up in this code path due to something other than SSL_new failing.  Thanks to Heikki for pointing this out. Back-patch to all supported versions; note that the close_SSL issue only goes back to 9.0, so that hunk isn't included in the 8.4 patch. Initially found and reported by Vesa-Matti J Kari; many thanks to both Heikki and Andres for their help running down the specific issue and reviewing the patch. 	b37c90f11e3c239b999f98ffd3bbea6b8253fffa
----------------------------
Don't VALGRIND_PRINTF() each query string. Doing so was helpful for some Valgrind usage and distracting for other usage.  One can achieve the same effect by changing log_statement and pointing both PostgreSQL and Valgrind logging to stderr. Per gripe from Andres Freund. 	b8104730c8eae1f81ccbc8673bbd2a3566e660ae
----------------------------
Expose fsync_fname as a public API. Andres Freund 	cc52d5b33ff5df29de57dcae9322214cfe9c8464
----------------------------
"Don't fail for bad GUCs in CREATE FUNCTION with check_function_bodies off. The previous coding attempted to activate all the GUC settings specified in SET clauses, so that the function validator could operate in the GUC environment expected by the function body.  However, this is problematic when restoring a dump, since the SET clauses might refer to database objects that don't exist yet.  We already have the parameter check_function_bodies that's meant to prevent forward references in function definitions from breaking dumps, so let's change CREATE FUNCTION to not install the SET values if check_function_bodies is off. Authors of function validators were already advised not to make any ""context sensitive"" checks when check_function_bodies is off, if indeed they're checking anything at all in that mode.  But extend the documentation to point out the GUC issue in particular. (Note that we still check the SET clauses to some extent; the behavior with !check_function_bodies is now approximately equivalent to what ALTER DATABASE/ROLE have been doing for awhile with context-dependent GUCs.) This problem can be demonstrated in all active branches, so back-patch all the way. "	546f7c2e38531469eb3cff62256fde8606330c67
----------------------------
Account better for planning cost when choosing whether to use custom plans. The previous coding in plancache.c essentially used 10% of the estimated runtime as its cost estimate for planning.  This can be pretty bogus, especially when the estimated runtime is very small, such as in a simple expression plan created by plpgsql, or a simple INSERT ... VALUES. While we don't have a really good handle on how planning time compares to runtime, it seems reasonable to use an estimate based on the number of relations referenced in the query, with a rather large multiplier.  This patch uses 1000 * cpu_operator_cost * (nrelations + 1), so that even a trivial query will be charged 1000 * cpu_operator_cost for planning. This should address the problem reported by Marc Cousin and others that 9.2 and up prefer custom plans in cases where the planning time greatly exceeds what can be saved. 	2aac3399aef47e40d688f3eee3f92b6deea2f974
----------------------------
Fix removal of files in pgstats directories Instead of deleting all files in stats_temp_directory and the permanent directory on a crash, only remove those files that match the pattern of files we actually write in them, to avoid possibly clobbering existing unrelated contents of the temporary directory.  Per complaint from Jeff Janes, and subsequent discussion, starting at message CAMkU=1z9+7RsDODnT4=cDFBRBp8wYQbd_qsLcMtKEf-oFwuOdQ@mail.gmail.com Also, fix a bug in the same routine to avoid removing files from the permanent directory twice (instead of once from that directory and then from the temporary directory), also per report from Jeff Janes, in message CAMkU=1wbk947=-pAosDMX5VC+sQw9W4ttq6RM9rXu=MjNeEQKA@mail.gmail.com 	f9b50b7c18c8ce7de1fee59409fe23c58d438190
----------------------------
Update Emacs configuration Update emacs.samples with new configuration snippets that match pgindent et al. formatting more accurately and follow Emacs Lisp best practices better. Add .dir-locals.el with a subset of that configuration for casual editing and viewing. Reviewed-by: Dimitri Fontaine <dimitri@2ndQuadrant.fr> Reviewed-by: Noah Misch <noah@leadboat.com> 	5e3e8e4daaefba47ad7a8b82320531992470b5df
----------------------------
Emit a log message if output is about to be redirected away from stderr. We've seen multiple cases of people looking at the postmaster's original stderr output to try to diagnose problems, not realizing/remembering that their logging configuration is set up to send log messages somewhere else. This seems particularly likely to happen in prepackaged distributions, since many packagers patch the code to change the factory-standard logging configuration to something more in line with their platform conventions. In hopes of reducing confusion, emit a LOG message about this at the point in startup where we are about to switch log output away from the original stderr, providing a pointer to where to look instead.  This message will appear as the last thing in the original stderr output.  (We might later also try to emit such link messages when logging parameters are changed on-the-fly; but that case seems to be both noticeably harder to do nicely, and much less frequently a problem in practice.) Per discussion, back-patch to 9.3 but not further. 	3d5282c6f0edbdcb78dd2a6e8068f829fcb2882f
----------------------------
pg_dump:  avoid schema qualification for ALTER ... OWNER We already use search_path to specify the schema, so there is no need for pg_dump to schema-qualify the name.  Also remove dead code. 	808f8f5d6da5c79ed10bbe9f721215279a81d1eb
----------------------------
pg_test_fsync: expand ops/sec display Expand ops/sec by two digits to maintain alignment on servers with fast I/O subsystems, e.g. can now display < 10M ops/sec with consistent alignment. 	43f6388931fa71d7c2885fa54804c7cdff7d9f62
----------------------------
Fix configure probe for sys/ucred.h. The configure script's test for <sys/ucred.h> did not work on OpenBSD, because on that platform <sys/param.h> has to be included first. As a result, socket peer authentication was disabled on that platform. Problem introduced in commit be4585b1c27ac5dbdd0d61740d18f7ad9a00e268. Andres Freund, slightly simplified by me. 	1b09630fce1dfd4116eaaf154766a8a435168193
----------------------------
Allow background workers to be started dynamically. There is a new API, RegisterDynamicBackgroundWorker, which allows an ordinary user backend to register a new background writer during normal running.  This means that it's no longer necessary for all background workers to be registered during processing of shared_preload_libraries, although the option of registering workers at that time remains available. When a background worker exits and will not be restarted, the slot previously used by that background worker is automatically released and becomes available for reuse.  Slots used by background workers that are configured for automatic restart can't (yet) be released without shutting down the system. This commit adds a new source file, bgworker.c, and moves some of the existing control logic for background workers there. Previously, there was little enough logic that it made sense to keep everything in postmaster.c, but not any more. This commit also makes the worker_spi contrib module into an extension and adds a new function, worker_spi_launch, which can be used to demonstrate the new facility. 	7f7485a0cde92aa4ba235a1ffe4dda0ca0b6cc9a
----------------------------
Ensure 64bit arithmetic when calculating tapeSpace In tuplesort.c:inittapes(), we calculate tapeSpace by first figuring out how many 'tapes' we can use (maxTapes) and then multiplying the result by the tape buffer overhead for each.  Unfortunately, when we are on a system with an 8-byte long, we allow work_mem to be larger than 2GB and that allows maxTapes to be large enough that the 32bit arithmetic can overflow when multiplied against the buffer overhead. When this overflow happens, we end up adding the overflow to the amount of space available, causing the amount of memory allocated to be larger than work_mem. Note that to reach this point, you have to set work mem to at least 24GB and be sorting a set which is at least that size.  Given that a user who can set work_mem to 24GB could also set it even higher, if they were looking to run the system out of memory, this isn't considered a security issue. This overflow risk was found by the Coverity scanner. Back-patch to all supported branches, as this issue has existed since before 8.4. 	273dcd16282c8014a14a9ecbf467459b8702e745
----------------------------
pg_receivexlog - Exit on failure to parse In streamutil.c:GetConnection(), upgrade failure to parse the connection string to an exit(1) instead of simply returning NULL. Most callers already immediately exited, but pg_receivexlog would loop on this case, continually trying to re-parse the connection string (which can't be changed after pg_receivexlog has started). GetConnection() was already expected to exit(1) in some cases (eg: failure to allocate memory or if unable to determine the integer_datetimes flag), so this change shouldn't surprise anyone. Began looking at this due to the Coverity scanner complaining that we were leaking err_msg in this case- no longer an issue since we just exit(1) immediately. 	d368a301b3a4bf5fec17e81c630adddeac80a7fc
----------------------------
Add session_preload_libraries configuration parameter This is like shared_preload_libraries except that it takes effect at backend start and can be changed without a full postmaster restart.  It is like local_preload_libraries except that it is still only settable by a superuser.  This can be a better way to load modules such as auto_explain. Since there are now three preload parameters, regroup the documentation a bit.  Put all parameters into one section, explain common functionality only once, update the descriptions to reflect current and future realities. Reviewed-by: Dimitri Fontaine <dimitri@2ndQuadrant.fr> 	070518ddab2c94afea119f2b1944c05d16792b07
----------------------------
Fix pg_test_fsync, broken by xloginsert scaling patch. I didn't realize that ALIGNOF_XLOG_BUFFER was used in pg_test_fsync. 	b5ed21998c13f09fd733c87a224e3fe27e41d34d
----------------------------
Expose the estimation of number of changed tuples since last analyze This value, now pg_stat_all_tables.n_mod_since_analyze, was already tracked and used by autovacuum, but not exposed to the user. Mark Kirkwood, review by Laurenz Albe 	c87ff71f374652936a6089215a30998492b14d52
----------------------------
"Use type ""int64"" for memory accounting in tuplesort.c/tuplestore.c. Commit 263865a48973767ce8ed7b7788059a38a24a9f37 switched tuplesort.c and tuplestore.c variables representing memory usage from type ""long"" to type ""Size"".  This was unnecessary; I thought doing so avoided overflow scenarios on 64-bit Windows, but guc.c already limited work_mem so as to prevent the overflow.  It was also incomplete, not touching the logic that assumed a signed data type.  Change the affected variables to ""int64"".  This is perfect for 64-bit platforms, and it reduces the need to contemplate platform-specific overflow scenarios.  It also puts us close to being able to support work_mem over 2 GiB on 64-bit Windows. Per report from Andres Freund. "	79e0f87a15643efa9a94e011da509746dbb96798
----------------------------
Mention extra_float_digits in floating point docs Make it easier for readers of the FP docs to find out about possibly truncated values. Per complaint from Tom Duffey in message F0E0F874-C86F-48D1-AA2A-0C5365BF5118@trillitech.com Author: Albe Laurenz Reviewed by: Abhijit Menon-Sen 	148326b9940c6f3aa554df83a70c7d4563f67d86
----------------------------
Remove undocumented -h (help) option The -h option was not supported by many tools, and not documented, so remove them for consistency from pg_upgrade, pg_test_fsync, and pg_test_timing. 	06b804377cc5628f24ff37de719995a65f6f5928
----------------------------
Retry short writes when flushing WAL. We don't normally bother retrying when the number of bytes written by write() is short of what was requested. It is generally assumed that a write() to disk doesn't return short, unless you run out of disk space. While writing the WAL, however, it seems prudent to try a bit harder, because a failure leads to PANIC. The write() is also much larger than most write()s in the backend (up to wal_buffers), so there's more room for surprises. Also retry on EINTR. All signals used in the backend are flagged SA_RESTART nowadays, so it shouldn't happen, but better to be defensive. 	79ce29c734c6a652b2f7193bda537cff0c8eb8c1
----------------------------
Permit super-MaxAllocSize allocations with MemoryContextAllocHuge(). The MaxAllocSize guard is convenient for most callers, because it reduces the need for careful attention to overflow, data type selection, and the SET_VARSIZE() limit.  A handful of callers are happy to navigate those hazards in exchange for the ability to allocate a larger chunk. Introduce MemoryContextAllocHuge() and repalloc_huge().  Use this in tuplesort.c and tuplestore.c, enabling internal sorts of up to INT_MAX tuples, a factor-of-48 increase.  In particular, B-tree index builds can now benefit from much-larger maintenance_work_mem settings. Reviewed by Stephen Frost, Simon Riggs and Jeff Janes. 	263865a48973767ce8ed7b7788059a38a24a9f37
----------------------------
"Cooperate with the Valgrind instrumentation framework. Valgrind ""client requests"" in aset.c and mcxt.c teach Valgrind and its Memcheck tool about the PostgreSQL allocator.  This makes Valgrind roughly as sensitive to memory errors involving palloc chunks as it is to memory errors involving malloc chunks.  Further client requests in PageAddItem() and printtup() verify that all bits being added to a buffer page or furnished to an output function are predictably-defined. Those tests catch failures of C-language functions to fully initialize the bits of a Datum, which in turn stymie optimizations that rely on _equalConst().  Define the USE_VALGRIND symbol in pg_config_manual.h to enable these additions.  An included ""suppression file"" silences nominal errors we don't plan to fix. Reviewed in earlier versions by Peter Geoghegan and Korry Douglas. "	19085116eeecfde0a3fc1611eaffccc35bcec204
----------------------------
"Renovate display of non-ASCII messages on Windows. GNU gettext selects a default encoding for the messages it emits in a platform-specific manner; it uses the Windows ANSI code page on Windows and follows LC_CTYPE on other platforms.  This is inconvenient for PostgreSQL server processes, so realize consistent cross-platform behavior by calling bind_textdomain_codeset() on Windows each time we permanently change LC_CTYPE.  This primarily affects SQL_ASCII databases and processes like the postmaster that do not attach to a database, making their behavior consistent with PostgreSQL on non-Windows platforms.  Messages from SQL_ASCII databases use the encoding implied by the database LC_CTYPE, and messages from non-database processes use LC_CTYPE from the postmaster system environment.  PlatformEncoding becomes unused, so remove it. Make write_console() prefer WriteConsoleW() to write() regardless of the encodings in use.  In this situation, write() will invariably mishandle non-ASCII characters. elog.c has assumed that messages conform to the database encoding. While usually true, this does not hold for SQL_ASCII and MULE_INTERNAL. Introduce MessageEncoding to track the actual encoding of message text. The present consumers are Windows-specific code for converting messages to UTF16 for use in system interfaces.  This fixes the appearance in Windows event logs and consoles of translated messages from SQL_ASCII processes like the postmaster.  Note that SQL_ASCII inherently disclaims a strong notion of encoding, so non-ASCII byte sequences interpolated into messages by %s may yet yield a nonsensical message.  MULE_INTERNAL has similar problems at present, albeit for a different reason: its lack of libiconv support or a conversion to UTF8. Consequently, one need no longer restart Windows with a different Windows ANSI code page to broadly test backend logging under a given language.  Changing the user's locale (""Format"") is enough.  Several accounts can simultaneously run postmasters under different locales, all correctly logging localized messages to Windows event logs and consoles. Alexander Law and Noah Misch "	5f538ad004aa00cf0881f179f0cde789aad4f47e
----------------------------
Use SA_RESTART for all signals, including SIGALRM. The exclusion of SIGALRM dates back to Berkeley days, when Postgres used SIGALRM in only one very short stretch of code.  Nowadays, allowing it to interrupt kernel calls doesn't seem like a very good idea, since its use for statement_timeout means SIGALRM could occur anyplace in the code, and there are far too many call sites where we aren't prepared to deal with EINTR failures.  When third-party code is taken into consideration, it seems impossible that we ever could be fully EINTR-proof, so better to use SA_RESTART always and deal with the implications of that.  One such implication is that we should not assume pg_usleep() will be terminated early by a signal.  Therefore, long sleeps should probably be replaced by WaitLatch operations where practical. Back-patch to 9.3 so we can get some beta testing on this change. 	873ab97219caabeb2f7b390268a4fe01e2b7518c
----------------------------
"Be consistent about #define'ing configure symbols as ""1"" not empty. This is just neatnik-ism, since all the tests in the code are #ifdefs, but we shouldn't specify symbols as ""Define to 1 ..."" and then not actually define them that way. "	5242fefb471d1fb2d0f35a33bde3570e19acd4b1
----------------------------
Tweak postgres_fdw regression test so autovacuum doesn't change results. Autovacuum occurring while the test runs could allow some of the inserts to go into recycled space, thus changing the output ordering of later queries. While we could complicate those queries to force sorting of their output rows, it doesn't seem like that would make the test better in any meaningful way, and conceivably it could hide unexpected diffs.  Instead, tweak the affected queries so that the inserted rows aren't updated by the following UPDATE.  Per buildfarm. 	e0b451e43250558b3c1ac830e067b39e25e0e348
----------------------------
"Remove fixed limit on the number of concurrent AllocateFile() requests. AllocateFile(), AllocateDir(), and some sister routines share a small array for remembering requests, so that the files can be closed on transaction failure.  Previously that array had a fixed size, MAX_ALLOCATED_DESCS (32). While historically that had seemed sufficient, Steve Toutant pointed out that this meant you couldn't scan more than 32 file_fdw foreign tables in one query, because file_fdw depends on the COPY code which uses AllocateFile().  There are probably other cases, or will be in the future, where this nonconfigurable limit impedes users. We can't completely remove any such limit, at least not without a lot of work, since each such request requires a kernel file descriptor and most platforms limit the number we can have.  (In principle we could ""virtualize"" these descriptors, as fd.c already does for the main VFD pool, but not without an additional layer of overhead and a lot of notational impact on the calling code.)  But we can at least let the array size be configurable.  Hence, change the code to allow up to max_safe_fds/2 allocated file requests.  On modern platforms this should allow several hundred concurrent file_fdw scans, or more if one increases the value of max_files_per_process.  To go much further than that, we'd need to do some more work on the data structure, since the current code for closing requests has potentially O(N^2) runtime; but it should still be all right for request counts in this range. Back-patch to 9.1 where contrib/file_fdw was introduced. "	007556bf08e6153c442fe3742adb3685fca3a0e0
----------------------------
"Provide better message when CREATE EXTENSION can't find a target schema. The new message (and SQLSTATE) matches the corresponding error cases in namespace.c. This was thought to be a ""can't happen"" case when extension.c was written, so we didn't think hard about how to report it.  But it definitely can happen in 9.2 and later, since we no longer require search_path to contain any valid schema names.  It's probably also possible in 9.1 if search_path came from a noninteractive source.  So, back-patch to all releases containing this code. Per report from Sean Chittenden, though this isn't exactly his patch. "	530acda4dabe26a4345eccd28a92dd23b1e7a94a
----------------------------
Add ARM64 (aarch64) support to s_lock.h. Use the same gcc atomic functions as we do on newer ARM chips. (Basically this is a copy and paste of the __arm__ code block, but omitting the SWPB option since that definitely won't work.) Back-patch to 9.2.  The patch would work further back, but we'd also need to update config.guess/config.sub in older branches to make them build out-of-the-box, and there hasn't been demand for it. Mark Salter 	5c7603c318872a42e1665b228f68fdf58714d945
----------------------------
Fix memory leak in LogStandbySnapshot(). The array allocated by GetRunningTransactionLocks() needs to be pfree'd when we're done with it.  Otherwise we leak some memory during each checkpoint, if wal_level = hot_standby.  This manifests as memory bloat in the checkpointer process, or in bgwriter in versions before we made the checkpointer separate. Reported and fixed by Naoya Anzai.  Back-patch to 9.0 where the issue was introduced. In passing, improve comments for GetRunningTransactionLocks(), and add an Assert that we didn't overrun the palloc'd array. 	dbc6eb1f4b840d252031419d4bf694316812124f
----------------------------
"Put back allow_system_table_mods check in heap_create(). This reverts commit a475c6036752c26dca538632b68fd2cc592976b7. Erik Rijkers reported back in January 2013 that after the patch, if you do ""pg_dump -t myschema.mytable"" to dump a single table, and restore that in a database where myschema does not exist, the table is silently created in pg_catalog instead. That is because pg_dump uses ""SET search_path=myschema, pg_catalog"" to set schema the table is created in. While allow_system_table_mods is not a very elegant solution to this, we can't leave it as it is, so for now, revert it back to the way it was previously. "	15386281a62071f322155b74cb32c2fea92e8350
----------------------------
"Allow type_func_name_keywords in some places where they weren't before. This change makes type_func_name_keywords less reserved than they were before, by allowing them for role names, language names, EXPLAIN and COPY options, and SET values for GUCs; which are all places where few if any actual keywords could appear instead, so no new ambiguities are introduced. The main driver for this change is to allow ""COPY ... (FORMAT BINARY)"" to work without quoting the word ""binary"".  That is an inconsistency that has been complained of repeatedly over the years (at least by Pavel Golub, Kurt Lidl, and Simon Riggs); but we hadn't thought of any non-ugly solution until now. Back-patch to 9.0 where the COPY (FORMAT BINARY) syntax was introduced. "	2c92edad48796119c83d7dbe6c33425d1924626d
----------------------------
After fast promotion use CHECKPOINT_FORCE Not necessary for correctness, just to make log_checkpoints output look less singular. Requested by Fujii Masao 	22a27ef113d50cad73097c0be247f06d6527363c
----------------------------
"Fix escaping in generated recovery.conf file. In the primary_conninfo line that ""pg_basebackup -R"" generates, single quotes in parameter values need to be escaped into \\'; the libpq parser requires the quotes to be escaped into \', and recovery.conf parser requires the \ to be escaped into \\. Also, don't quote parameter values unnecessarily, to make the connection string prettier. Most options in a libpq connection string don't need quoting. Reported by Hari Babu, closer analysis by Zoltan Boszormenyi, although I didn't use his patch. "	30b5ede7157e34e77c7914b8ecfd55aa8da6edc3
----------------------------
9.3 release notes:  update from Amit Kapila No need to mention wal_receiver_status_interval. 	c750aa90f2cd411bea9ee3844bb41ff50a0eb436
----------------------------
Revert idea of zer-padding padding session id in log_line_prefix Removal of doc adjustment and release note mention as well. 	8b06e6aba8773df8040b357a1cb058879ed2d94f
----------------------------
docs:  Improve log_line_prefix session_id query 	083d8fa79dbd693f48c1c195bf4f2af3d1e7dc67
----------------------------
docs:  log_line_prefix session id fix Restore 4-byte designation for docs.  Fix 9.3 doc query to properly pad to four digits. Backpatch to all active branches Per suggestions from Ian Lawrence Barwick 	f87f214b7c09e20d954fae887809c41cc5ca68df
----------------------------
docs:  fix log_line_prefix session id docs Backpatch to 9.2. Report from Ian Lawrence Barwick 	262a3629971bdf61c309843b385a58d97bf4badb
----------------------------
pg_test_fsync: update output to show usecs/op clearer 	095018bc32b70eff95bdf3c2959e6eef09dcfa6a
----------------------------
Ensure ANALYZE phase is not skipped because of canceled truncate. Patch b19e4250b45e91c9cbdd18d35ea6391ab5961c8d attempted to preserve existing behavior regarding statistics generation in the case that a truncation attempt was canceled due to lock conflicts. It failed to do this accurately in two regards: (1) autovacuum had previously generated statistics if the truncate attempt failed to initially get the lock rather than having started the attempt, and (2) the VACUUM ANALYZE command had always generated statistics. Both of these changes were unintended, and are reverted by this patch.  On review, there seems to be consensus that the previous failure to generate statistics when the truncate was terminated was more an unfortunate consequence of how that effort was previously terminated than a feature we want to keep; so this patch generates statistics even when an autovacuum truncation attempt terminates early.  Another unintended change which is kept on the basis that it is an improvement is that when a VACUUM command is truncating, it will the new heuristic for avoiding blocking other processes, rather than keeping an AccessExclusiveLock on the table for however long the truncation takes. Per multiple reports, with some renaming per patch by Jeff Janes. Backpatch to 9.0, where problem was created. 	5fc893760f60d57aca30163796db1abe516b3fac
----------------------------
Update config.guess and config.sub 	b53b603c919dd37444da0f15e8867c707ce1a03a
----------------------------
9.3 release note fixes Move commit_delay, fix Zoltan's name, and adjust range type histogram text. 	ac96e6a8c2c5477344e78840e689e39e7b7b3cf1
----------------------------
Fix longstanding race condition in plancache.c. When creating or manipulating a cached plan for a transaction control command (particularly ROLLBACK), we must not perform any catalog accesses, since we might be in an aborted transaction.  However, plancache.c busily saved or examined the search_path for every cached plan.  If we were unlucky enough to do this at a moment where the path's expansion into schema OIDs wasn't already cached, we'd do some catalog accesses; and with some more bad luck such as an ill-timed signal arrival, that could lead to crashes or Assert failures, as exhibited in bug #8095 from Nachiket Vaidya. Fortunately, there's no real need to consider the search path for such commands, so we can just skip the relevant steps when the subject statement is a TransactionStmt.  This is somewhat related to bug #5269, though the failure happens during initial cached-plan creation rather than revalidation. This bug has been there since the plan cache was invented, so back-patch to all supported branches. 	ac63dca607e8e22247defbc8fe03b6baa3628c42
----------------------------
Fix sporadic rebuilds for .pc files The build of .pc (pkg-config) files depends on all makefiles in use, and in dependency tracking mode, the previous coding ended up including /dev/null as a makefile.  Apparently, on some platforms the modification time of /dev/null changes sporadically, and so the .pc files would end up being rebuilt every so often.  Fix that by changing the makefile code to do without using /dev/null. 	ba66752d278818b6b8797aec2e36cccf727db055
----------------------------
Make worker_spi sample code more complete Make use of some GUC variables, and add SIGHUP handling to reload the config file.  Patch submitted by Guillaume Lelarge. Also, report to pg_stat_activity.  Per report from Marc Cousin, add setting of statement start time. 	e543631f3c162ab5f6020b1d0209e0353ca2229a
----------------------------
Fix calculation of how many segments to retain for wal_keep_segments. KeepLogSeg function was broken when we switched to use a 64-bit int for the segment number. Per report from Jeff Janes. 	594041311c8263832258d35632aa3eebf9371fd1
----------------------------
Avoid updating our PgBackendStatus entry when track_activities is off. The point of turning off track_activities is to avoid this reporting overhead, but a thinko in commit 4f42b546fd87a80be30c53a0f2c897acb826ad52 caused pgstat_report_activity() to perform half of its updates anyway. Fix that, and also make sure that we clear all the now-disabled fields when transitioning to the non-reporting state. 	f7b0006f42913b6d641c9f0bef6fad1f670b9194
----------------------------
"Fix insecure parsing of server command-line switches. An oversight in commit e710b65c1c56ca7b91f662c63d37ff2e72862a94 allowed database names beginning with ""-"" to be treated as though they were secure command-line switches; and this switch processing occurs before client authentication, so that even an unprivileged remote attacker could exploit the bug, needing only connectivity to the postmaster's port.  Assorted exploits for this are possible, some requiring a valid database login, some not.  The worst known problem is that the ""-r"" switch can be invoked to redirect the process's stderr output, so that subsequent error messages will be appended to any file the server can write.  This can for example be used to corrupt the server's configuration files, so that it will fail when next restarted.  Complete destruction of database tables is also possible. Fix by keeping the database name extracted from a startup packet fully separate from command-line switches, as had already been done with the user name field. The Postgres project thanks Mitsumasa Kondo for discovering this bug, Kyotaro Horiguchi for drafting the fix, and Noah Misch for recognizing the full extent of the danger. Security: CVE-2013-1899 "	17fe2793ea7fe269ed616cb305150b6cf38dbaa8
----------------------------
Make REPLICATION privilege checks test current user not authenticated user. The pg_start_backup() and pg_stop_backup() functions checked the privileges of the initially-authenticated user rather than the current user, which is wrong.  For example, a user-defined index function could successfully call these functions when executed by ANALYZE within autovacuum.  This could allow an attacker with valid but low-privilege database access to interfere with creation of routine backups.  Reported and fixed by Noah Misch. Security: CVE-2013-1901 	ce9ab88981495d975aade8fc664f99f68fc18e2b
----------------------------
Add pkg-config files for libpq and ecpg libraries This will hopefully be easier to use than pg_config for users who are already used to the pkg-config interface.  It also works better for multi-arch installations. reviewed by Tom Lane 	64f890905f3a5186bc4df980c8becfda5c39c2ea
----------------------------
"Fix buffer pin leak in heap update redo routine. In a heap update, if the old and new tuple were on different pages, and the new page no longer existed (because it was subsequently truncated away by vacuum), heap_xlog_update forgot to release the pin on the old buffer. This bug was introduced by the ""Fix multiple problems in WAL replay"" patch, commit 3bbf668de9f1bc172371681e80a4e769b6d014c8 (on master branch). With full_page_writes=off, this triggered an ""incorrect local pin count"" error later in replay, if the old page was vacuumed. This fixes bug #7969, reported by Yunong Xiao. Backpatch to 9.0, like the commit that introduced this bug. "	3cfb572dde2095df1bfc6665862dcf8ee0a95b99
----------------------------
Set recovery_config_directory for EXEC_BACKEND. Remove comment questioning whether this is necessary for DataDir. From buildfarm failures on Windows. 	7a5a59d378e052618d6feae64d1d2b4f2ad6f9bc
----------------------------
Allow external recovery_config_directory If required, recovery.conf can now be located outside of the data directory. Server needs read/write permissions on this directory. 	bc5334d8679c428a709d150666b288171795bd76
----------------------------
Fix contrib/dblink to handle inconsistent DateStyle/IntervalStyle safely. If the remote database's settings of these GUCs are different from ours, ambiguous datetime values may be read incorrectly.  To fix, temporarily adopt the remote server's settings while we ingest a query result. This is not a complete fix, since it doesn't do anything about ambiguous values in commands sent to the remote server; but there seems little we can do about that end of it given dblink's entirely textual API for transmitted commands. Back-patch to 9.2.  The hazard exists in all versions, but this patch would need more work to apply before 9.2.  Given the lack of field complaints about this issue, it doesn't seem worth the effort at present. Daniel Farina and Tom Lane 	8a3b6772aedbd95557ab1fc489ddf007ac9d405d
----------------------------
Update commit_delay documentation. Commit 13fe298ca06f5390df5edf073cf401f9f0b67458 changed this GUC to be PGC_SUSET, but neglected to update the documentation to match. While at it, edit and rearrange the text a little for clarity. 	82b945c0979350c87ddc52adefe9f0a36dd5b4c8
----------------------------
Change commit_delay to be SUSET for 9.3+ Prior to 9.3 the commit_delay affected only the current user, whereas now only the group leader waits while holding the WALWriteLock. Deliberate or accidental settings to a poor value could seriously degrade performance for all users. Privileges may be delegated by SECURITY DEFINER functions for anyone that needs per-user settings in real situations. Request for change from Peter Geoghegan 	13fe298ca06f5390df5edf073cf401f9f0b67458
----------------------------
Use pqsignal() in contrib programs rather than calling signal(2) directly. The semantics of signal(2) are more variable than one could wish; in particular, on strict-POSIX platforms the signal handler will be reset to SIG_DFL when the signal is delivered.  This demonstrably breaks pg_test_fsync's use of SIGALRM.  The other changes I made are not absolutely necessary today, because the called handlers all exit the program anyway.  But it seems like a good general practice to use pqsignal() exclusively in Postgres code, now that we have it available everywhere. 	3c07fbf40bd0276e4be02fc72cba6b1cd62da301
----------------------------
Move pqsignal() to libpgport. We had two copies of this function in the backend and libpq, which was already pretty bogus, but it turns out that we need it in some other programs that don't use libpq (such as pg_test_fsync).  So put it where it probably should have been all along.  The signal-mask-initialization support in src/backend/libpq/pqsignal.c stays where it is, though, since we only need that in the backend. 	da5aeccf64b37a8e9bd3cb605848590595dbcbf8
----------------------------
Add lock_timeout configuration parameter. This GUC allows limiting the time spent waiting to acquire any one heavyweight lock. In support of this, improve the recently-added timeout infrastructure to permit efficiently enabling or disabling multiple timeouts at once. That reduces the performance hit from turning on lock_timeout, though it's still not zero. Zoltán Böszörményi, reviewed by Tom Lane, Stephen Frost, and Hari Babu 	d43837d03067487560af481474ae985df894f786
----------------------------
Improve the documentation about commit_delay. Clarify the docs explaining what commit_delay does, and add a recommendation about a useful value for it, namely half of the single-page fsync time reported by pg_test_fsync.  This is informed by testing of the new-in-9.3 implementation of commit_delay; in prior versions it was far harder to arrive at a useful setting. In passing, do some wordsmithing and markup-fixing in the same general area. Also, change pg_test_fsync's default time-per-test from 2 seconds to 5. The old value was about the minimum at which the results could be taken seriously at all, and so seems a tad optimistic as a default. Peter Geoghegan, reviewed by Noah Misch; some additional editing by me 	70ec2f8f4392f4e3d379c2c759789d631ffeec10
----------------------------
doc: Add note about checkpoint_warning vs checkpoint_timeout suggested by Tianyin Xu 	dd28c410f77e415ce104cb42bf52c4a5457085da
----------------------------
Band-aid for regression test expected-results problem with timestamptz. We probably need to tell the remote server to use specific timezone and datestyle settings, and maybe other things.  But for now let's just hack the postgres_fdw regression test to not provoke failures when run in non-EST5EDT environments.  Per buildfarm. 	f7951eef89be78c50ea2241f593d76dfefe176c9
----------------------------
Get rid of any toast table when converting a table to a view. Also make sure other fields of the view's pg_class entry are appropriate for a view; it shouldn't have relfrozenxid set for instance. This ancient omission isn't believed to have any serious consequences in versions 8.4-9.2, so no backpatch.  But let's fix it before it does bite us in some serious way.  It's just luck that the case doesn't cause problems for autovacuum.  (It did cause problems in 8.3, but that's out of support.) Andres Freund 	b15a6da29217b14f02895af1d9271e84415a91ae
----------------------------
Split pgstat file in smaller pieces We now write one file per database and one global file, instead of having the whole thing in a single huge file.  This reduces the I/O that must be done when partial data is required -- which is all the time, because each process only needs information on its own database anyway. Also, the autovacuum launcher does not need data about tables and functions in each database; having the global stats for all DBs is enough. Catalog version bumped because we have a new subdir under PGDATA. Author: Tomas Vondra.  Some rework by Álvaro Testing by Jeff Janes Other discussion by Heikki Linnakangas, Tom Lane. 	187492b6c2e8cafc5b39063ca3b67846e8155d24
----------------------------
Add ALTER ROLE ALL SET command This generalizes the existing ALTER ROLE ... SET and ALTER DATABASE ... SET functionality to allow creating settings that apply to all users in all databases. reviewed by Pavel Stehule 	9475db3a4eb5876b364254886d2730db01e042fd
----------------------------
Further cleanup of gistsplit.c. After further reflection I was unconvinced that the existing coding is guaranteed to return valid union datums in every code path for multi-column indexes.  Fix that by forcing a gistunionsubkey() call at the end of the recursion.  Having done that, we can remove some clearly-redundant calls elsewhere.  This should be a little faster for multi-column indexes (since the previous coding would uselessly do such a call for each column while unwinding the recursion), as well as much harder to break. Also, simplify the handling of cases where one side or the other of a primary split contains only don't-care tuples.  The previous coding used a very ugly hack in removeDontCares() that essentially forced one random tuple to be treated as non-don't-care, providing a random initial choice of seed datum for the secondary split.  It seems unlikely that that method will give better-than-random splits.  Instead, treat such a split as degenerate and just let the next column determine the split, the same way that we handle fully degenerate cases where the two sides produce identical union datums. 	c352ea2d74c4e317bf2a1471ec1f750f9f072276
----------------------------
doc: Fix mistakes in the most recent set of release notes. Improve description of the vacuum_freeze_table_age bug (it's much more serious than we realized at the time the fix was committed), and correct attribution of pg_upgrade -O/-o fix (Marti Raudsepp contributed that, but Bruce forgot to credit him in the commit log). No need to back-patch right now, it'll happen when the next set of release notes are prepared. 	335c5e9206b40c2fac3945db2499a57b948cc996
----------------------------
Reset vacuum_defer_cleanup_age to PGC_SIGHUP. Revert commit 84725aa5efe11688633b553e58113efce4181f2e 	f480e294498533820f3ef3e6de4dcb8ff5401140
----------------------------
Reset master xmin when hot_standby_feedback disabled. If walsender has xmin of standby then ensure we reset the value to 0 when we change from hot_standby_feedback=on to hot_standby_feedback=off. 	bd56e74127dea4102d1fc761d65fefbb32146713
----------------------------
Mark vacuum_defer_cleanup_age as PGC_POSTMASTER. Following bug analysis of #7819 by Tom Lane 	84725aa5efe11688633b553e58113efce4181f2e
----------------------------
doc:  revert 80c20fcf3df17309b3c131962045825f42e45bc7 and 0e93959a70ac6e7c7858d1d6fb00645e7540a1cc Revert patch that modified doc index mentions of search_path Per Peter E. 	7c83619b50c8f8a6d75105636e3ca63a9d2eb7a9
----------------------------
doc: mention commit_delay is only honored if fsync is enabled per Tianyin Xu 	bb1e504951bbdb1931365b1c6d1b4e5f3a3043d1
----------------------------
"Change plan caching to honor, not resist, changes in search_path. In the initial implementation of plan caching, we saved the active search_path when a plan was first cached, then reinstalled that path anytime we needed to reparse or replan.  The idea of that was to try to reselect the same referenced objects, in somewhat the same way that views continue to refer to the same objects in the face of schema or name changes.  Of course, that analogy doesn't bear close inspection, since holding the search_path fixed doesn't cope with object drops or renames. Moreover sticking with the old path seems to create more surprises than it avoids.  So instead of doing that, consider that the cached plan depends on search_path, and force reparse/replan if the active search_path is different than it was when we last saved the plan. This gets us fairly close to having ""transparency"" of plan caching, in the sense that the cached statement acts the same as if you'd just resubmitted the original query text for another execution.  There are still some corner cases where this fails though: a new object added in the search path schema(s) might capture a reference in the query text, but we'd not realize that and force a reparse.  We might try to fix that in the future, but for the moment it looks too expensive and complicated. "	0d5fbdc157a17abc379052f5099b1c29a33cebe2
----------------------------
doc:  adjust search_path secondary index mention per Tom Lane 	0e93959a70ac6e7c7858d1d6fb00645e7540a1cc
----------------------------
doc:  split search_path index entries into separate secondaries Karl O. Pinc 	80c20fcf3df17309b3c131962045825f42e45bc7
----------------------------
Fix more issues with cascading replication and timeline switches. When a standby server follows the master using WAL archive, and it chooses a new timeline (recovery_target_timeline='latest'), it only fetches the timeline history file for the chosen target timeline, not any other history files that might be missing from pg_xlog. For example, if the current timeline is 2, and we choose 4 as the new recovery target timeline, the history file for timeline 3 is not fetched, even if it's part of this server's history. That's enough for the standby itself - the history file for timeline 4 includes timeline 3 as well - but if a cascading standby server wants to recover to timeline 3, it needs the history file. To fix, when a new recovery target timeline is chosen, try to copy any missing history files from the archive to pg_xlog between the old and new target timeline. A second similar issue was with the WAL files. When a standby recovers from archive, and it reaches a segment that contains a switch to a new timeline, recovery fetches only the WAL file labelled with the new timeline's ID. The file from the new timeline contains a copy of the WAL from the old timeline up to the point where the switch happened, and recovery recovers it from the new file. But in streaming replication, walsender only tries to read it from the old timeline's file. To fix, change walsender to read it from the new file, so that it behaves the same as recovery in that sense, and doesn't try to open the possibly nonexistent file with the old timeline's ID. 	990fe3c4edfdabf4f56aa9a403a11f53006d0dd7
----------------------------
pg_upgrade:  remove --single-transaction usage With AtEOXact applied, --single-transaction makes pg_restore slower, and has the potential to require lock table configuration, so remove the argument. Per suggestion from Tom. 	861ad67bd9546a8328ea31d0141406db16f4c57c
----------------------------
Fix error-checking typo in check_TSCurrentConfig(). The code failed to detect an out-of-memory failure. Xi Wang 	535e69a43f14673557d281b112859e7a25cc7939
----------------------------
Modernize string literal syntax in tutorial example. Un-double the backslashes in the LIKE patterns, since standard_conforming_strings is now the default.  Just to be sure, include a command to set standard_conforming_strings to ON in the example. Back-patch to 9.1, where standard_conforming_strings became the default. Josh Kupershmidt, reviewed by Jeff Janes 	4b94cfb5647c97a80368346ee0a17f40d301cb63
----------------------------
Improve memory space management in tuplesort and tuplestore. The code originally just doubled the size of the tuple-pointer array so long as that would fit in allowedMem.  This could result in failing to use as much as half of allowedMem, if (as is typical) the last doubling attempt didn't quite fit.  Worse, we might double the array size but be unable to use most of the added slots, because there was no room left within the allowedMem limit for tuples the slots should point to.  To fix, double only so long as we've used less than half of allowedMem in total.  Then do one more array enlargement, but scale it based on total memory consumption so far.  This will work nicely as long as the average tuple size is reasonably stable, and in any case should be better than the old method. This change will result in large sort operations consuming a larger fraction of work_mem than they typically did in the past.  The release notes should mention that users may want to revisit their work_mem settings, if they'd tuned those settings based on the old behavior of sorting. Jeff Janes, reviewed by Peter Geoghegan and Robert Haas 	8ae35e91807508872cabd3b0e8db35fc78e194ac
----------------------------
"Improve handling of ereport(ERROR) and elog(ERROR). In commit 71450d7fd6c7cf7b3e38ac56e363bff6a681973c, we added code to inform suitably-intelligent compilers that ereport() doesn't return if the elevel is ERROR or higher.  This patch extends that to elog(), and also fixes a double-evaluation hazard that the previous commit created in ereport(), as well as reducing the emitted code size. The elog() improvement requires the compiler to support __VA_ARGS__, which should be available in just about anything nowadays since it's required by C99.  But our minimum language baseline is still C89, so add a configure test for that. The previous commit assumed that ereport's elevel could be evaluated twice, which isn't terribly safe --- there are already counterexamples in xlog.c. On compilers that have __builtin_constant_p, we can use that to protect the second test, since there's no possible optimization gain if the compiler doesn't know the value of elevel.  Otherwise, use a local variable inside the macros to prevent double evaluation.  The local-variable solution is inferior because (a) it leads to useless code being emitted when elevel isn't constant, and (b) it increases the optimization level needed for the compiler to recognize that subsequent code is unreachable.  But it seems better than not teaching non-gcc compilers about unreachability at all. Lastly, if the compiler has __builtin_unreachable(), we can use that instead of abort(), resulting in a noticeable code savings since no function call is actually emitted.  However, it seems wise to do this only in non-assert builds.  In an assert build, continue to use abort(), so that the behavior will be predictable and debuggable if the ""impossible"" happens. These changes involve making the ereport and elog macros emit do-while statement blocks not just expressions, which forces small changes in a few call sites. Andres Freund, Tom Lane, Heikki Linnakangas "	b853eb97182079dcd30b4f52576bd5d6c275ee71
----------------------------
Redesign the planner's handling of index-descent cost estimation. Historically we've used a couple of very ad-hoc fudge factors to try to get the right results when indexes of different sizes would satisfy a query with the same number of index leaf tuples being visited.  In commit 21a39de5809cd3050a37d2554323cc1d0cbeed9d I tweaked one of these fudge factors, with results that proved disastrous for larger indexes. Commit bf01e34b556ff37982ba2d882db424aa484c0d07 fudged it some more, but still with not a lot of principle behind it. What seems like a better way to address these issues is to explicitly model index-descent costs, since that's what's really at stake when considering diferent indexes with similar leaf-page-level costs.  We tried that once long ago, and found that charging random_page_cost per page descended through was way too much, because upper btree levels tend to stay in cache in real-world workloads.  However, there's still CPU costs to think about, and the previous fudge factors can be seen as a crude attempt to account for those costs.  So this patch replaces those fudge factors with explicit charges for the number of tuple comparisons needed to descend the index tree, plus a small charge per page touched in the descent.  The cost multipliers are chosen so that the resulting charges are in the vicinity of the historical (pre-9.2) fudge factors for indexes of up to about a million tuples, while not ballooning unreasonably beyond that, as the old fudge factor did (even more so in 9.2). To make this work accurately for btree indexes, add some code that allows extraction of the known root-page height from a btree.  There's no equivalent number readily available for other index types, but we can use the log of the number of index pages as an approximate substitute. This seems like too much of a behavioral change to risk back-patching, but it should improve matters going forward.  In 9.2 I'll just revert the fudge-factor change. 	31f38f28b00cbe2b9267205359e3cf7bafa1cb97
----------------------------
Last-gasp attempt to save libperl.so configure probe. I notice that plperl's makefile adds the -I for $perl_archlibexp/CORE at the end of CPPFLAGS not the beginning.  It seems somewhat unlikely that the include search order has anything to do with why buildfarm member okapi is failing, but I'm about out of other ideas. 	e1b735ae35f225927c95746babafaa84e39c3325
----------------------------
Add explicit configure-time checks for perl.h and libperl.so. Although most platforms seem to package Perl in such a way that these files are present even in basic Perl installations, Debian does not.  Hence, make an effort to fail during configure rather than build if --with-perl was given and these files are lacking.  Per gripe from Josh Berkus. 	1f3ed51f8e197e9bbf18737a1aa1148ed730f7d8
----------------------------
Detect Windows perl linkage parameters in configure script. This means we can now construct a configure test for the library presence. Previously these parameters were only figured out at build time in plperl's GnuMakefile. 	7fb97ecd137a879831ec6e3dce14c9f2e2a3d6b5
----------------------------
PL/Python: Make build on OS X more flexible The PL/Python build on OS X was previously hardcoded to use the system installation of Python, ignoring whatever was specified to configure. Except that it would use the header files from configure, which could lead to mismatches.  It was not possible to build against a custom Python installation. Now, we check in configure how the specified Python installation was built and use that, supporting framework and non-framework builds. 	fc8745070a53469a43ecbf999dc5692a36a649cc
----------------------------
Prevent creation of postmaster's TCP socket during pg_upgrade testing. On non-Windows machines, we use the Unix socket for connections to test postmasters, so there is no need to create a TCP socket.  Furthermore, doing so causes failures due to port conflicts if two builds are carried out concurrently on one machine.  (If the builds are done in different chroots, which is standard practice at least in Red Hat distros, there is no risk of conflict on the Unix socket.)  Suppressing the TCP socket by setting listen_addresses to empty has long been standard practice for pg_regress, and pg_upgrade knows about this too ... but pg_upgrade's test.sh didn't get the memo. Back-patch to 9.2, and also sync the 9.2 version of the script with HEAD as much as practical. 	78a5e738e97b4dda89e1bfea60675bcf15f25994
----------------------------
Fix background workers for EXEC_BACKEND Commit da07a1e8 was broken for EXEC_BACKEND because I failed to realize that the MaxBackends recomputation needed to be duplicated by subprocesses in SubPostmasterMain.  However, instead of having the value be recomputed at all, it's better to assign the correct value at postmaster initialization time, and have it be propagated to exec'ed backends via BackendParameters. MaxBackends stays as zero until after modules in shared_preload_libraries have had a chance to register bgworkers, since the value is going to be untrustworthy till that's finished. Heikki Linnakangas and Álvaro Herrera 	cdbc0ca48ca96e5c787b1605ed2d6cf7407a5acf
----------------------------
Fix pg_extension_config_dump() to handle update cases more sanely. If pg_extension_config_dump() is executed again for a table already listed in the extension's extconfig, the code was blindly making a new array entry. This does not seem useful.  Fix it to replace the existing array entry instead, so that it's possible for extension update scripts to alter the filter conditions for configuration tables. In addition, teach ALTER EXTENSION DROP TABLE to check for an extconfig entry for the target table, and remove it if present.  This is not a 100% solution because it's allowed for an extension update script to just summarily DROP a member table, and that code path doesn't go through ExecAlterExtensionContentsStmt.  We could probably make that case clean things up if we had to, but it would involve sticking a very ugly wart somewhere in the guts of dependency.c.  Since on the whole it seems quite unlikely that extension updates would want to remove pre-existing configuration tables, making the case possible with an explicit command seems sufficient. Per bug #7756 from Regina Obe.  Back-patch to 9.1 where extensions were introduced. 	343c2a865bc6c0a03358709df854ce1eac52ca45
----------------------------
Ignore libedit/libreadline while probing for standard functions. Some versions of libedit expose bogus definitions of setproctitle(), optreset, and perhaps other symbols that we don't want configure to pick up on.  There was a previous report of similar problems with strlcpy(), which we addressed in commit 59cf88da91bc88978b05275ebd94ac2d980c4047, but the problem has evidently grown in scope since then.  In hopes of not having to deal with it again in future, rearrange configure's tests for supplied functions so that we ignore libedit/libreadline except when probing specifically for functions we expect them to provide. Per report from Christoph Berg, though this is slightly more aggressive than his proposed patch. 	2666a6d0b934b19d4a691b93a64c7d3208acad43
----------------------------
doc: Improve search_path mentions in index Karl O. Pinc 	a301eb99c9537186f7dd46ba418e84d755227a94
----------------------------
Allow a streaming replication standby to follow a timeline switch. Before this patch, streaming replication would refuse to start replicating if the timeline in the primary doesn't exactly match the standby. The situation where it doesn't match is when you have a master, and two standbys, and you promote one of the standbys to become new master. Promoting bumps up the timeline ID, and after that bump, the other standby would refuse to continue. There's significantly more timeline related logic in streaming replication now. First of all, when a standby connects to primary, it will ask the primary for any timeline history files that are missing from the standby. The missing files are sent using a new replication command TIMELINE_HISTORY, and stored in standby's pg_xlog directory. Using the timeline history files, the standby can follow the latest timeline present in the primary (recovery_target_timeline='latest'), just as it can follow new timelines appearing in an archive directory. START_REPLICATION now takes a TIMELINE parameter, to specify exactly which timeline to stream WAL from. This allows the standby to request the primary to send over WAL that precedes the promotion. The replication protocol is changed slightly (in a backwards-compatible way although there's little hope of streaming replication working across major versions anyway), to allow replication to stop when the end of timeline reached, putting the walsender back into accepting a replication command. Many thanks to Amit Kapila for testing and reviewing various versions of this patch. 	abfd192b1b5ba5216ac4b1f31dcd553106304b19
----------------------------
Add defenses against integer overflow in dynahash numbuckets calculations. The dynahash code requires the number of buckets in a hash table to fit in an int; but since we calculate the desired hash table size dynamically, there are various scenarios where we might calculate too large a value. The resulting overflow can lead to infinite loops, division-by-zero crashes, etc.  I (tgl) had previously installed some defenses against that in commit 299d1716525c659f0e02840e31fbe4dea3, but that covered only one call path.  Moreover it worked by limiting the request size to work_mem, but in a 64-bit machine it's possible to set work_mem high enough that the problem appears anyway.  So let's fix the problem at the root by installing limits in the dynahash.c functions themselves. Trouble report and patch by Jeff Davis. 	691c5ebf79bb011648fad0e6b234b94a28177e3c
----------------------------
Fix performance problems with autovacuum truncation in busy workloads. In situations where there are over 8MB of empty pages at the end of a table, the truncation work for trailing empty pages takes longer than deadlock_timeout, and there is frequent access to the table by processes other than autovacuum, there was a problem with the autovacuum worker process being canceled by the deadlock checking code. The truncation work done by autovacuum up that point was lost, and the attempt tried again by a later autovacuum worker. The attempts could continue indefinitely without making progress, consuming resources and blocking other processes for up to deadlock_timeout each time. This patch has the autovacuum worker checking whether it is blocking any other thread at 20ms intervals. If such a condition develops, the autovacuum worker will persist the work it has done so far, release its lock on the table, and sleep in 50ms intervals for up to 5 seconds, hoping to be able to re-acquire the lock and try again. If it is unable to get the lock in that time, it moves on and a worker will try to continue later from the point this one left off. While this patch doesn't change the rules about when and what to truncate, it does cause the truncation to occur sooner, with less blocking, and with the consumption of fewer resources when there is contention for the table's lock. The only user-visible change other than improved performance is that the table size during truncation may change incrementally instead of just once. This problem exists in all supported versions but is infrequently reported, although some reports of performance problems when autovacuum runs might be caused by this. Initial commit is just the master branch, but this should probably be backpatched once the build farm and general developer usage confirm that there are no surprising effects. Jan Wieck 	b19e4250b45e91c9cbdd18d35ea6391ab5961c8d
----------------------------
Fix pg_upgrade -O/-o options Fix previous commit that added synchronous_commit=off, but broke -O/-o due to missing space in argument passing. Backpatch to 9.2. 	acdb8c225955bbf582bb050e6217f79493f031eb
----------------------------
Background worker processes Background workers are postmaster subprocesses that run arbitrary user-specified code.  They can request shared memory access as well as backend database connections; or they can just use plain libpq frontend database connections. Modules listed in shared_preload_libraries can register background workers in their _PG_init() function; this is early enough that it's not necessary to provide an extra GUC option, because the necessary extra resources can be allocated early on.  Modules can install more than one bgworker, if necessary. Care is taken that these extra processes do not interfere with other postmaster tasks: only one such process is started on each ServerLoop iteration.  This means a large number of them could be waiting to be started up and postmaster is still able to quickly service external connection requests.  Also, shutdown sequence should not be impacted by a worker process that's reasonably well behaved (i.e. promptly responds to termination signals.) The current implementation lets worker processes specify their start time, i.e. at what point in the server startup process they are to be started: right after postmaster start (in which case they mustn't ask for shared memory access), when consistent state has been reached (useful during recovery in a HOT standby server), or when recovery has terminated (i.e. when normal backends are allowed). In case of a bgworker crash, actions to take depend on registration data: if shared memory was requested, then all other connections are taken down (as well as other bgworkers), just like it were a regular backend crashing.  The bgworker itself is restarted, too, within a configurable timeframe (which can be configured to be never). More features to add to this framework can be imagined without much effort, and have been discussed, but this seems good enough as a useful unit already. An elementary sample module is supplied. Author: Álvaro Herrera This patch is loosely based on prior patches submitted by KaiGai Kohei, and unsubmitted code by Simon Riggs. Reviewed by: KaiGai Kohei, Markus Wanner, Andres Freund, Heikki Linnakangas, Simon Riggs, Amit Kapila 	da07a1e856511dca59cbb1357616e26baa64428e
----------------------------
Add initdb --sync-only option to sync the data directory to durable storage. Have pg_upgrade use it, and enable server options fsync=off and full_page_writes=off. Document that users turning fsync from off to on should run initdb --sync-only. [ Previous commit was incorrectly applied as a git merge. ] 	630cd14426dc1daf85163ad417f3a224eb4ac7b0
----------------------------
Don't advance checkPoint.nextXid near the end of a checkpoint sequence. This reverts commit c11130690d6dca64267201a169cfb38c1adec5ef in favor of actually fixing the problem: namely, that we should never have been modifying the checkpoint record's nextXid at this point to begin with. The nextXid should match the state as of the checkpoint's logical WAL position (ie the redo point), not the state as of its physical position. It's especially bogus to advance it in some wal_levels and not others. In any case there is no need for the checkpoint record to carry the same nextXid shown in the XLOG_RUNNING_XACTS record just emitted by LogStandbySnapshot, as any replay operation will already have adopted that value as current. This fixes bug #7710 from Tarvi Pillessaar, and probably also explains bug #6291 from Daniel Farina, in that if a checkpoint were in progress at the instant of XID wraparound, the epoch bump would be lost as reported. (And, of course, these days there's at least a 50-50 chance of a checkpoint being in progress at any given instant.) Diagnosed by me and independently by Andres Freund.  Back-patch to all branches supporting hot standby. 	3114cb60a1a3f482724adaed4ca17572c5e6bde7
----------------------------
XidEpoch++ if wraparound during checkpoint. If wal_level = hot_standby we update the checkpoint nextxid, though in the case where a wraparound occurred half-way through a checkpoint we would neglect updating the epoch also. Updating the nextxid is arguably the wrong thing to do, but changing that may introduce subtle bugs into hot standby startup, while updating the value doesn't cause any known bugs yet. Minimal fix now to HEAD and backbranches, wider fix later in HEAD. Bug reported in #6291 by Daniel Farina and slightly differently in Cause analysis and recommended fixes from Tom Lane and Andres Freund. Applied patch is minimal version of Andres Freund's work. 	c11130690d6dca64267201a169cfb38c1adec5ef
----------------------------
Don't launch new child processes after we've been told to shut down. Once we've received a shutdown signal (SIGINT or SIGTERM), we should not launch any more child processes, even if we get signals requesting such. The normal code path for spawning backends has always understood that, but the postmaster's infrastructure for hot standby and autovacuum didn't get the memo.  As reported by Hari Babu in bug #7643, this could lead to failure to shut down at all in some cases, such as when SIGINT is received just before the startup process sends PMSIGNAL_RECOVERY_STARTED: we'd launch a bgwriter and checkpointer, and then those processes would have no idea that they ought to quit.  Similarly, launching a new autovacuum worker would result in waiting till it finished before shutting down. Also, switch the order of the code blocks in reaper() that detect startup process crash versus shutdown termination.  Once we've sent it a signal, we should not consider that exit(1) is surprising.  This is just a cosmetic fix since shutdown occurs correctly anyway, but better not to log a phony complaint about startup process crash. Back-patch to 9.0.  Some parts of this might be applicable before that, but given the lack of prior complaints I'm not going to worry too much about older branches. 	27b2c6a1ef8ab5993e2aed4366d2c49c8989381a
----------------------------
Fix archive_cleanup_command. When I moved ExecuteRecoveryCommand() from xlog.c to xlogarchive.c, I didn't realize that it's called from the checkpoint process, not the startup process. I tried to use InRedo variable to decide whether or not to attempt cleaning up the archive (must not do so before we have read the initial checkpoint record), but that variable is only valid within the startup process. Instead, let ExecuteRecoveryCommand() always clean up the archive, and add an explicit argument to RestoreArchivedFile() to say whether that's allowed or not. The caller knows better. Reported by Erik Rijkers, diagnosis by Fujii Masao. Only 9.3devel is affected. 	644a0a6379afc00803dd89ffe8416514f5dfc217
----------------------------
Limit values of archive_timeout, post_auth_delay, auth_delay.milliseconds. The previous definitions of these GUC variables allowed them to range up to INT_MAX, but in point of fact the underlying code would suffer overflows or other errors with large values.  Reduce the maximum values to something that won't misbehave.  There's no apparent value in working harder than this, since very large delays aren't sensible for any of these.  (Note: the risk with archive_timeout is that if we're late checking the state, the timestamp difference it's being compared to might overflow.  So we need some amount of slop; the choice of INT_MAX/2 is arbitrary.) Per followup investigation of bug #7670.  Although this isn't a very significant fix, might as well back-patch. 	b6e3798f3aa2747db145f25e03a8d34f2e5ec8c8
----------------------------
Fix syslogger to not fail when log_rotation_age exceeds 2^31 milliseconds. We need to avoid calling WaitLatch with timeouts exceeding INT_MAX. Fortunately a simple clamp will do the trick, since no harm is done if the wait times out before it's really time to rotate the log file. Per bug #7670 (probably bug #7545 is the same thing, too). In passing, fix bogus definition of log_rotation_age's maximum value in guc.c --- it was numerically right, but only because MINS_PER_HOUR and SECS_PER_MINUTE have the same value. Back-patch to 9.2.  Before that, syslogger wasn't using WaitLatch. 	d038966ddb918872700f9f21affbc84d6bc2c029
----------------------------
Fix WaitLatch() to return promptly when the requested timeout expires. If the sleep is interrupted by a signal, we must recompute the remaining time to wait; otherwise, a steady stream of non-wait-terminating interrupts could delay return from WaitLatch indefinitely.  This has been shown to be a problem for the autovacuum launcher, and there may well be other places now or in the future with similar issues.  So we'd better make the function robust, even though this'll add at least one gettimeofday call per wait. Back-patch to 9.2.  We might eventually need to fix 9.1 as well, but the code is quite different there, and the usage of WaitLatch in 9.1 is so limited that it's not clearly important to do so. Reported and diagnosed by Jeff Janes, though I rewrote his patch rather heavily. 	3e7fdcffd6f77187b72b0496d61d782932973af6
----------------------------
In pg_upgrade, set synchronous_commit=off for the new cluster, to improve performance when restoring the schema from the old cluster. Backpatch to 9.2. 	ed5699dd1b883e193930448b7ad532e233de0bd7
----------------------------
Fix erroneous choices of segNo variables Commit dfda6eba (which changed segment numbers to use a single 64 bit variable instead of log/seg) introduced a couple of bogus choices of exactly which log segment number variable to use in each case. This is currently pretty harmless; in one place, the bogus number was only being used in an error message for a pretty unlikely condition (failure to fsync a WAL segment file).  In the other, it was using a global variable instead of the local variable; but all callsites were passing the value of the global variable anyway. No need to backpatch because that commit is not on earlier branches. 	9b8dd7e8aa19e6145a996cfc881b5617f497632d
----------------------------
"In pg_dump, dump SEQUENCE SET items in the data not pre-data section. Represent a sequence's current value as a separate TableDataInfo dumpable object, so that it can be dumped within the data section of the archive rather than in pre-data.  This fixes an undesirable inconsistency between the meanings of ""--data-only"" and ""--section=data"", and also fixes dumping of sequences that are marked as extension configuration tables, as per a report from Marko Kreen back in July.  The main cost is that we do one more SQL query per sequence, but that's probably not very meaningful in most databases. Back-patch to 9.1, since it has the extension configuration issue even though not the --section switch. "	5a39114fe7d19280f6477ce1eb0d88beafda13a4
----------------------------
"Tweak genericcostestimate's fudge factor for index size. To provide some bias against using a large index when a small one would do as well, genericcostestimate adds a ""fudge factor"", which for a long time was random_page_cost * index_pages/10000.  However, this can grow to be the dominant term in indexscan cost estimates when the index involved is large enough, a behavior that was never intended.  Change to a ln(1 + n/10000) formulation, which has nearly the same behavior up to a few hundred pages but tails off significantly thereafter.  (A log curve seems correct on first principles, since what we're trying to account for here is index descent costs, which are typically logarithmic.)  Per bug #7619 from Niko Kiirala. Possibly this change should get back-patched, but I'm hesitant to mess with cost estimates in stable branches. "	bf01e34b556ff37982ba2d882db424aa484c0d07
----------------------------
When outputting the session id in log_line_prefix (%c) or in CSV log output mode, cause the hex digits after the period to always be at least four hex digits, with zero-padding. 	22cc3b35f4d614aff83606a443da475215c6dd84
----------------------------
"Improve replication connection timeouts. Rename replication_timeout to wal_sender_timeout, and add a new setting called wal_receiver_timeout that does the same at the walreceiver side. There was previously no timeout in walreceiver, so if the network went down, for example, the walreceiver could take a long time to notice that the connection was lost. Now with the two settings, both sides of a replication connection will detect a broken connection similarly. It is no longer necessary to manually set wal_receiver_status_interval to a value smaller than the timeout. Both wal sender and receiver now automatically send a ""ping"" message if more than 1/2 of the configured timeout has elapsed, and it hasn't received any messages from the other end. Amit Kapila, heavily edited by me. "	6f60fdd7015b032bf49273c99f80913d57eac284
----------------------------
Remove configure-option-dependent test cases from dblink tests. The HINTs generated for these error cases vary across builds.  We could try to work around that, but the test cases aren't really useful enough to justify taking any trouble. Per buildfarm. 	c3bf3ea2b61c312cc813edd9bb43aa338ae9288c
----------------------------
Add microsecs/op display to pg_test_fsync utility e.g. fsync  2103.613 ops/sec (   475 microsecs/op) Peter Geoghegan 	82e429794b348cd80c1d1b011e21ffac98bc6e88
----------------------------
"Autoconfiscate selection of 64-bit int type for 64-bit large object API. Get rid of the fundamentally indefensible assumption that ""long long int"" exists and is exactly 64 bits wide on every platform Postgres runs on. Instead let the configure script select the type to use for ""pg_int64"". This is a bit of a pain in the rear since we do not want to pollute client namespace with all the random symbols that pg_config.h defines; instead we have to create a separate generated header file, ""pg_config_ext.h"". But now that the infrastructure is there, we might have the ability to add some other stuff that's long been wanting in this area. "	95d035e66d8e4371d35830d81f39face03cd4c45
----------------------------
"Improve LDAP authentication documentation Use the terms ""simple bind"" and ""search+bind"" consistently do distinguish the two modes (better than first mode and second mode in any case).  They were already used in some places, now it's just more prominent. Split up the list of options into one for common options and one for each mode, for clarity. Add configuration examples for either mode. "	ae835c7d6e202e99796c58093ef781477e54c459
----------------------------
Fix permissions explanations in CREATE DATABASE and CREATE SCHEMA docs. These reference pages still claimed that you have to be superuser to create a database or schema owned by a different role.  That was true before 8.1, but it was changed in commits aa1110624c08298393dfce996f7b21809d98d3fd and f91370cd2faf1fd35a1ac74d84652a85ed841919 to allow assignment of ownership to any role you are a member of.  However, at the time we were thinking of that primarily as a change to the ALTER OWNER rules, so the need to touch these two CREATE ref pages got missed. 	7e389f73d1556fb21487cd28fe56cba1a91126e6
----------------------------
The max shared_buffers value that initdb will choose was raised, update docs. Jeff Janes 	2ad881f054be165d617aa67cf62513dd1437caa6
----------------------------
pg_upgrade test: Disable fsync in initdb and postgres calls This mirrors the behavior of pg_regress and makes the test run much faster. 	10bfe81deeb8dc2af2204dbeebf3dda62f1ae263
----------------------------
Add support for include_dir in config file. This allows easily splitting configuration into many files, deployed in a directory. Magnus Hagander, Greg Smith, Selena Deckelmann, reviewed by Noah Misch. 	2a0c81a12c7e6c5ac1557b0f1f4a581f23fd4ca7
----------------------------
Parse pg_ident.conf when it's loaded, keeping it in memory in parsed format. Similar changes were done to pg_hba.conf earlier already, this commit makes pg_ident.conf to behave the same as pg_hba.conf. This has two user-visible effects. First, if pg_ident.conf contains multiple errors, the whole file is parsed at postmaster startup time and all the errors are immediately reported. Before this patch, the file was parsed and the errors were reported only when someone tries to connect using an authentication method that uses the file, and the parsing stopped on first error. Second, if you SIGHUP to reload the config files, and the new pg_ident.conf file contains an error, the error is logged but the old file stays in effect. Also, regular expressions in pg_ident.conf are now compiled only once when the file is loaded, rather than every time the a user is authenticated. That should speed up authentication if you have a lot of regexps in the file. Amit Kapila 	7c45e3a3c682f855ecda7fd671969ee5e91929bf
----------------------------
pg_upgrade: Remove check for pg_config It is no longer used, but was still being checked for. bug #7548 from Reinhard Max 	5cfd5bb15bb2a1220136bc130d81fa6d1474b23c
----------------------------
"Fix documentation reference to maximum allowed for autovacuum_freeze_max_age. The documentation mentioned setting autovacuum_freeze_max_age to ""its maximum allowed value of a little less than two billion"". This led to a post asking about the exact maximum allowed value, which is precisely two billion, not ""a little less"". Based on question by Radovan Jablonovsky.  Backpatch to 8.3. "	327542645e698a4c85dde8229c21361f96688808
----------------------------
Allow embedded spaces without quoting in unix_socket_directories entries. This fix removes an unnecessary incompatibility with the old behavior of the unix_socket_directory parameter.  Since pathnames with embedded spaces are fairly popular on some platforms, the incompatibility could be significant in practice.  We'll still strip unquoted leading/trailing spaces, however. No docs update since the documentation already implied that it worked like this. Per bug #7514 from Murray Cumming. 	d2286a98ef3fb88bafb57381b4c20b8b878827f1
----------------------------
Fix inappropriate error messages for Hot Standby misconfiguration errors. Give the correct name of the GUC parameter being complained of. Also, emit a more suitable SQLSTATE (INVALID_PARAMETER_VALUE, not the default INTERNAL_ERROR). Gurjeet Singh, errcode adjustment by me 	2e0cc1f031387fc304d11e55df0f9566d91698ff
----------------------------
Fix bugs in cascading replication with recovery_target_timeline='latest' The cascading replication code assumed that the current RecoveryTargetTLI never changes, but that's not true with recovery_target_timeline='latest'. The obvious upshot of that is that RecoveryTargetTLI in shared memory needs to be protected by a lock. A less obvious consequence is that when a cascading standby is connected, and the standby switches to a new target timeline after scanning the archive, it will continue to stream WAL to the cascading standby, but from a wrong file, ie. the file of the previous timeline. For example, if the standby is currently streaming from the middle of file 000000010000000000000005, and the timeline changes, the standby will continue to stream from that file. However, the WAL on the new timeline is in file 000000020000000000000005, so the standby sends garbage from 000000010000000000000005 to the cascading standby, instead of the correct WAL from file 000000020000000000000005. This also fixes a related bug where a partial WAL segment is restored from the archive and streamed to a cascading standby. The code assumed that when a WAL segment is copied from the archive, it can immediately be fully streamed to a cascading standby. However, if the segment is only partially filled, ie. has the right size, but only N first bytes contain valid WAL, that's not safe. That can happen if a partial WAL segment is manually copied to the archive, or if a partial WAL segment is archived because a server is started up on a new timeline within that segment. The cascading standby will get confused if the WAL it received is not valid, and will get stuck until it's restarted. This patch fixes that problem by not allowing WAL restored from the archive to be streamed to a cascading standby until it's been replayed, and thus validated. 	c4c227477bfe91ff4dabfe310d1f69cf7a05e939
----------------------------
"Fix pg_upgrade to cope with non-default unix_socket_directory scenarios. When starting either an old or new postmaster, force it to place its Unix socket in the current directory.  This makes it even harder for accidental connections to occur during pg_upgrade, and also works around some scenarios where the default socket location isn't usable.  (For example, if the default location is something other than ""/tmp"", it might not exist during ""make check"".) When checking an already-running old postmaster, find out its actual socket directory location from postmaster.pid, if possible.  This dodges problems with an old postmaster having a configured location different from the default built into pg_upgrade's libpq.  We can't find that out if the old postmaster is pre-9.1, so also document how to cope with such scenarios manually. In support of this, centralize handling of the connection-related command line options passed to pg_upgrade's subsidiary programs, such as pg_dump. This should make future changes easier. Bruce Momjian and Tom Lane "	f763b77193b04eba03a1f4ce46df34dc0348419e
----------------------------
Make configure probe for mbstowcs_l as well as wcstombs_l. We previously supposed that any given platform would supply both or neither of these functions, so that one configure test would be sufficient.  It now appears that at least on AIX this is not the case ... which is likely an AIX bug, but nonetheless we need to cope with it.  So use separate tests. Per bug #6758; thanks to Andrew Hastie for doing the followup testing needed to confirm what was happening. Backpatch to 9.1, where we began using these functions. 	58a031f920c225b20fdb45c1e56fe41ed7568900
----------------------------
Revert 1fbc30f1dca6624c01a9a6a9ff711a7036c68532 because the --enable-shared is about Plyton's configure, not ours. 	39d0653d058b87b437be05fd295ceb5bb4e9e05c
----------------------------
Document that max_locks_per_transaction might need to be increased for queries on parent tables, per suggestion from Josh Berkus. 	39b42ecb059e24bb39a62d91fe57ab7b9ca5a2f5
----------------------------
Remove configure flag --disable-shared, as it is no longer used by any port.  The last use was QNX, per Peter Eisentraut. 	381a9ed66d8a601eb972be172e7251ca7f0e9d78
----------------------------
Fix checkpoint_timeout documentation to reflect current behavior. Jeff Janes 	9bedfbd02b48096f435c5b111591d4e5b717e547
----------------------------
Document that log_autovacuum_min_duration can be used to monitor autovacuum activity. Per report from Marc Mamin 	83fbfec383d7f7ef1331ba02db3d0fdf50abf112
----------------------------
Also check for Python platform-specific include directory Python can be built to have two separate include directories: one for platform-independent files and one for platform-specific files.  So far, this has apparently never mattered for a PL/Python build.  But with the new multi-arch Python packages in Debian and Ubuntu, this is becoming the standard configuration on these platforms, so we must check these directories separately to be able to build there. Also add a bit of reporting in configure to be able to see better what is going on with this. 	9cffb187d80d87399c5d2c4577b3f3ba775ef028
----------------------------
Update FreeBSD kernel configuration documentation. Brad Davis 	7a42dff47e37e7cd7ba03a2ed6531f2d9a206e74
----------------------------
Fix issues with checks for unsupported transaction states in Hot Standby. The GUC check hooks for transaction_read_only and transaction_isolation tried to check RecoveryInProgress(), so as to disallow setting read/write mode or serializable isolation level (respectively) in hot standby sessions.  However, GUC check hooks can be called in many situations where we're not connected to shared memory at all, resulting in a crash in RecoveryInProgress().  Among other cases, this results in EXEC_BACKEND builds crashing during child process start if default_transaction_isolation is serializable, as reported by Heikki Linnakangas.  Protect those calls by silently allowing any setting when not inside a transaction; which is okay anyway since these GUCs are always reset at start of transaction. Also, add a check to GetSerializableTransactionSnapshot() to complain if we are in hot standby.  We need that check despite the one in check_XactIsoLevel() because default_transaction_isolation could be serializable.  We don't want to complain any sooner than this in such cases, since that would prevent running transactions at all in such a state; but a transaction can be run, if SET TRANSACTION ISOLATION is done before setting a snapshot.  Per report some months ago from Robert Haas. Back-patch to 9.1, since these problems were introduced by the SSI patch. Kevin Grittner and Tom Lane, with ideas from Heikki Linnakangas 	7abaa6b9d3eeccf777c0210b7340d960b9cceb97
----------------------------
Fix cascading privilege revoke to notice when privileges are still held. If we revoke a grant option from some role X, but X still holds the option via another grant, we should not recursively revoke the privilege from role(s) Y that X had granted it to.  This was supposedly fixed as one aspect of commit 4b2dafcc0b1a579ef5daaa2728223006d1ff98e9, but I must not have tested it, because in fact that code never worked: it forgot to shift the grant-option bits back over when masking the bits being revoked. Per bug #6728 from Daniel German.  Back-patch to all active branches, since this has been wrong since 8.0. 	ec8a0135c3228087761ad3cdba18aebb01c7e17a
----------------------------
Fix erroneous documentation of synchronous_commit = remote_write. The docs claimed that this mode only waits for the standby to receive WAL data, but actually it waits for the data to be written out to the standby's OS; which is a pretty significant difference because it removes the risk of crash of the walreceiver process. 	932a271956afac90a676b946fd3e356b45581445
----------------------------
Document that pg_reload_conf() is also an easy way to reload the configuration file. 	7dff5b8edd898146ffa4afc2df3f9d5c67e43f0e
----------------------------
Fix install-strip on Mac OS X There was a hack put into install-sh to call strip with the correct options on Mac OS X.  But that never worked, because configure disabled stripping on that platform altogether.  So remove that dead code, and while we're at it, update install-sh to the latest upstream source (from Automake). Instead, set up the right strip options in programs.m4, so this now actually works the way it was originally intended. 	b748d8f280100e4ddbafcc65a768e287a1dfcc22
----------------------------
Check LIBXML_VERSION instead of testing in configure script. We had put a test for libxml2's xmlStructuredErrorContext variable in configure, but of course that doesn't work on Windows builds.  The next best alternative seems to be to test the LIBXML_VERSION symbol provided by xmlversion.h. Per report from Talha Bin Rizwan, though this fixes it in a different way than his proposed patch. 	470d0b9789981bc91a8ef2654911d80ab6a6be57
----------------------------
Document that PGDATA has to point to the configuration files, rather than the actual data storage directory. Per suggestion from Thom Brown 	077908aed726b0e1605ed27156d7ebcf93a64d5d
----------------------------
"Resurrect the ""last ditch"" code path in join_search_one_level(). This essentially reverts commit e54b10a62db2991235fe800c629baef4531a6d67, in which I'd decided that the ""last ditch"" join logic was useless.  The folly of that is now exposed by a report from Pavel Stehule: although the function should always find at least one join in a self-contained join problem, it can still fail to do so in a sub-problem created by artificial from_collapse_limit or join_collapse_limit constraints.  Adjust the comments to describe this, and simplify the code a bit to match the new coding of the earlier loop in the function. I'm not terribly happy about this: I still subscribe to the opinion stated in the previous commit message that the ""last ditch"" code can obscure logic bugs elsewhere.  But the alternative seems to be to complicate the earlier tests for does-this-relation-have-a-join-clause to the point where they can tell whether the join clauses link outside the current join sub-problem. And that looks messy, slow, and possibly a source of bugs in itself. In any case, now is not the time to be inserting experimental code into 9.2, so let's just go back to the time-tested solution. "	eb919e8fde4333d4a627d349a1460b07fc52dd3b
----------------------------
"Revert ""commit_delay"" change; just add comment that we don't have a microsecond specification. "	03bda4535ee119d3dae7226faebed089925ace7e
----------------------------
"Add pg_settings units display for ""commit_delay"" (ms). Also remove unnecessary units designation in postgresql.conf.sample. "	e74727440c4d3df443dbd3d0a2201751883316ce
----------------------------
Support having multiple Unix-domain sockets per postmaster. Replace unix_socket_directory with unix_socket_directories, which is a list of socket directories, and adjust postmaster's code to allow zero or more Unix-domain sockets to be created. This is mostly a straightforward change, but since the Unix sockets ought to be created after the TCP/IP sockets for safety reasons (better chance of detecting a port number conflict), AddToDataDirLockFile needs to be fixed to support out-of-order updates of data directory lockfile lines. That's a change that had been foreseen to be necessary someday anyway. Honza Horak, reviewed and revised by Tom Lane 	c9b0cbe98bd783e24a8c4d8d8ac472a494b81292
----------------------------
Fix upper limit of superuser_reserved_connections, add limit for wal_senders Should be limited to the maximum number of connections excluding autovacuum workers, not including. Add similar check for max_wal_senders, which should never be higher than max_connections. 	b3055ab4fb5839a872bfe354b2b5ac31e6903ed6
----------------------------
fsync backup_label after pg_start_backup() Dave Kerr 	0f04fc67f71f7cb29ccedb2e7ddf443b9e52b958
----------------------------
Add link to synchronous_commit variables in high availability docs. Backpatch to 9.2 Erik Rijkers 	95e750520c47416554765a508b280f96802ff54f
----------------------------
Fix syslogger so that log_truncate_on_rotation works in the first rotation. In the original coding of the log rotation stuff, we did not bother to make the truncation logic work for the very first rotation after postmaster start (or after a syslogger crash and restart).  It just always appended in that case.  It did not seem terribly important at the time, but we've recently had two separate complaints from people who expected it to work unsurprisingly.  (Both users tend to restart the postmaster about as often as a log rotation is configured to happen, which is maybe not typical use, but still...)  Since the initial log file is opened in the postmaster, fixing this requires passing down some more state to the syslogger child process. It's always been like this, so back-patch to all supported branches. 	b76356ac22d8322e6074981b4d34ee19cd0dbc8a
----------------------------
Only allow autovacuum to be auto-canceled by a directly blocked process. In the original coding of the autovacuum cancel feature, commit acac68b2bcae818bc8803b8cb8cbb17eee8d5e2b, an autovacuum process was considered a target for cancellation if it was found to hard-block any process examined in the deadlock search.  This patch tightens the test so that the autovacuum must directly hard-block the current process.  This should make the behavior more predictable in general, and in particular it ensures that an autovacuum will not be canceled with less than deadlock_timeout grace period.  In the old coding, it was possible for an autovacuum to be canceled almost instantly, given unfortunate timing of two or more other processes' lock attempts. This also justifies the logging methodology in the recent commit d7318d43d891bd63e82dcfc27948113ed7b1db80; without this restriction, that patch isn't providing enough information to see the connection of the canceling process to the autovacuum.  Like that one, patch all the way back. 	26b438694cc4461f41f2acf54db6bb3d9c1ea940
----------------------------
Log a better message when canceling autovacuum. The old message was at DEBUG2, so typically it didn't show up in the log at all.  As a result, in most cases where autovacuum was canceled, the only information that was logged was the table being vacuumed, with no indication as to what problem caused the cancel.  Crank up the level to LOG and add some more details to assist with debugging. Back-patch all the way, per discussion on pgsql-hackers. 	d7318d43d891bd63e82dcfc27948113ed7b1db80
----------------------------
Improve copydir() code for the case that fsync is off. We should avoid calling sync_file_range or posix_fadvise in this case, since (a) we don't really care if the data gets synced, and might as well save the kernel calls; (b) at least on Linux we know that the kernel might block us until it's scheduled the write. Also, avoid making a useless second traversal of the directory tree if we're not actually going to call fsync(2) after all. 	2d46a57ddcad394e514bbefb193a4a03e766f163
----------------------------
Use --nosync during make check's initdb call. We left this out of commit b966dd6c4228d696b291c1cdcb5ab8c8475fefa8 so as to get some more buildfarm testing of the new fsync code in initdb. But since no problems have turned up, it's probably time to save the cycles. 	2c4f5b4bc5385b37d062451642abd384536eeeb3
----------------------------
Rethink checkpointer's fsync-request table representation. Instead of having one hash table entry per relation/fork/segment, just have one per relation, and use bitmapsets to represent which specific segments need to be fsync'd.  This eliminates the need to scan the whole hash table to implement FORGET_RELATION_FSYNC, which fixes the O(N^2) behavior recently demonstrated by Jeff Janes for cases involving lots of TRUNCATE or DROP TABLE operations during a single checkpoint cycle.  Per an idea from Robert Haas. (FORGET_DATABASE_FSYNC still sucks, but since dropping a database is a pretty expensive operation anyway, we'll live with that.) In passing, improve the delayed-unlink code: remove the pass over the list in mdpreckpt, since it wasn't doing anything for us except supporting a useless Assert in mdpostckpt, and fix mdpostckpt so that it will absorb fsync requests every so often when clearing a large backlog of deletion requests. 	be86e3dd5b42c33387ae976c014e6276c9439f7f
----------------------------
Send only one FORGET_RELATION_FSYNC request when dropping a relation. We were sending one per fork, but a little bit of refactoring allows us to send just one request with forknum == InvalidForkNumber.  This not only reduces pressure on the shared-memory request queue, but saves repeated traversals of the checkpointer's hash table. 	3072b7bade26d4cf72ad453ad7d3323927b1ea64
----------------------------
Fix statistics breakage from bgwriter/checkpointer process split. ForwardFsyncRequest() supposed that it could only be called in regular backends, which used to be true; but since the splitup of bgwriter and checkpointer, it is also called in the bgwriter.  We do not want to count such calls in pg_stat_bgwriter.buffers_backend statistics, so fix things so that they aren't. (It's worth noting here that this implies an alarmingly large increase in the expected amount of cross-process fsync request traffic, which may well mean that the process splitup was not such a hot idea.) 	80e373c3a8c43812bdc98fe0d433b9990acce5ad
----------------------------
Fix management of pendingOpsTable in auxiliary processes. mdinit() was misusing IsBootstrapProcessingMode() to decide whether to create an fsync pending-operations table in the current process.  This led to creating a table not only in the startup and checkpointer processes as intended, but also in the bgwriter process, not to mention other auxiliary processes such as walwriter and walreceiver.  Creation of the table in the bgwriter is fatal, because it absorbs fsync requests that should have gone to the checkpointer; instead they just sit in bgwriter local memory and are never acted on.  So writes performed by the bgwriter were not being fsync'd which could result in data loss after an OS crash.  I think there is no live bug with respect to walwriter and walreceiver because those never perform any writes of shared buffers; but the potential is there for future breakage in those processes too. To fix, make AuxiliaryProcessMain() export the current process's AuxProcType as a global variable, and then make mdinit() test directly for the types of aux process that should have a pendingOpsTable.  Having done that, we might as well also get rid of the random bool flags such as am_walreceiver that some of the aux processes had grown.  (Note that we could not have fixed the bug by examining those variables in mdinit(), because it's called from BaseInit() which is run by AuxiliaryProcessMain() before entering any of the process-type-specific code.) Back-patch to 9.2, where the problem was introduced by the split-up of bgwriter and checkpointer processes.  The bogus pendingOpsTable exists in walwriter and walreceiver processes in earlier branches, but absent any evidence that it causes actual problems there, I'll leave the older branches alone. 	4a9c30a8a1d3a786abc4b8d95f0182463f66f919
----------------------------
Improve coding around the fsync request queue. In all branches back to 8.3, this patch fixes a questionable assumption in CompactCheckpointerRequestQueue/CompactBgwriterRequestQueue that there are no uninitialized pad bytes in the request queue structs.  This would only cause trouble if (a) there were such pad bytes, which could happen in 8.4 and up if the compiler makes enum ForkNumber narrower than 32 bits, but otherwise would require not-currently-planned changes in the widths of other typedefs; and (b) the kernel has not uniformly initialized the contents of shared memory to zeroes.  Still, it seems a tad risky, and we can easily remove any risk by pre-zeroing the request array for ourselves. In addition to that, we need to establish a coding rule that struct RelFileNode can't contain any padding bytes, since such structs are copied into the request array verbatim.  (There are other places that are assuming this anyway, it turns out.) In 9.1 and up, the risk was a bit larger because we were also effectively assuming that struct RelFileNodeBackend contained no pad bytes, and with fields of different types in there, that would be much easier to break. However, there is no good reason to ever transmit fsync or delete requests for temp files to the bgwriter/checkpointer, so we can revert the request structs to plain RelFileNode, getting rid of the padding risk and saving some marginal number of bytes and cycles in fsync queue manipulation while we are at it.  The savings might be more than marginal during deletion of a temp relation, because the old code transmitted an entirely useless but nonetheless expensive-to-process ForgetRelationFsync request to the background process, and also had the background process perform the file deletion even though that can safely be done immediately. In addition, make some cleanup of nearby comments and small improvements to the code in CompactCheckpointerRequestQueue/CompactBgwriterRequestQueue. 	73b796a52c50d6f44400c99eff1a01c89d08782f
----------------------------
"Add fsync capability to initdb, and use sync_file_range() if available. Historically we have not worried about fsync'ing anything during initdb (in fact, initdb intentionally passes -F to each backend launch to prevent it from fsync'ing).  But with filesystems getting more aggressive about caching data, that's not such a good plan anymore.  Make initdb do a pass over the finished data directory tree to fsync everything.  For testing purposes, the -N/--nosync flag can be used to restore the old behavior. Also, testing shows that on Linux, sync_file_range() is much faster than posix_fadvise() for hinting to the kernel that an fsync is coming, apparently because the latter blocks on a rather small request queue while the former doesn't.  So use this function if available in initdb, and also in the backend's pg_flush_data() (where it currently will affect only the speed of CREATE DATABASE's cloning step). We will later make pg_regress invoke initdb with the --nosync flag to avoid slowing down cases such as ""make check"" in contrib.  But let's not do so until we've shaken out any portability issues in this patch. Jeff Davis, reviewed by Andres Freund "	b966dd6c4228d696b291c1cdcb5ab8c8475fefa8
----------------------------
Fix planner to pass correct collation to operator selectivity estimators. We can do this without creating an API break for estimation functions by passing the collation using the existing fmgr functionality for passing an input collation as a hidden parameter. The need for this was foreseen at the outset, but we didn't get around to making it happen in 9.1 because of the decision to sort all pg_statistic histograms according to the database's default collation.  That meant that selectivity estimators generally need to use the default collation too, even if they're estimating for an operator that will do something different.  The reason it's suddenly become more interesting is that regexp interpretation also uses a collation (for its LC_TYPE not LC_COLLATE property), and we no longer want to use the wrong collation when examining regexps during planning.  It's not that the selectivity estimate is likely to change much from this; rather that we are thinking of caching compiled regexps during planner estimation, and we won't get the intended benefit if we cache them with a different collation than the executor will use. Back-patch to 9.1, both because the regexp change is likely to get back-patched and because we might as well get this right in all collation-supporting branches, in case any third-party code wants to rely on getting the collation.  The patch turns out to be minuscule now that I've done it ... 	e7ef6d7e248cd39b8a4a7630776ec3924feeafa6
----------------------------
Update pg_upgrade comments for recent configpath fix. 	c742d1dbe759f4c1e3304e5fbca88e061f64978f
----------------------------
Fix PGDATAOLD and PGDATANEW to properly set pgconfig location, per report from Tom. Backpatch to 9.2. 	2eeb5eb23fa9ad1a2d636bbf2fd68e6709848d23
----------------------------
Remove support for using wait3() in place of waitpid(). All Unix-oid platforms that we currently support should have waitpid(), since it's in V2 of the Single Unix Spec.  Our git history shows that the wait3 code was added to support NextStep, which we officially dropped support for as of 9.2.  So get rid of the configure test, and simplify the macro spaghetti in reaper().  Per suggestion from Fujii Masao. 	fc548b2296df3fe039bf68e196bfd883338e0faa
----------------------------
Run newly-configured perltidy script on Perl files. Run on HEAD and 9.2. 	042d9ffc282a8c796d2a5babc600c1a6db150dac
----------------------------
Increase the maximum initdb-configured value for shared_buffers to 128MB. The old value of 32MB has been around for a very long time, and in the meantime typical system memories have become vastly larger.  Also, now that we no longer depend on being able to fit the entirety of our shared memory segment into the system's limit on System V shared memory, there's a much better chance of the higher limit actually proving productive. Per recent discussion on pgsql-hackers. 	f358428280953643313ee7756e0a8b8ccfde7660
----------------------------
Make oid2name, pgbench, and vacuumlo set fallback_application_name. Amit Kapila, reviewed by Shigeru Hanada and Peter Eisentraut, with some modifications by me. 	17676c785a95b2598c5735c0025f7dc7727a96bc
----------------------------
Remove reference to default wal_buffers being 8 This hasn't been true since 9.1, when the default was changed to -1. Remove the reference completely, keeping the discussion of the parameter and it's shared memory effects on the config page. 	817d870cf990698cbc6672068e6af5405c2ae7a4
----------------------------
"Have REASSIGN OWNED work on extensions, too Per bug #6593, REASSIGN OWNED fails when the affected role has created an extension.  Even though the user related to the extension is not nominally the owner, its OID appears on pg_shdepend and thus causes problems when the user is to be dropped. This commit adds code to change the ""ownership"" of the extension itself, not of the contained objects.  This is fine because it's currently only called from REASSIGN OWNED, which would also modify the ownership of the contained objects.  However, this is not sufficient for a working ALTER OWNER implementation extension. Back-patch to 9.1, where extensions were introduced. Bug #6593 reported by Emiliano Leporati. "	0c7b9dc7d037c4465227dc2300ff48019feeba37
----------------------------
Remove misleading hints about reducing the System V request size. Since the request size will now be ~48 bytes regardless of how shared_buffers et. al. are set, much of this advice is no longer relevant. 	6a77bff086b9bba94ab6cd6229a74f44d3ec266d
----------------------------
Fix position of WalSndWakeupRequest call. This avoids discriminating against wal_sync_method = open_sync or open_datasync. Fujii Masao, reviewed by Andres Freund 	3bb592bb20d02093d6488a57c7c4ee94803ddc9a
----------------------------
Make commit_delay much smarter. Instead of letting every backend participating in a group commit wait independently, have the first one that becomes ready to flush WAL wait for the configured delay, and let all the others wait just long enough for that first process to complete its flush.  This greatly increases the chances of being able to configure a commit_delay setting that actually improves performance. As a side consequence of this change, commit_delay now affects all WAL flushes, rather than just commits.  There was some discussion on pgsql-hackers about whether to rename the GUC to, say, wal_flush_delay, but in the absence of consensus I am leaving it alone for now. Peter Geoghegan, with some changes, mostly to the documentation, by me. 	f11e8be3e812cdbbc139c1b4e49141378b118dee
----------------------------
Dramatically reduce System V shared memory consumption. Except when compiling with EXEC_BACKEND, we'll now allocate only a tiny amount of System V shared memory (as an interlock to protect the data directory) and allocate the rest as anonymous shared memory via mmap. This will hopefully spare most users the hassle of adjusting operating system parameters before being able to start PostgreSQL with a reasonable value for shared_buffers. There are a bunch of documentation updates needed here, and we might need to adjust some of the HINT messages related to shared memory as well.  But it's not 100% clear how portable this is, so before we write the documentation, let's give it a spin on the buildfarm and see what turns red. 	b0fc0df9364d2d2d17c0162cf3b8b59f6cb09f67
----------------------------
Fix install program detection configure handles INSTALL as a substitution variable specially, and apparently it gets confused when it's set to empty.  Use INSTALL_ instead as a workaround to avoid the issue. 	f7867154129781ee1522344bef50890c01f2b47a
----------------------------
"Use system install program when available and usable In a3176dac22c4cd14971e35119e245abee7649cb9 we switched to using install-sh unconditionally, because the configure check AC_PROG_INSTALL would pick up any random program named install, which has caused failure reports (http://archives.postgresql.org/pgsql-hackers/2001-03/msg00312.php). Now the configure check is much improved and should avoid false positives.  It has also been shown that using a system install program can significantly reduce ""make install"" times, so it's worth trying. "	9db7ccae2000524b72a4052352cbb5407fb53b02
----------------------------
Allow pg_terminate_backend() to be used on backends with matching role. A similar change was made previously for pg_cancel_backend, so now it all matches again. Dan Farina, reviewed by Fujii Masao, Noah Misch, and Jeff Davis, with slight kibitzing on the doc changes by me. 	c60ca19de9ad777c51243605571d1d7606000f08
----------------------------
Oops. Remove stray paren. I didn't notice this on my laptop as I don't HAVE_FSYNC_WRITETHROUGH. 	a218e23a08519d525d09565bbeddbf682f76d4dd
----------------------------
Fix stats collector to recover nicely when system clock goes backwards. Formerly, if the system clock went backwards, the stats collector would fail to update the stats file any more until the clock reading again exceeds whatever timestamp was last written into the stats file.  Such glitches in the clock's behavior are not terribly unlikely on machines not using NTP.  Such a scenario has been observed to cause regression test failures in the buildfarm, and it could have bad effects on the behavior of autovacuum, so it seems prudent to install some defenses. We could directly detect the clock going backwards by adding GetCurrentTimestamp calls in the stats collector's main loop, but that would hurt performance on platforms where GetCurrentTimestamp is expensive. To minimize the performance hit in normal cases, adopt a more complicated scheme wherein backends check for clock skew when reading the stats file, and if they see it, signal the stats collector by sending an extra stats inquiry message.  The stats collector does an extra GetCurrentTimestamp only when it receives an inquiry with an apparently out-of-order timestamp. To avoid unnecessary GetCurrentTimestamp calls, expand the inquiry messages to carry the backend's current clock reading as well as its stats cutoff time.  The latter, being intentionally slightly in-the-past, would trigger more clock rechecks than we need if it were used for this purpose. We might want to backpatch this change at some point, but let's let it shake out in the buildfarm for awhile first. 	9e18eacbdff2ae2abd5ff38eee725e6399e39b41
----------------------------
Remove misplaced sanity check from heap_create(). Even when allow_system_table_mods is not set, we allow creation of any type of SQL object in pg_catalog, except for relations.  And you can get relations into pg_catalog, too, by initially creating them in some other schema and then moving them with ALTER .. SET SCHEMA.  So this restriction, which prevents relations (only) from being created in pg_catalog directly, is fairly pointless.  If we need a safety mechanism for this, it should be placed further upstream, so that it affects all SQL objects uniformly, and picks up both CREATE and SET SCHEMA. For now, just rip it out, per discussion with Tom Lane. 	a475c6036752c26dca538632b68fd2cc592976b7
----------------------------
"Ensure pg_ctl behaves sanely when data directory is not specified. Commit aaa6e1def292cdacb6b27088898793b1b879fedf introduced multiple hazards in the case where pg_ctl is executed with neither a -D switch nor any PGDATA environment variable.  It would dump core on machines which are unforgiving about printf(""%s"", NULL), or failing that possibly give a rather unhelpful complaint about being unable to execute ""postgres -C"", rather than the logically prior complaint about not being told where the data directory is. Edmund Horner's report suggests that there is another, Windows-specific hazard here, but I'm not the person to fix that; it would in any case only be significant when trying to use a config-only PGDATA pointer. "	51e61b04f8040f627e7605594095b06c10582fd0
----------------------------
Do unlocked prechecks in bufmgr.c loops that scan the whole buffer pool. DropRelFileNodeBuffers, DropDatabaseBuffers, FlushRelationBuffers, and FlushDatabaseBuffers have to scan the whole shared_buffers pool because we have no index structure that would find the target buffers any more efficiently than that.  This gets expensive with large NBuffers.  We can shave some cycles from these loops by prechecking to see if the current buffer is interesting before we acquire the buffer header lock. Ordinarily such a test would be unsafe, but in these cases it should be safe because we are already assuming that the caller holds a lock that prevents any new target pages from being loaded into the buffer pool concurrently.  Therefore, no buffer tag should be changing to a value of interest, only away from a value of interest.  So a false negative match is impossible, while a false positive is safe because we'll recheck after acquiring the buffer lock.  Initial testing says that this speeds these loops by a factor of 2X to 3X on common Intel hardware. Patch for DropRelFileNodeBuffers by Jeff Janes (based on an idea of Heikki's); extended to the remaining sequential scans by Tom Lane 	e8d029a30b5a5fb74b848a8697b1dfa3f66d9697
----------------------------
Add example of archive_command to use with pg_receivexlog 	778201200b4a5b287fe931e20ae804e8398d4872
----------------------------
Checkpointer starts before bgwriter to avoid missing fsync requests. Noted while testing Hot Standby startup. 	a297d64d9223f6bd9c495ff5726a3c99080c2a4a
----------------------------
Ignore SECURITY DEFINER and SET attributes for a PL's call handler. It's not very sensible to set such attributes on a handler function; but if one were to do so, fmgr.c went into infinite recursion because it would call fmgr_security_definer instead of the handler function proper. There is no way for fmgr_security_definer to know that it ought to call the handler and not the original function referenced by the FmgrInfo's fn_oid, so it tries to do the latter, causing the whole process to start over again. Ordinarily such misconfiguration of a procedural language's handler could be written off as superuser error.  However, because we allow non-superuser database owners to create procedural languages and the handler for such a language becomes owned by the database owner, it is possible for a database owner to crash the backend, which ideally shouldn't be possible without superuser privileges.  In 9.2 and up we will adjust things so that the handler functions are always owned by superusers, but in existing branches this is a minor security fix. Problem noted by Noah Misch (after several of us had failed to detect it :-().  This is CVE-2012-2655. 	33c6eaf78e692c0699e74a3883780d2edb68e4d7
----------------------------
Fix integer overflow bug in GiST buffering build calculations. The result of (maintenance_work_mem * 1024) / BLCKSZ doesn't fit in a signed 32-bit integer, if maintenance_work_mem >= 2GB. Use double instead. And while we're at it, write the calculations in an easier to understand form, with the intermediary steps written out and commented. 	4bc6fb57f774ea18187fd8565aad9994160bfc17
----------------------------
Prevent pg_basebackup when integer_datetimes flag doesn't match. Magnus Hagander, reviewed by Fujii Masao, with slight wording changes by me. 	304aa339b20df9f9ba6f4d93175e05098f6fd1c1
----------------------------
Remove unused AC_SUBST variables These were apparently never used.  The AC_SUBST was probably just added in a copy-and-paste manner.  (The shell variables continue to be used inside configure.  The change is just that we don't need them outside of configure.) 	7b85527eaee2cdcfc33d9f8c6c8e4a4908f7f58d
----------------------------
Properly capitalize the TimeZone parameter For better or worse, it is implemented in mixed case, so document it as such, at least in the main listing, like DateStyle. Josh Kupershmidt 	586d356bc5af1aa61f965f6ba1cbeb1533ec8c99
----------------------------
"Improve control logic for bgwriter hibernation mode. Commit 6d90eaaa89a007e0d365f49d6436f35d2392cfeb added a hibernation mode to the bgwriter to reduce the server's idle-power consumption.  However, its interaction with the detailed behavior of BgBufferSync's feedback control loop wasn't very well thought out.  That control loop depends primarily on the rate of buffer allocation, not the rate of buffer dirtying, so the hibernation mode has to be designed to operate only when no new buffer allocations are happening.  Also, the check for whether the system is effectively idle was not quite right and would fail to detect a constant low level of activity, thus allowing the bgwriter to go into hibernation mode in a way that would let the cycle time vary quite a bit, possibly further confusing the feedback loop.  To fix, move the wakeup support from MarkBufferDirty and SetBufferCommitInfoNeedsSave into StrategyGetBuffer, and prevent the bgwriter from entering hibernation mode unless no buffer allocations have happened recently. In addition, fix the delaying logic to remove the problem of possibly not responding to signals promptly, which was basically caused by trying to use the process latch's is_set flag for multiple purposes.  I can't prove it but I'm suspicious that that hack was responsible for the intermittent ""postmaster does not shut down"" failures we've been seeing in the buildfarm lately.  In any case it did nothing to improve the readability or robustness of the code. In passing, express the hibernation sleep time as a multiplier on BgWriterDelay, not a constant.  I'm not sure whether there's any value in exposing the longer sleep time as an independently configurable setting, but we can at least make it act like this for little extra code. "	6308ba05a7a24b5137d97508300131ffa42051c2
----------------------------
psql: Add variable to control keyword case in tab completion This adds the variable COMP_KEYWORD_CASE, which controls in what case keywords are completed.  This is partially to let users configure the change from commit 69f4f1c3576abc535871c6cfa95539e32a36120f, but it also offers more behaviors than were available before. 	db84ba65ab5c0ad0b34d68ab5a687bc5f4ca3ba6
----------------------------
Update config.guess and config.sub 	cf09230e1992a81e8e17441104d3c8a558abec04
----------------------------
Fix pg_config.h make rule According to the Autoconf documentation, there should be a make rule pg_config.h: stamp-h so that with the right setup around this, a change in pg_config.h.in will trigger a rebuild of everything that depends on pg_config.h.  But this doesn't always work, sometimes you need to run make twice to get everything up to date after a change of pg_config.h.in. The fix is to write the rule as pg_config.h: stamp-h ; instead (with an empty command instead of no command).  This is what Automake-generated makefiles effectively do, so it seems safe to be on this side. It's not actually clear why this is (apparently) more correct.  It's been posted to <http://lists.gnu.org/archive/html/help-make/2012-04/msg00058.html> without response so far. 	d7b2cd9d40e858778ca93b59383d280e510a01e7
----------------------------
Fix syslogger's rotation disable/re-enable logic. If it fails to open a new log file, the syslogger assumes there's something wrong with its parameters (such as log_directory), and stops attempting automatic time-based or size-based log file rotations.  Sending it SIGHUP is supposed to start that up again.  However, the original coding for that was really bogus, involving clobbering a couple of GUC variables and hoping that SIGHUP processing would restore them.  Get rid of that technique in favor of maintaining a separate flag showing we've turned rotation off. Per report from Mark Kirkwood. Also, the syslogger will automatically attempt to create the log_directory directory if it doesn't exist, but that was only happening at startup. For consistency and ease of use, it should do the same whenever the value of log_directory is changed by SIGHUP. Back-patch to all supported branches. 	537b26695389ae67adc4fbbe04254bc527a11128
----------------------------
Improve documentation around historical calendar rules. Get rid of section 8.5.6 (Date/Time Internals), which appears to confuse people more than it helps, and anyway discussion of Postgres' internal datetime calculation methods seems pretty out of place here.  Instead, make datatype.sgml just say that we follow the Gregorian calendar (a bit of specification not previously present anywhere in that chapter :-() and link to the History of Units appendix for more info.  Do some mild editorialization on that appendix, too, to make it clearer that we are following proleptic Gregorian calendar rules rather than anything more historically accurate. Per a question from Florence Cousin and subsequent discussion in pgsql-docs. 	92df2203437603d40417fe711c3cb7066ac4fdf5
----------------------------
Doc clarification for synchronous_commit. Fujii Masao 	37e666b8b5999fddd556138edd17a5f26384460f
----------------------------
psql: Add tab completion for CREATE/ALTER ROLE name WITH Previously, the use of the optional key word WITH was not supported. Josh Kupershmidt 	1fd832ddffe83a07f82939bd9e5787a61aeba1ef
----------------------------
Rename synchronous_commit='write' to 'remote_write'. Fujii Masao, per discussion on pgsql-hackers 	ea6a2d8d47b9368f50fb7f4cca206895e6127a0a
----------------------------
Silently ignore any nonexistent schemas that are listed in search_path. Previously we attempted to throw an error or at least warning for missing schemas, but this was done inconsistently because of implementation restrictions (in many cases, GUC settings are applied outside transactions so that we can't do system catalog lookups).  Furthermore, there were exceptions to the rule even in the beginning, and we'd been poking more and more holes in it as time went on, because it turns out that there are lots of use-cases for having some irrelevant items in a common search_path value.  It seems better to just adopt a philosophy similar to what's always been done with Unix PATH settings, wherein nonexistent or unreadable directories are silently ignored. This commit also fixes the documentation to point out that schemas for which the user lacks USAGE privilege are silently ignored.  That's always been true but was previously not documented. This is mostly in response to Robert Haas' complaint that 9.1 started to throw errors or warnings for missing schemas in cases where prior releases had not.  We won't adopt such a significant behavioral change in a back branch, so something different will be needed in 9.1. 	880bfc3287dd68cfe90d10d9597d7b0fd2dae3e5
----------------------------
Adjust various references to GEQO being non-deterministic. It's still non-deterministic in some sense ... but given fixed settings and identical planning problems, it will now always choose the same plan, so we probably shouldn't tar it with that brush.  Per bug #6565 from Guillaume Cottenceau.  Back-patch to 9.0 where the behavior was fixed. 	c94b43ce39f3ee48db04fb8284de0db12526af92
----------------------------
Do stack-depth checking in all postmaster children. We used to only initialize the stack base pointer when starting up a regular backend, not in other processes. In particular, autovacuum workers can run arbitrary user code, and without stack-depth checking, infinite recursion in e.g an index expression will bring down the whole cluster. The comment about PL/Java using set_stack_base() is not yet true. As the code stands, PL/java still modifies the stack_base_ptr variable directly. However, it's been discussed in the PL/Java mailing list that it should be changed to use the function, because PL/Java is currently oblivious to the register stack used on Itanium. There's another issues with PL/Java, namely that the stack base pointer it sets is not really the base of the stack, it could be something close to the bottom of the stack. That's a separate issue that might need some further changes to this code, but that's a different story. Backpatch to all supported releases. 	ef3883d130cb553003015f3da7fa59415da6f5c9
----------------------------
NLS: Seed Language field in PO header Use msgmerge --lang option to seed the Language field, recently introduced by gettext, in the header of the new PO file. 	c2cc5c347440e48bc4d0e4ed083db2f3966a0e90
----------------------------
pgxs: Supply default values for BISON and FLEX variables Otherwise, the availability of these variables depends on what happened to be available at the time the PostgreSQL build was configured. 	6ca365bff28e52dc14500df84e7b3230d4c292eb
----------------------------
Inherit max_safe_fds to child processes in EXEC_BACKEND mode. Postmaster sets max_safe_fds by testing how many open file descriptors it can open, and that is normally inherited by all child processes at fork(). Not so on EXEC_BACKEND, ie. Windows, however. Because of that, we effectively ignored max_files_per_process on Windows, and always assumed a conservative default of 32 simultaneous open files. That could have an impact on performance, if you need to access a lot of different files in a query. After this patch, the value is passed to child processes by save/restore_backend_variables() among many other global variables. It has been like this forever, but given the lack of complaints about it, I'm not backpatching this. 	5762a4d9098ac0cba789ddd26286ac85c2d316f2
----------------------------
Run maintainer-check on all PO files, not only configured ones The intent is to allow configure --enable-nls=xx for installation speed and size, but have maintainer-check check all source files regardless. 	4e1c72079abcc160e84cdcd879f2dca2a6956dea
----------------------------
If a role has a password expiration date, show that in psql's \du output. Per a suggestion from Euler Taveira, it seems like a good idea to include this information in \du (and \dg) output.  This costs nothing for people who are not using the VALID UNTIL feature, while for those who are, it's rather critical information. Fabrízio de Royes Mello 	04dfc8774966c60e4031ab5d8eeb3263d9568ad3
----------------------------
Fix configure's search for collateindex.pl. PGAC_PATH_COLLATEINDEX supposed that it could use AC_PATH_PROGS to search for collateindex.pl, but that macro will only accept files that are marked executable, and at least some DocBook installations don't mark the script executable (a case the docs Makefile was already prepared for).  Accept the script if it's present and readable in $DOCBOOKSTYLE/bin, and otherwise search the PATH as before. Having fixed that up, we don't need the fallback case that was in the docs Makefile, and instead can throw an understandable error if configure didn't find the script.  Per recent trouble report from John Lumby. 	f2386d7136dacbb8bf59ebbe8e5c5b73db202813
----------------------------
Allow new relmapper entries when allow_system_table_mods is true. This restores the pre-9.0 situation that it's possible to add new indexes on pg_class and other mapped-but-not-shared catalogs, so long as you broke the glass and flipped the big red Dont-Touch-Me switch.  As before, there are a lot of gotchas, and you'd have to be pretty desperate to try this on a production database; but there doesn't seem to be a reason for relmapper.c to be preventing such things all by itself.  Per experimentation with a case suggested by Cody Cutrer. 	f70f095c9096d5e2689e8d79172b37b57a84e51b
----------------------------
In pg_upgrade, remove dependency on pg_config, as that might not be in the non-development install.  Instead, use the LOAD mechanism to check for the pg_upgrade_support shared object, like we do for other shared object checks. Backpatch to 9.1. Report from Àlvaro 	02b183acb42831bbeba819fde568263f19f2acdc
----------------------------
backend: Fix minor memory leak in configuration file processing Just for consistency with the other code paths. found by Coverity 	693ff85d47181fad123ef245cf9c28539cc3db92
----------------------------
Add description for --no-locale and --text-search-config. 	da9e73a137871ab8ebe432ea443193c336bfc81a
----------------------------
Simplify the way changes to full_page_writes are logged. It's harmless to do full page writes even when not strictly necessary, so when turning full_page_writes on, we can set the global flag first, and then call XLogInsert. Likewise, when turning it off, we can write the WAL record first, and then clear the flag. This way XLogInsert doesn't need any special handling of the XLOG_FPW_CHANGE record type. XLogInsert is complicated enough already, so anything we can keep away from there is a good thing. Actually I don't think the atomicity of the shared memory flag matters, anyway, because we only write the XLOG_FPW_CHANGE at the end of recovery, when there are no concurrent WAL insertions going on. But might as well make it safe, in case we allow changing full_page_writes on the fly in the future. 	3b682df3260aa8e020201e4b6c5cbc31fe8ecb8e
----------------------------
Improve documentation around logging_collector and use of stderr. In backup.sgml, point out that you need to be using the logging collector if you want to log messages from a failing archive_command script.  (This is an oversimplification, in that it will work without the collector as long as you're not sending postmaster stderr to /dev/null; but it seems like a good idea to encourage use of the collector to avoid problems with multiple processes concurrently scribbling on one file.) In config.sgml, do some wordsmithing of logging_collector discussion. Per bug #6518 from Janning Vygen 	3f47e145f1869f147a807e5a2cb80d21a13e10ae
----------------------------
Remove TOAST table from pg_database The only toastable column now is datacl, but we don't really support long ACLs anyway.  The TOAST table should have been removed when the pg_db_role_setting catalog was introduced in commit 2eda8dfb52ed9962920282d8384da8bb4c22514d, but I forgot to do that. Per -hackers discussion on March 2011. 	3433c6ba002f711a60352c3518f30cda73d06087
----------------------------
Simplify references to backslash-doubling in func.sgml. Several places were still written as though standard_conforming_strings didn't exist, much less be the default.  Now that it is on by default, we can simplify the text and just insert occasional notes suggesting that you might have to think harder if it's turned off.  Per discussion of a suggestion from Hannes Frederic Sowa. Back-patch to 9.1 where standard_conforming_strings was made the default. 	a5c1a1969dd838189e5cc936c15cb40e13fb6d68
----------------------------
Allow MinGW builds to use standardly-named OpenSSL libraries. In the Fedora variant of MinGW, the openssl libraries have their normal names, not libeay32 and libssleay32.  Adjust configure probes to allow that, per bug #6486. Tomasz Ostrowski 	74e29162a4f0ec0ad1c7224b8be936d1f9a51f7e
----------------------------
Fix pg_test_fsync Win32 problems reported by the build farm;  add comments about the alarm method used on Win32. 	388c2f93254b90921e207bc1cf52e1c8e0f4bba8
----------------------------
Improve fsync documentation by stating that -W _0_ turns of write caching. 	58d746213d3defb84947ff1407e6cb0eabb26f38
----------------------------
Document that the pg_test_fsync defaults allow the program to complete in about 30 seconds. 	ef7a7c81d99c721db6e7d550f3fef3b94737ee94
----------------------------
Change contrib/pg_test_fsync to control tests in terms of seconds per test, rather than a number of test cycles.  Changes -o/cycles option to -s/seconds. 	0a8396e35e2e230da7539372b32968c0d959fba8
----------------------------
Improve labeling of pg_test_fsync open_sync test output. 	2bbd88f8f841b01efb073972b60d4dc1ff1f6fd0
----------------------------
Fix oversight in pg_dump's handling of extension configuration tables. If an extension has not been selected to be dumped (perhaps because of a --schema or --table switch), the contents of its configuration tables surely should not get dumped either.  Per gripe from Hubert Depesz Lubaczewski. 	59de132f9a578ae5d2909228484a61309df986e0
----------------------------
Have pg_receivexlog always send an invalid log position in status messages This prevents pg_basebackup and pg_receivexlog from becoming a synchronous standby in case 'write' is used for synchronous_commit. Fujii Masao 	d7ea9193d18d29bea82b30604cdd087e90c5ee27
----------------------------
Fix up dumping conditions for extension configuration tables. Various filters that were meant to prevent dumping of table data were not being applied to extension config tables, notably --exclude-table-data and --no-unlogged-table-data.  We also would bogusly try to dump data from views, sequences, or foreign tables, should an extension try to claim they were config tables.  Fix all that, and refactor/redocument to try to make this a bit less fragile.  This reverts the implementation, though not the feature, of commit 7b070e896ca835318c90b02c830a5c4844413b64, which had broken config-table dumping altogether :-(. It is still the case that the code will dump config-table data even if --schema is specified.  That behavior was intentional, as per the comments in getExtensionMembership, so I think it requires some more discussion before we change it. 	d77354eaec53ed469a6f2444813ff3a4fd9d7a48
----------------------------
createuser: Disable prompting by default Do not prompt when options were not specified.  Assume --no-createdb, --no-createrole, --no-superuser by default. Also disable prompting for user name in dropdb, unless --interactive was specified. reviewed by Josh Kupershmidt 	a347f96b99741e44276cdd481a72d04f1b2ac5fc
----------------------------
fe-misc.c depends on pg_config_paths.h Declare this in Makefile to avoid failures in parallel compiles. Author: Lionel Elie Mamane 	0c88086df3f79ff48d09440d96be17f3307017ed
----------------------------
"Accept a non-existent value in ""ALTER USER/DATABASE SET ..."" command. When default_text_search_config, default_tablespace, or temp_tablespaces setting is set per-user or per-database, with an ""ALTER USER/DATABASE SET ..."" statement, don't throw an error if the text search configuration or tablespace does not exist. In case of text search configuration, even if it doesn't exist in the current database, it might exist in another database, where the setting is intended to have its effect. This behavior is now the same as search_path's. Tablespaces are cluster-wide, so the same argument doesn't hold for tablespaces, but there's a problem with pg_dumpall: it dumps ""ALTER USER SET ..."" statements before the ""CREATE TABLESPACE"" statements. Arguably that's pg_dumpall's fault - it should dump the statements in such an order that the tablespace is created first and then the ""ALTER USER SET default_tablespace ..."" statements after that - but it seems better to be consistent with search_path and default_text_search_config anyway. Besides, you could still create a dump that throws an error, by creating the tablespace, running ""ALTER USER SET default_tablespace"", then dropping the tablespace and running pg_dumpall on that. Backpatch to all supported versions. "	a5782570402988205b3a42ed40f7bc157eac21fc
----------------------------
Add new replication mode synchronous_commit = 'write'. Replication occurs only to memory on standby, not to disk, so provides additional performance if user wishes to reduce durability level slightly. Adds concept of multiple independent sync rep queues. Fujii Masao and Simon Riggs 	443b4821f1649bc617c5ce1f6f3ffc65842a8930
----------------------------
"Adjustments to regression tests for security_barrier views. Drop the role we create, so regression tests pass even when run more than once against the same cluster, a problem noted by Tom Lane and Jeff Janes.  Also, rename the temporary role so that it starts with ""regress_"", to make it unlikely that we'll collide with an existing role name while running ""make installcheck"", per further gripe from Tom Lane. "	49562f5eb66f31940dd7b64555bbd81bae952387
----------------------------
psql: Add support for tab completion of GRANT/REVOKE role Previously, only GRANT/REVOKE privilege was supported. reviewed by Pavel Stehule 	95c63b5e3209cfc8d91d7956407032fc6fe89640
----------------------------
Allow a user to kill his own queries using pg_cancel_backend() Allows a user to use pg_cancel_queries() to cancel queries in other backends if they are running under the same role. pg_terminate_backend() still requires superuser permissoins. Short patch, many authors working on the bikeshed: Magnus Hagander, Josh Kupershmidt, Edward Muller, Greg Smith. 	0495aaad8b337642830a4d4e82f8b8c02b27b1be
----------------------------
Make the number of CLOG buffers adaptive, based on shared_buffers. Previously, this was hardcoded: we always had 8.  Performance testing shows that isn't enough, especially on big SMP systems, so we allow it to scale up as high as 32 when there's adequate memory.  On the flip side, when shared_buffers is very small, drop the number of CLOG buffers down to as little as 4, so that we can start the postmaster even when very little shared memory is available. Per extensive discussion with Simon Riggs, Tom Lane, and others on pgsql-hackers. 	33aaa139e6302e81b4fbf2570be20188bb974c4f
----------------------------
Add a security_barrier option for views. When a view is marked as a security barrier, it will not be pulled up into the containing query, and no quals will be pushed down into it, so that no function or operator chosen by the user can be applied to rows not exposed by the view.  Views not configured with this option cannot provide robust row-level security, but will perform far better. Patch by KaiGai Kohei; original problem report by Heikki Linnakangas (in October 2009!).  Review (in earlier versions) by Noah Misch and others.  Design advice by Tom Lane and myself.  Further review and cleanup by me. 	0e4611c0234d89e288a53351f775c59522baed7c
----------------------------
include_if_exists facility for config file. This works the same as include, except that an error is not thrown if the file is missing. Instead the fact that it's missing is logged. Greg Smith, reviewed by Euler Taveira de Oliveira. 	6d09b2105fb5fa6e6245e7b024bfbe465b1041ee
----------------------------
Don't leave regress_test_role_super lying around. Fixes an oversight in commit fc6d1006bda783cc002c61a5f072905849dbde4b. Noted by Tom Lane. 	d039fd51f79e9ddde4d692d2b396bdf5722b4c4e
----------------------------
If pg_test_fsync is interrupted, clean up the temp file. Marti Raudsepp, with additional paranoia by me. 	ab7d4213f93f0ef0e45b9b9343725974f196b091
----------------------------
Update information about configuring SysV IPC parameters on NetBSD. Per Emmanuel Kasper, sysctl works fine as of NetBSD 5.0. 	bc9306f4c5e55042e20c8d8b308e573478f26e34
----------------------------
Prevent autovacuum transactions from running in serializable mode. Force the transaction isolation level to READ COMMITTED in autovacuum worker and launcher processes.  There is no benefit to using a higher isolation level, and doing so could result in delaying foreground transactions (or maybe even causing unnecessary serialization failures?). Noted by Dan Ports. Also, make sure we disable zero_damaged_pages and statement_timeout in the autovac launcher, not only workers.  Now that the launcher can run transactions, these settings could affect its behavior, and it seems like the same arguments apply to the launcher as the workers. 	73d1bfd0b567ef9a4439be1510c12c346a064d9e
----------------------------
Suggest configure options for server developers. Greg Smith 	b60f37bf44c248189ed8e4d925cd8e45308d54f8
----------------------------
Improve logging of autovacuum I/O activity This adds some I/O stats to the logging of autovacuum (when the operation takes long enough that log_autovacuum_min_duration causes it to be logged), so that it is easier to tune.  Notably, it adds buffer I/O counts (hits, misses, dirtied) and read and write rate. Authors: Greg Smith and Noah Misch 	9d3b50244357ef4c4e3b6e01f91de599077179c8
----------------------------
Avoid marking buffer dirty when VACUUM has no work to do. When wal_level = 'hot_standby' we touched the last page of the relation during a VACUUM, even if nothing else had happened. That would alter the LSN of the last block and set the mtime of the relation file unnecessarily. Noted by Thom Brown. 	c1458cc495ff800cd176a1c2e56d8b62680d9b71
----------------------------
Remove scandir() requirement in pg_upgrade;  instead just use readdir() --- we were not using the scandir pattern filtering anyway.  This also removes the scandir requirement in configure. 	7012b5edb7f12be9f9d2816bb64fcb80515cc18c
----------------------------
Wakeup WALWriter as needed for asynchronous commit performance. Previously we waited for wal_writer_delay before flushing WAL. Now we also wake WALWriter as soon as a WAL buffer page has filled. Significant effect observed on performance of asynchronous commits by Robert Haas, attributed to the ability to set hint bits on tuples earlier and so reducing contention caused by clog lookups. 	4de82f7d7c50a81ec8e70e2cb0ab413ab9134c0b
----------------------------
Correct documentation for trace_userlocks. 	788cb1c2e8c68d054b7b5bb43f659347acf09278
----------------------------
Revert removal of trace_userlocks, because userlocks aren't gone. This reverts commit 0180bd6180511875db046bf8ddcaa633a2952dfd. contrib/userlock is gone, but user-level locking still exists, and is exposed via the pg_advisory* family of functions. 	71b2b657c034743f81ae7906d7b0fcc8e9a0a6a3
----------------------------
Fix assorted bugs in contrib/unaccent's configuration file parsing. Make it use t_isspace() to identify whitespace, rather than relying on sscanf which is known to get it wrong on some platform/locale combinations. Get rid of fixed-size buffers.  Make it actually continue to parse the file after ignoring a line with untranslatable characters, as was obviously intended. The first of these issues is per gripe from J Smith, though not exactly either of his proposed patches. 	ced3a93ccbbd0a3866f2324662f7a1fa4c31909a
----------------------------
Fix archive_command example The given archive_command example didn't use %p or %f, which wouldn't really work in practice. 	27ef415a716d75de3213cb6bcd6cf20e24eb0f4f
----------------------------
Role membership of superusers is only by explicit membership for HBA. Document that this rule applies to 'samerole' as well as to named roles. Per gripe from Tom Lane. 	f66c8252ab9a64dd49a0af2b481a2621dd008768
----------------------------
Do not treat a superuser as a member of every role for HBA purposes. This makes it possible to use reject lines with group roles. Andrew Dunstan, reviewd by Robert Haas. 	94cd0f1ad8af722a48a30a1087377b52ca99d633
----------------------------
Refactor xlog.c to create src/backend/postmaster/startup.c Startup process now has its own dedicated file, just like all other special/background processes. Reduces role and size of xlog.c 	9aceb6ab3c202a5bf00d5f00436bb6ad285fc0bf
----------------------------
Split work of bgwriter between 2 processes: bgwriter and checkpointer. bgwriter is now a much less important process, responsible for page cleaning duties only. checkpointer is now responsible for checkpoints and so has a key role in shutdown. Later patches will correct doc references to the now old idea that bgwriter performs checkpoints. Has beneficial effect on performance at high write rates, but mainly refactoring to more easily allow changes for power reduction by simplifying previously tortuous code around required to allow page cleaning and checkpointing to time slice in the same process. Patch by me, Review by Dickson Guedes 	806a2aee3791244bf0f916729bfdb5489936e068
----------------------------
De-parallelize ecpg build some more. Make sure ecpg/include/ is rebuilt before the other subdirectories, so that ecpg_config.h is up to date.  This is not likely to matter during production builds, only development, so no back-patch. 	74812624f263a58789e894a643161c9148112f62
----------------------------
Implement streaming xlog for backup tools Add option for parallel streaming of the transaction log while a base backup is running, to get the logfiles before the server has removed them. Also add a tool called pg_receivexlog, which streams the transaction log into files, creating a log archive without having to wait for segments to complete, thus decreasing the window of data loss without having to waste space using archive_timeout. This works best in combination with archive_command - suggested usage docs etc coming later. 	d9bae5317300cf983dd9f01cc2e561c0eecd109a
----------------------------
Support configurable eventlog application names on Windows This allows different instances to use the eventlog with different identifiers, by setting the event_source GUC, similar to how syslog_ident works. Original patch by MauMau, heavily modified by Magnus Hagander 	d8ea33f2c02721c89c2434b9fda170afb7fe4999
----------------------------
Code review for pgstat_get_crashed_backend_activity patch. Avoid possibly dumping core when pgstat_track_activity_query_size has a less-than-default value; avoid uselessly searching for the query string of a successfully-exited backend; don't bother putting out an ERRDETAIL if we don't have a query to show; some other minor stylistic improvements. 	f9c92a5a3ead738c7de0dffa203a92b4d2fec413
----------------------------
Reject empty pg_hba.conf files. An empty HBA file is surely an error, since it means there is no way to connect to the server.  We've not heard identifiable reports of people actually doing that, but this will also close off the case Thom Brown just complained of, namely pointing hba_file at a directory.  (On at least some platforms with some directories, it will read as an empty file.) Perhaps this should be back-patched, but given the lack of previous complaints, I won't add extra work for the translators. 	e27f52f3a1814e646733f51b8c24547371bef3eb
----------------------------
Dump all roles first, then all config settings on roles. This way, if a role's config setting uses the name of another role, the validity of the dump isn't dependent on the order in which those two roles are dumped. Code by Phil Sorber, comment by me. 	dea95c7a7beb5ef66ce89269dd0e84d0c26e5523
----------------------------
"Remove all ""traces"" of trace_userlocks, because userlocks were removed in PG 8.2. "	0180bd6180511875db046bf8ddcaa633a2952dfd
----------------------------
"Make the reference to ""CREATE USER"" in the CREATE ROLE page a link. This might help to avoid confusion between the CREATE USER command, and the deprecated CREATEUSER option to CREATE ROLE, as per a recent complaint from Ron Adams.  At any rate, having a cross-link here seems like a good idea; two commands that are so similar should reference each other. "	5b9102cef2edcc621daef423d42969b517359136
----------------------------
Mark GUC external_pid_file's default as '' in postgresql.conf, rather than '(none)'. 	e26d5fcd94d11c3f367ab5fbe246c0288cc9eb44
----------------------------
In pg_upgrade, add -o/-O options to pass parameters to the servers, and document its use for config-only directory installs. 	0dc3f57ba0aa9a99308d3d097eeb2cbcbd5fb52c
----------------------------
Revert accidental change to pg_config_manual.h. This was broken in commit 53dbc27c62d8e1b6c5253feba04a5094cb8fe046, which introduced unlogged tables.  Fortunately, as debugging tools go, this one is pretty cheap, which is probably why it took nine months for someone to notice, but it's not intended to be enabled by default, so revert. Noted by Fujii Masao. 	c980426c69ae76b04aa9de010027438457aeaa7f
----------------------------
Prevent index-only scans in stats regression test. This bollixes the test because it's expecting to see the idx_tup_fetch counter increase, which won't happen if heap fetches were avoided by use of an index-only scan.  Per buildfarm results. While at it, let's just make sure that enable_seqscan and enable_indexscan are ON for this test ... 	45401c1c25fe1ef14bf68089de86bcb5cce9f453
----------------------------
"Don't let transform_null_equals=on affect CASE foo WHEN NULL ... constructs. transform_null_equals is only supposed to affect ""foo = NULL"" expressions given directly by the user, not the internal ""foo = NULL"" expression generated from CASE-WHEN. This fixes bug #6242, reported by Sergey. Backpatch to all supported branches. "	1ef60dab7049ffac52dee60b5788b6c7bc1f9d67
----------------------------
In pg_upgrade, use the new postmaster -C option to get the real data directory, for config-only directory installs.  Only works for PG 9.2+ servers. 	caa1054df8408b165e5f66ff25c87b6dd0a0a1e7
----------------------------
Add postmaster -C option to query configuration parameters, and have pg_ctl use that to query the data directory for config-only installs. This fixes awkward or impossible pg_ctl operation for config-only installs. 	aaa6e1def292cdacb6b27088898793b1b879fedf
----------------------------
Improve and simplify CREATE EXTENSION's management of GUC variables. CREATE EXTENSION needs to transiently set search_path, as well as client_min_messages and log_min_messages.  We were doing this by the expedient of saving the current string value of each variable, doing a SET LOCAL, and then doing another SET LOCAL with the previous value at the end of the command.  This is a bit expensive though, and it also fails badly if there is anything funny about the existing search_path value, as seen in a recent report from Roger Niederland.  Fortunately, there's a much better way, which is to piggyback on the GUC infrastructure previously developed for functions with SET options.  We just open a new GUC nesting level, do our assignments with GUC_ACTION_SAVE, and then close the nesting level when done.  This automatically restores the prior settings without a re-parsing pass, so (in principle anyway) there can't be an error.  And guc.c still takes care of cleanup in event of an error abort. The CREATE EXTENSION code for this was modeled on some much older code in ri_triggers.c, which I also changed to use the better method, even though there wasn't really much risk of failure there.  Also improve the comments in guc.c to reflect this additional usage. 	ba6f629326be365a3124dc80aa5d303e2b0bf46b
----------------------------
Improve define_custom_variable's handling of pre-existing settings. Arrange for any problems with pre-existing settings to be reported as WARNING not ERROR, so that we don't undesirably abort the loading of the incoming add-on module.  The bad setting is just discarded, as though it had never been applied at all.  (This requires a change in the API of set_config_option.  After some thought I decided the most potentially useful addition was to allow callers to just pass in a desired elevel.) Arrange to restore the complete stacked state of the variable, rather than cheesily reinstalling only the active value.  This ensures that custom GUCs will behave unsurprisingly even when the module loading operation occurs within nested subtransactions that have changed the active value.  Since a module load could occur as a result of, eg, a PL function call, this is not an unlikely scenario. 	41e461d36fb1ef78494429f28ea4b72c759f419d
----------------------------
Remove the custom_variable_classes parameter. This variable provides only marginal error-prevention capability (since it can only check the prefix of a qualified GUC name), and the consensus is that that isn't worth the amount of hassle that maintaining the setting creates for DBAs.  So, let's just remove it. With this commit, the system will silently accept a value for any qualified GUC name at all, whether it has anything to do with any known extension or not.  (Unqualified names still have to match known built-in settings, though; and you will get a WARNING at extension load time if there's an unrecognized setting with that extension's prefix.) There's still some discussion ongoing about whether to tighten that up and if so how; but if we do come up with a solution, it's not likely to look anything like custom_variable_classes. 	1a00c0ef5368bb7b8ddcb3cf279df36577918ac4
----------------------------
"Restructure error handling in reading of postgresql.conf. This patch has two distinct purposes: to report multiple problems in postgresql.conf rather than always bailing out after the first one, and to change the policy for whether changes are applied when there are unrelated errors in postgresql.conf. Formerly the policy was to apply no changes if any errors could be detected, but that had a significant consistency problem, because in some cases specific values might be seen as valid by some processes but invalid by others.  This meant that the latter processes would fail to adopt changes in other parameters even though the former processes had done so. The new policy is that during SIGHUP, the file is rejected as a whole if there are any errors in the ""name = value"" syntax, or if any lines attempt to set nonexistent built-in parameters, or if any lines attempt to set custom parameters whose prefix is not listed in (the new value of) custom_variable_classes.  These tests should always give the same results in all processes, and provide what seems a reasonably robust defense against loading values from badly corrupted config files.  If these tests pass, all processes will apply all settings that they individually see as good, ignoring (but logging) any they don't. In addition, the postmaster does not abandon reading a configuration file after the first syntax error, but continues to read the file and report syntax errors (up to a maximum of 100 syntax errors per file). The postmaster will still refuse to start up if the configuration file contains any errors at startup time, but these changes allow multiple errors to be detected and reported before quitting. Alexey Klyukin, reviewed by Andy Colson and av (Alexander ?) with some additional hacking by Tom Lane "	d56b3afc0376afe491065d9eca6440b3cc7b1346
----------------------------
"Take sepgsql regression tests out of the regular regression test mechanism. Because these tests require root privileges, not to mention invasive changes to the security configuration of the host system, it's not reasonable for them to be invoked by a regular ""make check"" or ""make installcheck"".  Instead, dike out the Makefile's knowledge of the tests, and change chkselinuxenv (now renamed ""test_sepgsql"") into a script that verifies the environment is workable and then runs the tests.  It's expected that test_sepgsql will only be run manually. While at it, do some cleanup in the error checking in the script, and do some wordsmithing in the documentation. "	cc4ff8742b99d3b20a52f529d03bbe802f4b0053
----------------------------
Recognize self-contradictory restriction clauses for non-table relations. The constraint exclusion feature checks for contradictions among scan restriction clauses, as well as contradictions between those clauses and a table's CHECK constraints.  The first aspect of this testing can be useful for non-table relations (such as subqueries or functions-in-FROM), but the feature was coded with only the CHECK case in mind so we were applying it only to plain-table RTEs.  Move the relation_excluded_by_constraints call so that it is applied to all RTEs not just plain tables.  With the default setting of constraint_exclusion this results in no extra work, but with constraint_exclusion = ON we will detect optimizations that we missed before (at the cost of more planner cycles than we expended before). Per a gripe from Gunnlaugur Þór Briem.  Experimentation with his example also showed we were not being very bright about the case where constraint exclusion is proven within a subquery within UNION ALL, so tweak the code to allow set_append_rel_pathlist to recognize such cases. 	7741dd6590073719688891898e85f0cb73453159
----------------------------
synchronous_commit is an enum not a boolean. Jaime Casanova 	e5e2f7b0546c0409323af262bdd17a8e19ca3836
----------------------------
In the manual section on primary_conninfo, recommend using a role with REPLICATION privileges, not SUPERUSER. Fujii Masao 	76df369c060695edaed5b9502f85e7a3e07f8b1f
----------------------------
Simplify handling of the timezone GUC by making initdb choose the default. We were doing some amazingly complicated things in order to avoid running the very expensive identify_system_timezone() procedure during GUC initialization.  But there is an obvious fix for that, which is to do it once during initdb and have initdb install the system-specific default into postgresql.conf, as it already does for most other GUC variables that need system-environment-dependent defaults.  This means that the timezone (and log_timezone) settings no longer have any magic behavior in the server. Per discussion. 	ca4af308c32d03db5fbacb54d6e583ceb904f268
----------------------------
"Guard against using plperl's Makefile without specifying --with-perl. The $(PERL) macro will be set by configure if it finds perl at all, but $(perl_privlibexp) isn't configured unless you said --with-perl. This results in confusing error messages if someone cd's into src/pl/plperl and tries to build there despite the configure omission, as reported by Tomas Vondra in bug #6198.  Add simple checks to provide a more useful report, while not disabling other use of the makefile such as ""make clean"". Back-patch to 9.0, which is as far as the patch applies easily. "	6a24742c1a1bd04c02da24c4739811b068a84367
----------------------------
"Fix typo in pg_srand48 (srand48 in older branches). "">"" should be "">>"".  This typo results in failure to use all of the bits of the provided seed. This might rise to the level of a security bug if we were relying on srand48 for any security-critical purposes, but we are not --- in fact, it's not used at all unless the platform lacks srandom(), which is improbable.  Even on such a platform the exposure seems minimal. Reported privately by Andres Freund. "	48e4b8dc08ea7ec0cc7cd8e5001f8a29e1c0b987
----------------------------
Add archive_command example 	42ad992fdc25fa69db03ff242216f6712da2c56a
----------------------------
In ecpglib restore LC_NUMERIC in case of an error. 	63d06ef59156719efd0208c62e764a69611b3f12
----------------------------
"setlocale() on Windows doesn't work correctly if the locale name contains dots. I previously worked around this in initdb, mapping the known problematic locale names to aliases that work, but Hiroshi Inoue pointed out that that's not enough because even if you use one of the aliases, like ""Chinese_HKG"", setlocale(LC_CTYPE, NULL) returns back the long form, ie. ""Chinese_Hong Kong S.A.R."". When we try to restore an old locale value by passing that value back to setlocale(), it fails. Note that you are affected by this bug also if you use one of those short-form names manually, so just reverting the hack in initdb won't fix it. To work around that, move the locale name mapping from initdb to a wrapper around setlocale(), so that the mapping is invoked on every setlocale() call. Also, add a few checks for failed setlocale() calls in the backend. These calls shouldn't fail, and if they do there isn't much we can do about it, but at least you'll get a warning. Backpatch to 9.1, where the initdb hack was introduced. The Windows bug affects older versions too if you set locale manually to one of the aliases, but given the lack of complaints from the field, I'm hesitent to backpatch. "	a88b6e4cfbff9802906dd400ef334ffa49e7f286
----------------------------
Include $cc_string in the info reported by a configure run. Without this, it's not very easy to tell which compiler version a buildfarm animal is actually using at the moment. 	2c5d6f1fb570db1a287532d3291d284710e756bf
----------------------------
Adjust CREATE DOMAIN example for standard_conforming_strings=on. Noted by Hitoshi Harada. 	6fc726adac3001f8e1f3215ad4c874f58cd7f445
----------------------------
Explain max_prepared_transactions requirement in isolation tests' README. Now that we have a test that requires nondefault settings to pass, it seems like we'd better mention that detail in the directions about how to run the tests. Also do some very minor copy-editing. 	11c88e59a60b2096ab42fa7cf9bff542717ec1e0
----------------------------
"Add an SSI regression test that tests all interesting permutations in the order of begin, prepare, and commit of three concurrent transactions that have conflicts between them. The test runs for a quite long time, and the expected output file is huge, but this test caught some serious bugs during development, so seems worthwhile to keep. The test uses prepared transactions, so it fails if the server has max_prepared_transactions=0. Because of that, it's marked as ""ignore"" in the schedule file. Dan Ports "	af35737313f92fcbe227baf51bb69b8650acc41a
----------------------------
Improve detection of Python 3.2 installations Because of ABI tagging, the library version number might no longer be exactly the Python version number, so do extra lookups.  This affects installations without a shared library, such as ActiveState's installer. Also update the way to detect the location of the 'config' directory, which can also be versioned. Ashesh Vashi 	f8c2029ef0bf83ceb2bb10ee28362305cfa9cdf2
----------------------------
Remove wal_sender_delay GUC, because it's no longer useful. The latch infrastructure is now capable of detecting all cases where the walsender loop needs to wake up, so there is no reason to have an arbitrary timeout. Also, modify the walsender loop logic to follow the standard pattern of ResetLatch, test for work to do, WaitLatch.  The previous coding was both hard to follow and buggy: it would sometimes busy-loop despite having nothing available to do, eg between receipt of a signal and the next time it was caught up with new WAL, and it also had interesting choices like deciding to update to WALSNDSTATE_STREAMING on the strength of information known to be obsolete. 	cff75130b5f63e45423c2ed90d6f2e84c21ef840
----------------------------
Change the autovacuum launcher to use WaitLatch instead of a poll loop. In pursuit of this (and with the expectation that WaitLatch will be needed in more places), convert the latch field that was already added to PGPROC for sync rep into a generic latch that is activated for all PGPROC-owning processes, and change many of the standard backend signal handlers to set that latch when a signal happens.  This will allow WaitLatch callers to be wakened properly by these signals. In passing, fix a whole bunch of signal handlers that had been hacked to do things that might change errno, without adding the necessary save/restore logic for errno.  Also make some minor fixes in unix_latch.c, and clean up bizarre and unsafe scheme for disowning the process's latch.  Much of this has to be back-patched into 9.1. Peter Geoghegan, with additional work by Tom 	4dab3d5ae1498eb4246e54225a48cf667ab693da
----------------------------
Correct the lie in pg_config.h.win32 about having inttypes.h. This lie has been harmless until now, but has been exposed by the change to include postgres.h before the python headers, which in some versions include inttypes.h if HAVE_INTTYPES_H is set. 	f54e373d93f72d87ce2cafd7373bd7b0534b2065
----------------------------
Fix thinko in documentation of local_preload_libraries. Somebody added a cross-reference to shared_preload_libraries, but wrote the wrong variable name when they did it (and didn't bother to make it a link either). Spotted by Christoph Anton Mitterer. 	ffcf5a6c41ce91c55991b04eea1fcb94e4d0faa0
----------------------------
Fix markup for recent wal_level clarification. Backpatch to 9.1 and 9.0. 	4262e61d6424a38150f125b612fd900267718148
----------------------------
In documentaiton, clarify which commands have reduced WAL volume for wal_level = minimum. Backpatch to 9.1 and 9.0. 	38de5aad54b3eb37981cacd391fcde82f86d00fb
----------------------------
Fix pg_restore's direct-to-database mode for standard_conforming_strings. pg_backup_db.c contained a mini SQL lexer with which it tried to identify boundaries between SQL commands, but that code was not designed to cope with standard_conforming_strings, and would get the wrong answer if a backslash immediately precedes a closing single quote in such a string, as per report from Julian Mehnle.  The bug only affects direct-to-database restores from archive files made with standard_conforming_strings = on. Rather than complicating the code some more to try to fix that, let's just rip it all out.  The only reason it was needed was to cope with COPY data embedded into ordinary archive entries, which was a layout that was used only for about the first three weeks of the archive format's existence, and never in any production release of pg_dump.  Instead, just rely on the archive file layout to tell us whether we're printing COPY data or not. This bug represents a data corruption hazard in all releases in which standard_conforming_strings can be turned on, ie 8.2 and later, so back-patch to all supported branches. 	6545a901aaf84cb05212bb6a7674059908f527c3
----------------------------
Check to see whether libxml2 handles error context the way we expect. It turns out to be possible to link against a libxml2.so that does this differently than the version we configured and built against, so we need a runtime check to avoid bizarre behavior.  Per report from Bernd Helmle. Patch by Florian Pflug. 	c1420fcf7d9e899b3378e25f5e21776f6461b4a4
----------------------------
"Change EDITOR_LINENUMBER_SWITCH to an environment variable Also change ""switch"" to ""arg"" because ""switch"" is a bit of a sloppy term.  So the environment variable is called PSQL_EDITOR_LINENUMBER_ARG.  Set ""+"" as hardcoded default value on Unix (since ""vi"" is the hardcoded default editor), so many users won't have to configure this at all.  Move the documentation around a bit to centralize the editor configuration under environment variables, rather than repeating bits of it under every backslash command that invokes an editor. "	79b3ca06d820032ad84446e0a021b56422172d86
----------------------------
"Support SECURITY LABEL on databases, tablespaces, and roles. This requires a new shared catalog, pg_shseclabel. Along the way, fix the security_label regression tests so that they don't monkey with the labels of any pre-existing objects.  This is unlikely to matter in practice, since only the label for the ""dummy"" provider was being manipulated.  But this way still seems cleaner. KaiGai Kohei, with fairly extensive hacking by me. "	463f2625a5fb183b6a8925ccde98bb3889f921d9
----------------------------
Make isolationtester more robust on locked commands Noah Misch diagnosed the buildfarm problems in the isolation tests partly as failure to differentiate backends properly; the old code was using backend IDs, which is not good enough because a new backend might use an already used ID.  Use PIDs instead. Also, the code was purposely careless about other concurrent activity, because it isn't expected; and in fact, it doesn't affect the vast majority of the time.  However, it can be observed that autovacuum can block tables for long enough to cause sporadic failures.  The new code accounts for that by ignoring locks held by processes not explicitly declared in our spec file. Author: Noah Misch 	c8dfc892327b1a1e14efe110b0f1f267ef56c7a9
----------------------------
Increase deadlock_timeout to 100ms in FK isolation tests The previous value of 20ms is dangerously close to the time actually spent just waiting for the deadlock to happen, so on occasion it causes the test to fail simply because the other session didn't get to run early enough, not managing to cause the deadlock that needs to be detected.  With this new value, it's expected that most machines on normal load will be able to pass the test. Author: Noah Misch 	d6db0e4e0e382cd5683a767424d05a0361af232a
----------------------------
Cascading replication feature for streaming log-based replication. Standby servers can now have WALSender processes, which can work with either WALReceiver or archive_commands to pass data. Fully updated docs, including new conceptual terms of sending server, upstream and downstream servers. WALSenders terminated when promote to master. Fujii Masao, review, rework and doc rewrite by Simon Riggs 	5286105800c7d5902f98f32e11b209c471c0c69c
----------------------------
Set different deadlock_timeout on each session in new isolation tests This provides deterministic deadlock-detection ordering for new isolation tests, fixing the sporadic failures in them. Author: Noah Misch 	d71197cd35db0b0e66120f37443be6a5dfc2669d
----------------------------
Fix another oversight in logging of changes in postgresql.conf settings. We were using GetConfigOption to collect the old value of each setting, overlooking the possibility that it didn't exist yet.  This does happen in the case of adding a new entry within a custom variable class, as exhibited in bug #6097 from Maxim Boguk. To fix, add a missing_ok parameter to GetConfigOption, but only in 9.1 and HEAD --- it seems possible that some third-party code is using that function, so changing its API in a minor release would cause problems. In 9.0, create a near-duplicate function instead. 	9d522cb35d8b4f266abadd0d019f68eb8802ae05
----------------------------
Update examples for string-related functions. In the example for decode(), show the bytea result in hex format, since that's now the default.  Use an E'' string in the example for quote_literal(), so that it works regardless of the standard_conforming_strings setting.  On the functions-for-binary-strings page, leave the examples as-is for readability, but add a note pointing out that they are shown in escape format.  Per comments from Thom Brown. Also, improve the description for encode() and decode() a tad. Backpatch to 9.0, where bytea_output was introduced. 	c59b8ba6cd48e0fc0c1be8d86d4a19e7bf37d7e0
----------------------------
"Reclassify replication-related GUC variables as ""master"" and ""standby"". Per discussion, this structure seems more understandable than what was there before.  Make config.sgml and postgresql.conf.sample agree. In passing do a bit of editorial work on the variable descriptions. "	60a81ad13374265cf9aecdc72daecd0410936779
----------------------------
"Remove silent_mode. You get the same functionality with ""pg_ctl -l postmaster.log"", or nohup. There was a small issue with LINUX_OOM_ADJ and silent_mode, namely that with silent_mode the postmaster process incorrectly used the OOM settings meant for backend processes. We certainly could've fixed that directly, but since silent_mode was redundant anyway, we might as well just remove it. "	f7ea6beaf4ca02b8e6dc576255e35a5b86035cb9
----------------------------
Fix omissions in documentation of the pg_roles view. Somehow, column rolconfig got removed from the documentation of the pg_roles view in the 9.0 cycle, although the column is actually still there.  In 9.1, we'd also forgotten to document the rolreplication column. Spotted by Sakamoto Masahiko. 	4fa046a39ebdaf4c9191ffff8a57b0759c52f3f3
----------------------------
"Make distprep and *clean build targets recurse into all subdirectories. Certain subdirectories do not get built if corresponding options are not selected at configure time.  However, ""make distprep"" should visit such directories anyway, so that constructing derived files to be included in the tarball happens without requiring all configure options to be given in the tarball build script.  Likewise, it's better if cleanup actions unconditionally visit all directories (for example, this ensures proper cleanup if someone has done a manual make in such a subdirectory). To handle this, set up a convention that subdirectories that are conditionally included in SUBDIRS should be added to ALWAYS_SUBDIRS instead when they are excluded. Back-patch to 9.1, so that plpython's spiexceptions.h will get provided in 9.1 tarballs.  There don't appear to be any instances where distprep actions got missed in previous releases, and anyway this fix requires gmake 3.80 so we don't want to apply it before 9.1. "	acb9198b960caaa2fe9f31258116eaa7c1154093
----------------------------
Enable CHECK constraints to be declared NOT VALID This means that they can initially be added to a large existing table without checking its initial contents, but new tuples must comply to them; a separate pass invoked by ALTER TABLE / VALIDATE can verify existing data and ensure it complies with the constraint, at which point it is marked validated and becomes a normal part of the table ecosystem. An non-validated CHECK constraint is ignored in the planner for constraint_exclusion purposes; when validated, cached plans are recomputed so that partitioning starts working right away. This patch also enables domains to have unvalidated CHECK constraints attached to them as well by way of ALTER DOMAIN / ADD CONSTRAINT / NOT VALID, which can later be validated with ALTER DOMAIN / VALIDATE CONSTRAINT. Thanks to Thom Brown, Dean Rasheed and Jaime Casanova for the various reviews, and Robert Hass for documentation wording improvement suggestions. This patch was sponsored by Enova Financial. 	897795240cfaaed724af2f53ed2c50c9862f951f
----------------------------
Remove redundant DEF_PGPORT handling DEF_PGPORT already comes in from pg_config.h, so we don't need to pass it in again with a -D option.  Apparently a leftover from the shell script conversion. 	4635d3c527916555773a6eb128fb4a410d585d9d
----------------------------
Add information schema views role_udt_grants, udt_privileges, user_defined_types 	d34e142c511c779a294ce96eee0e9ab535b24de3
----------------------------
Make deadlock_timeout PGC_SUSET rather than PGC_SIGHUP. This allows deadlock_timeout to be reduced for transactions that are particularly likely to be involved in a deadlock, thus detecting it more quickly.  It is also potentially useful as a poor-man's deadlock priority mechanism: a transaction with a high deadlock_timeout is less likely to be chosen as the victim than one with a low deadlock_timeout.  Since that could be used to game the system, we make this PGC_SUSET rather than PGC_USERSET. At some point, it might be worth thinking about a more explicit priority mechanism, since using this is far from fool-proof.  But let's see whether there's enough use case to justify the additional work before we go down that route. Noah Misch, reviewed by Shigeru Hanada 	7095003cbef630fe29c2299cc819fd37c691d0b0
----------------------------
Adjust the alternative expected output file for prepared_xacts test case, used when max_prepared_transactions=0, for the recent changes in the test case. 	38c0e7218065d9be47b16f2b36264bcefbabd046
----------------------------
Make external_pid_file world readable 	223d14a984e677823bd4f865ff22e14dd3fe9b76
----------------------------
"Don't use ""cp -i"" in the example WAL archive_command. This is a dangerous example to provide because on machines with GNU cp, it will silently do the wrong thing and risk archive corruption.  Worse, during the 9.0 cycle somebody ""improved"" the discussion by removing the warning that used to be there about that, and instead leaving the impression that the command would work as desired on most Unixen. It doesn't.  Try to rectify the damage by providing an example that is safe most everywhere, and then noting that you can try cp -i if you want but you'd better test that. In back-patching this to all supported branches, I also added an example command for Windows, which wasn't provided before 9.0. "	a2624c687db3a3edcf5995773e47e9fef3e62a8c
----------------------------
Respect Hot Standby controls while recycling btree index pages. Btree pages were recycled after VACUUM deletes all records on a page and then a subsequent VACUUM occurs after the RecentXmin horizon is reached. Using RecentXmin meant that we did not respond correctly to the user controls provide to avoid Hot Standby conflicts and so spurious conflicts could be generated in some workload combinations. We now reuse pages only when we reach RecentGlobalXmin, which can be much later in the presence of long running queries and is also controlled by vacuum_defer_cleanup_age and hot_standby_feedback. Noah Misch and Simon Riggs 	758bd2a433d64bed00ca084203b3e5ccfdea4499
----------------------------
Fix failure to account for memory used by tuplestore_putvalues(). This oversight could result in a tuplestore using much more than the intended amount of memory.  It would only happen in a code path that loaded a tuplestore via tuplestore_putvalues(), and many of those won't emit huge amounts of data; but cases such as holdable cursors and plpgsql's RETURN NEXT command could have the problem.  The fix ensures that the tuplestore will switch to write-to-disk mode when it overruns work_mem. The potential overrun was finite, because we would still count the space used by the tuple pointer array, so the tuplestore code would eventually flip into write-to-disk mode anyway.  When storing wide tuples we would go far past the expected work_mem usage before that happened; but this may account for the lack of prior reports. Back-patch to 8.4, where tuplestore_putvalues was introduced. Per bug #6061 from Yann Delorme. 	10db3de66eb226e9aed32e789abd532c41f0f471
----------------------------
Add doc cross-reference to search_path discussion of current_schemas(). Brendan Jurd 	2a890421424da5cca4226ee8afd562c356205815
----------------------------
Document GUC context for synchronous_standby_names/hot_standby_feedback. Fujii Masao 	dfe8ec3ab9a39cd50774036632f9f645b567eea3
----------------------------
Make citext's equality and hashing functions collation-insensitive. This is an ugly hack to get around the fact that significant parts of the core backend assume they don't need to worry about passing collation to equality and hashing functions.  That's true for the core string datatypes, but citext should ideally have equality behavior that depends on the specified collation's LC_CTYPE.  However, there's no chance of fixing the core before 9.2, so we'll have to live with this compromise arrangement for now.  Per bug #6053 from Regina Obe. The code changes in this commit should be reverted in full once the core code is up to speed, but be careful about reverting the docs changes: I fixed a number of obsolete statements while at it. 	3ebc061c18fcf9447977d232280793e27baf71ff
----------------------------
"Fix VACUUM so that it always updates pg_class.reltuples/relpages. When we added the ability for vacuum to skip heap pages by consulting the visibility map, we made it just not update the reltuples/relpages statistics if it skipped any pages.  But this could leave us with extremely out-of-date stats for a table that contains any unchanging areas, especially for TOAST tables which never get processed by ANALYZE.  In particular this could result in autovacuum making poor decisions about when to process the table, as in recent report from Florian Helmberger.  And in general it's a bad idea to not update the stats at all.  Instead, use the previous values of reltuples/relpages as an estimate of the tuple density in unvisited pages.  This approach results in a ""moving average"" estimate of reltuples, which should converge to the correct value over multiple VACUUM and ANALYZE cycles even when individual measurements aren't very good. This new method for updating reltuples is used by both VACUUM and ANALYZE, with the result that we no longer need the grotty interconnections that caused ANALYZE to not update the stats depending on what had happened in the parent VACUUM command. Also, fix the logic for skipping all-visible pages during VACUUM so that it looks ahead rather than behind to decide what to do, as per a suggestion from Greg Stark.  This eliminates useless scanning of all-visible pages at the start of the relation or just after a not-all-visible page.  In particular, the first few pages of the relation will not be invariably included in the scanned pages, which seems to help in not overweighting them in the reltuples estimate. Back-patch to 8.4, where the visibility map was introduced. "	b4b6923e03f4d29636a94f6f4cc2f5cf6298b8c8
----------------------------
Correct description of log_connections and log_disconnections The previous claim when these parameters could be changed was incorrect. Fujii Masao 	cb0defe5230f3773feb334a01b990c9eaaca301b
----------------------------
Check the return code of pthread_create(). Otherwise we go into an infinite loop if it fails, which is what what happened on my HP-UX box. (I think the reason it failed on that box is a misconfiguration on my behalf, but that's no reason to hang.) 	336db7e3474508b46a0e6bdb013a8bee5aac9adf
----------------------------
"Adjust configure to use ""+Olibmerrno"" with HP-UX C compiler, if possible. This is reported to be necessary on some versions of that OS.  In service of this, cause PGAC_PROG_CC_CFLAGS_OPT to reject switches that result in compiler warnings, since on yet other versions of that OS, the switch does nothing except provoke a warning. Report and patch by Ibrar Ahmed, further tweaking by me. "	44404f394517f89a0bebb1aaace6e64ad79d2817
----------------------------
Adjust configure's probe for libselinux so it rejects too-old versions. We need at least version 2.0.93, so probe for a function that was added in that version. Kaigai Kohei 	8ff1f6a78c4fb48337f671f1586839cef5d4b940
----------------------------
"Install defenses against overflow in BuildTupleHashTable(). The planner can sometimes compute very large values for numGroups, and in cases where we have no alternative to building a hashtable, such a value will get fed directly to BuildTupleHashTable as its nbuckets parameter. There were two ways in which that could go bad.  First, BuildTupleHashTable declared the parameter as ""int"" but most callers were passing ""long""s, so on 64-bit machines undetected overflow could occur leading to a bogus negative value.  The obvious fix for that is to change the parameter to ""long"", which is what I've done in HEAD.  In the back branches that seems a bit risky, though, since third-party code might be calling this function. So for them, just put in a kluge to treat negative inputs as INT_MAX. Second, hash_create can go nuts with extremely large requested table sizes (notably, my_log2 becomes an infinite loop for inputs larger than LONG_MAX/2).  What seems most appropriate to avoid that is to bound the initial table size request to work_mem. This fixes bug #6035 reported by Daniel Schreiber.  Although the reported case only occurs back to 8.4 since it involves WITH RECURSIVE, I think it's a good idea to install the defenses in all supported branches. "	299d1716525c659f0e02840e31fbe4dea3cc796c
----------------------------
Update config.guess and config.sub 	8d8954938094744ef4cab9d6f45f8e9e8abeb58f
----------------------------
Consistent spacing for lengthy error messages Also, we removed the display of the current value of max_connections/MaxBackends from some messages earlier, because it was confusing, so do that in the remaining one as well. 	bb46d42859f62d5fbe8a8b55690643cba65e106c
----------------------------
"Split PGC_S_DEFAULT into two values, for true boot_val vs computed default. Failure to distinguish these cases is the real cause behind the recent reports of Windows builds crashing on 'infinity'::timestamp, which was directly due to failure to establish a value of timezone_abbreviations in postmaster child processes.  The postmaster had the desired value, but write_one_nondefault_variable() didn't transmit it to backends. To fix that, invent a new value PGC_S_DYNAMIC_DEFAULT, and be sure to use that or PGC_S_ENV_VAR (as appropriate) for ""default"" settings that are computed during initialization.  (We need both because there's at least one variable that could receive a value from either source.) This commit also fixes ProcessConfigFile's failure to restore the correct default value for certain GUC variables if they are set in postgresql.conf and then removed/commented out of the file.  We have to recompute and reinstall the value for any GUC variable that could have received a value from PGC_S_DYNAMIC_DEFAULT or PGC_S_ENV_VAR sources, and there were a number of oversights.  (That whole thing is a crock that needs to be redesigned, but not today.) However, I intentionally didn't make it work ""exactly right"" for the cases of timezone and log_timezone.  The exactly right behavior would involve running select_default_timezone, which we'd have to do independently in each postgres process, causing the whole database to become entirely unresponsive for as much as several seconds.  That didn't seem like a good idea, especially since the variable's removal from postgresql.conf might be just an accidental edit.  Instead the behavior is to adopt the previously active setting as if it were default. Note that this patch creates an ABI break for extensions that use any of the PGC_S_XXX constants; they'll need to be recompiled. "	e05b866447899211a0c2df31bf0671faac4fc3e5
----------------------------
Be more explicit about the meaning of the change in standard_conforming_strings. 	ea964a451e51a32b71d004d261874adb1e135066
----------------------------
Put pg_test_fsync --help and --version output in line with conventions Foremost, it should go to stdout. 	3a8dcd9a1f9bbe36478995b22de40967c0610149
----------------------------
"Adjust documentation with respect to ""unknown"" timezone setting. The recent cleanup of GUC assign hooks got rid of the kludge of using ""unknown"" as a magic value for timezone and log_timezone.  But I forgot to update the documentation to match, as noted by Martin Pitt. "	1453cd8f82139a3e751c617dc6635f7b1c7abe14
----------------------------
Add C comment about the fact that the autovacuum limit can go backwards by 3, but that is it OK. 	76e5b4c85d5d4830888044fc885b1da0d781aed0
----------------------------
"Fix some portability issues in isolation regression test driver. Remove random system #includes in favor of using postgres_fe.h.  (The alternative to that is letting this module grow its own configuration testing ability...) Also fix the ""make clean"" target to actually clean things up. Per local testing. "	eff223ffd74eed268f35d693462969f7f75632d2
----------------------------
Update some ALTER USER cross-references to ALTER ROLE Greg Smith 	52897e54db1000f2fa45b31e02eb252dd0573516
----------------------------
Make CLUSTER lock the old table's toast table before copying data. We must lock out autovacuuming of the old toast table before computing the OldestXmin horizon we will use.  Otherwise, autovacuum could start on the toast table later, compute a later OldestXmin horizon, and remove as DEAD toast tuples that we still need (because we think their parent tuples are only RECENTLY_DEAD).  Per further thought about bug #5998. 	83b7584944b3a9df064cccac06822093f1a83793
----------------------------
"Revert ""Remove hard coded formats for INT64 and use configured settings instead."" This reverts commit 9b1508af8971c1627cda5bb65f5e9eddb9a1a55e. As requested by Tom. "	348c10efe08f01872daeeb62f32c8e362fcbba69
----------------------------
Remove hard coded formats for INT64 and use configured settings instead. 	9b1508af8971c1627cda5bb65f5e9eddb9a1a55e
----------------------------
"Rephrase some not-supported error messages in pg_hba.conf processing. In a couple of places we said ""not supported on this platform"" for cases that aren't really platform-specific, but could depend on configuration options such as --with-openssl.  Use ""not supported by this build"" instead, as that doesn't convey the impression that you can't fix it without moving to another OS; that's also more consistent with the wording used for an identical error case in guc.c. No back-patch, as the clarity gain is small enough to not be worth burdening translators with back-branch changes. "	71e7083532d8f6ad0cf345c3cc534b0307e816a8
----------------------------
Remove partial and undocumented GRANT .. FOREIGN TABLE support. Instead, foreign tables are treated just like views: permissions can be granted using GRANT privilege ON [TABLE] foreign_table_name TO role, and revoked similarly.  GRANT/REVOKE .. FOREIGN TABLE is no longer supported, just as we don't support GRANT/REVOKE .. VIEW.  The set of accepted permissions for foreign tables is now identical to the set for regular tables, and views. Per report from Thom Brown, and subsequent discussion. 	be90032e0d1cf473bdd99aee94218218f59f29f1
----------------------------
Add postmaster/postgres undocumented -b option for binary upgrades. This option turns off autovacuum, prevents non-super-user connections, and enables oid setting hooks in the backend.  The code continues to use the old autoavacuum disable settings for servers with earlier catalog versions. This includes a catalog version bump to identify servers that support the -b option. 	76dd09bbec893c02376e3440a6a86a3b994d804c
----------------------------
Fix char2wchar/wchar2char to support collations properly. These functions should take a pg_locale_t, not a collation OID, and should call mbstowcs_l/wcstombs_l where available.  Where those functions are not available, temporarily select the correct locale with uselocale(). This change removes the bogus assumption that all locales selectable in a given database have the same wide-character conversion method; in particular, the collate.linux.utf8 regression test now passes with LC_CTYPE=C, so long as the database encoding is UTF8. I decided to move the char2wchar/wchar2char functions out of mbutils.c and into pg_locale.c, because they work on wchar_t not pg_wchar_t and thus don't really belong with the mbutils.c functions.  Keeping them where they were would have required importing pg_locale_t into pg_wchar.h somehow, which did not seem like a good plan. 	2ab0796d7a3a7116a79b65531fd33f1548514b52
----------------------------
"Small update to emacs example configuration Since both tarballs and git now result in a ""postgresql"" directory rather than a ""pgsql"" directory, adjust the example configuration to look for the former. "	78e7e20afe768d9c5f6b4fbf30a2d7100d46bb2f
----------------------------
Add fill-column setting to emacs example configurations This matches the maximum line length that pgindent uses. 	415f5e12592d135919549a5eb21893fda0417ebf
----------------------------
Fix use of incorrect constant RemoveRoleFromObjectACL. This could cause failures when DROP OWNED BY attempt to remove default privileges on sequences.  Back-patching to 9.0. Shigeru Hanada 	8ede427938e9676d0e497406c213f098303a93f3
----------------------------
Treat config.pl as optional in vcregress.pl This is how build.pl treats it and how it's documented. 	2e8d9544752a7d68cb46f028a4f16ab0eb76c26e
----------------------------
Avoid unused variable warnings for certain configurations 	001cbb145f3250b0d69d6be3d5fa0236e1a261dc
----------------------------
"Refrain from canonicalizing a client_encoding setting of ""UNICODE"". While ""UTF8"" is the correct name for this encoding, existing JDBC drivers expect that if they send ""UNICODE"" it will read back the same way; they fail with an opaque ""Protocol error"" complaint if not.  This will be fixed in the 9.1 drivers, but until older drivers are no longer in use in the wild, we'd better leave ""UNICODE"" alone.  Continue to canonicalize all other inputs.  Per report from Steve Singer and subsequent discussion. "	390cf3209b718382c0ec9793b714422189e9b68b
----------------------------
Ensure mark_dummy_rel doesn't create dangling pointers in RelOptInfos. When we are doing GEQO join planning, the current memory context is a short-lived context that will be reset at the end of geqo_eval().  However, the RelOptInfos for base relations are set up before that and then re-used across many GEQO cycles.  Hence, any code that modifies a baserel during join planning has to be careful not to put pointers to the short-lived context into the baserel struct.  mark_dummy_rel got this wrong, leading to easy-to-reproduce-once-you-know-how crashes in 8.4, as reported off-list by Leo Carson of SDSC.  Some improvements made in 9.0 make it difficult to demonstrate the crash in 9.0 or HEAD; but there's no doubt that there's still a risk factor here, so patch all branches that have the function. (Note: 8.3 has a similar function, but it's only applied to joinrels and thus is not a hazard.) 	eca75a12a27d28b972fc269c1c8813cd8eb15441
----------------------------
Avoid incorrectly granting replication to roles created with NOSUPERUSER. Andres Freund 	0a49c95c734d58385e9c5e335088da1cd54e2344
----------------------------
"Revise the API for GUC variable assign hooks. The previous functions of assign hooks are now split between check hooks and assign hooks, where the former can fail but the latter shouldn't. Aside from being conceptually clearer, this approach exposes the ""canonicalized"" form of the variable value to guc.c without having to do an actual assignment.  And that lets us fix the problem recently noted by Bernd Helmle that the auto-tune patch for wal_buffers resulted in bogus log messages about ""parameter ""wal_buffers"" cannot be changed without restarting the server"".  There may be some speed advantage too, because this design lets hook functions avoid re-parsing variable values when restoring a previous state after a rollback (they can store a pre-parsed representation of the value instead).  This patch also resolves a longstanding annoyance about custom error messages from variable assign hooks: they should modify, not appear separately from, guc.c's own message about ""invalid parameter value"". "	2594cf0e8c04406ffff19b1651c5a406d376657c
----------------------------
"Avoid assuming there will be only 3 states for synchronous_commit. Also avoid hardcoding the current default state by giving it the name ""on"" and replace with a meaningful name that reflects its behaviour. Coding only, no change in behaviour. "	88f32b7ca29982f286b61a9d0dd29be4b8a01c25
----------------------------
Merge synchronous_replication setting into synchronous_commit. This means one less thing to configure when setting up synchronous replication, and also avoids some ambiguity around what the behavior should be when the settings of these variables conflict. Fujii Masao, with additional hacking by me. 	240067b3b0ff989d2b28f4f917f7958f2ec76b05
----------------------------
Reword the phrase on zero replication_timeout in the docs. 	647f8b3dbaa68662f54aa762e9467874282c563d
----------------------------
Mention pg_upgrade sets autovacuum_freeze_max_age to maximum. 	da3418cea9bd10e9ea3489b42f6278772942e745
----------------------------
Expand comment on how pg_upgrade is turning off autovacuum. 	d609b08ead450d78d4a567c48111aca6857ec59c
----------------------------
Automatically terminate replication connections that are idle for more than replication_timeout (a new GUC) milliseconds. The TCP timeout is often too long, you want the master to notice a dead connection much sooner. People complained about that in 9.0 too, but with synchronous replication it's even more important to notice dead connections promptly. Fujii Masao and Heikki Linnakangas 	754baa21f723255272c24dc5f9ab456858e361e3
----------------------------
In pg_upgrade, add C comment about how autovacuum is disabled. 	d67b0bf471ba4e88aa3ed50871924efc91d7a27e
----------------------------
Remove disclaimer stating that fsync=off slows down sync rep. The underlying problem that caused this phenomenon was fixed by commit 92f4786fa9b730fd12cbfe973eb96addc6e98924. 	de592e2669380d5f95766d2bbe583558772fb6ce
----------------------------
Remove synchronous_replication/max_wal_senders cross-check. This is no longer necessary, and might result in a situation where the configuration file is reloaded (and everything seems OK) but a subsequent restart of the database fails. Per an observation from Fujii Masao. 	19584ec659678841ea3036336f960acbdae962a0
----------------------------
Prevent intermittent hang in recovery from bgwriter interaction. Startup process waited for cleanup lock but when hot_standby = off the pid was not registered, so that the bgwriter would not wake the waiting process as intended. 	b98ac467f5d35970edade4ad65c767fc89059026
----------------------------
Update docs to say you need fsync to make sync rep work fast. 	6e8e7cc580665ddd43c8ca2acc6d60f345570a57
----------------------------
Raise maximum value of several timeout parameters The maximum value of deadlock_timeout, max_standby_archive_delay, max_standby_streaming_delay, log_min_duration_statement, and log_autovacuum_min_duration was INT_MAX/1000 milliseconds, which is about 35min, which is too short for some practical uses.  Raise the maximum value to INT_MAX; the code that uses the parameters already supports that just fine. 	8c0a5eb78af00ec4720e693feaba70b5a73205d1
----------------------------
Fix various possible problems with synchronous replication. 1. Don't ignore query cancel interrupts.  Instead, if the user asks to cancel the query after we've already committed it, but before it's on the standby, just emit a warning and let the COMMIT finish. 2. Don't ignore die interrupts (pg_terminate_backend or fast shutdown). Instead, emit a warning message and close the connection without acknowledging the commit.  Other backends will still see the effect of the commit, but there's no getting around that; it's too late to abort at this point, and ignoring die interrupts altogether doesn't seem like a good idea. 3. If synchronous_standby_names becomes empty, wake up all backends waiting for synchronous replication to complete.  Without this, someone attempting to shut synchronous replication off could easily wedge the entire system instead. 4. Avoid depending on the assumption that if a walsender updates MyProc->syncRepState, we'll see the change even if we read it without holding the lock.  The window for this appears to be quite narrow (and probably doesn't exist at all on machines with strong memory ordering) but protecting against it is practically free, so do that. 5. Remove useless state SYNC_REP_MUST_DISCONNECT, which isn't needed and doesn't actually do anything. There's still some further work needed here to make the behavior of fast shutdown plausible, but that looks complex, so I'm leaving it for a separate commit.  Review by Fujii Masao. 	9a56dc3389b9470031e9ef8e45c95a680982e01a
----------------------------
Document guc context values, and reference them from the config doc section. Tom Lane 	e148443ddd95cd29edf4cc1de6188eb9cee029c5
----------------------------
"Wording adjustment for restart_after_crash entry Specifically, mention that ""restart"" is disabled by this parameter. "	df4a9595c20ccd3d3b4ce0e638ca1a5e82546a97
----------------------------
Minor sync rep documentation improvements. - Make the name of the ID tag for the GUC entry match the GUC name. - Clarify that synchronous_replication waits for xlog flush, not receipt. - Mention that synchronous_replication won't wait if max_wal_senders=0. 	f0f3617135854281bdb79179a895c102d54cb95b
----------------------------
Remove 13 keywords that are used only for ROLE options. Review by Tom Lane. 	5ca4dfc79f21828174de3a8bc7d29718d0c52c34
----------------------------
Document how listen_addresses can do only IPv4 or IPv6. 	a1bb5a480df44e518957abca0de2d04aaba5bf02
----------------------------
Update C comment about O_DIRECT and fsync(). 	7d23e0f803fc0af0ff7b317a504eba31a51ebade
----------------------------
Modify pg_test_fsync to match the behavior of git head in regards to O_DIRECT behavior. 	303b7fcd10a34d8c8b4c3e6e258faeaf107dcf92
----------------------------
Clarify C comment that O_SYNC/O_FSYNC are really the same settting, as opposed to O_DSYNC. 	5ca543fb2e2ca5becdb6505ac22aaf7218e842cf
----------------------------
Make error handling of synchronous_standby_names consistent. It's not a good idea to kill the postmaster just because someone muffs this, and it's not consistent with what we do for other, similar GUCs. Fujii Masao, with a bit more hacking by me 	551c07d84ae2f0d3b7dde68e52322edf9cb87ba5
----------------------------
More synchronous replication tweaks. SyncRepRequested() must check not only the value of the synchronous_replication GUC but also whether max_wal_senders > 0. Otherwise, we might end up waiting for sync rep even when there's no possibility of a standby ever managing to connect.  There are some existing cross-checks to prevent this, but they're not quite sufficient: the user can start the server with max_wal_senders=0, synchronous_standby_names='', and synchronous_replication=off and then subsequent make synchronous_standby_names not empty using pg_ctl reload, and then SET synchronous_standby=on, leading to an indefinite hang. Along the way, rename the global variable for the synchronous_replication GUC to match the name of the GUC itself, for clarity. Report by Fujii Masao, though I didn't use his patch. 	b8bb8dbf20e13087f8e57ff4c42e81776ae5e545
----------------------------
"Adjust the permissions required for COMMENT ON ROLE. Formerly, any member of a role could change the role's comment, as of course could superusers; but holders of CREATEROLE privilege could not, unless they were also members.  This led to the odd situation that a CREATEROLE holder could create a role but then could not comment on it. It also seems a bit dubious to let an unprivileged user change his own comment, let alone those of group roles he belongs to.  So, change the rule to be ""you must be superuser to comment on a superuser role, or hold CREATEROLE to comment on non-superuser roles"".  This is the same as the privilege check for creating/dropping roles, and thus fits much better with the rule for other object types, namely that only the owner of an object can comment on it. In passing, clean up the documentation for COMMENT a little bit. Per complaint from Owen Jacobson and subsequent discussion. "	49a08ca1e968860fe02fa3331cc0aba361d76e02
----------------------------
Remove 's' from recovery_target_timeline's' from the release note. 	48ff3913d6ce42cd090d17ea6863be4698007afe
----------------------------
synchronous_standby_names is a string parameter. 	1144726d070746a857a13af271e2864961a5268f
----------------------------
If recovery_target_timeline is set to 'latest' and standby mode is enabled, periodically rescan the archive for new timelines, while waiting for new WAL segments to arrive. This allows you to set up a standby server that follows the TLI change if another standby server is promoted to master. Before this, you had to restart the standby server to make it notice the new timeline. This patch only scans the archive for TLI changes, it won't follow a TLI change in streaming replication. That is much needed too, but it would be a much bigger patch than I dare to sneak in this late in the release cycle. There was discussion on improving the sanity checking of the WAL segments so that the system would notice more reliably if the new timeline isn't an ancestor of the current one, but that is not included in this patch. Reviewed by Fujii Masao. 	1a4ab9ec23f0635a4c15b069df60b545814650e9
----------------------------
Efficient transaction-controlled synchronous replication. If a standby is broadcasting reply messages and we have named one or more standbys in synchronous_standby_names then allow users who set synchronous_replication to wait for commit, which then provides strict data integrity guarantees. Design avoids sending and receiving transaction state information so minimises bookkeeping overheads. We synchronize with the highest priority standby that is connected and ready to synchronize. Other standbys can be defined to takeover in case of standby failure. This version has very strict behaviour; more relaxed options may be added at a later date. Simon Riggs and Fujii Masao, with reviews by Yeb Havinga, Jaime Casanova, Heikki Linnakangas and Robert Haas, plus the assistance of many other design reviewers. 	a8a8a3e0965201df88bdfdff08f50e5c06c552b7
----------------------------
Avoid excessive Hot Standby feedback messages. Without this patch, when wal_receiver_status_interval=0, indicating that no status messages should be sent, Hot Standby feedback messages are instead sent extremely frequently. Fujii Masao, with documentation changes by me. 	59d6a7594288ebc909a24f3fc9e502f097bbe2ff
----------------------------
Fix verbose display of REPLICATION role attribute Josh Kupershmidt 	b04137a2948a24dfa3b87222f07073eb9939b264
----------------------------
Increase the default for wal_sender_delay from 200ms to 1s. Now that WAL sender is immediately woken up by transaction commit, there's no need to wake up so aggressively. 	be6668d6eff6a03455b48fa8ce1a397ff5bae788
----------------------------
Add a configure check for Python.h if building with python. 	42e5223648e7e56f8041bed329929dbd5529ea92
----------------------------
Update docs about new role privileges reference, per Alvaro. 	ede45e90dd1992bfd3e1e61ce87bad494b81f54d
----------------------------
"Set psql client encoding from locale by default Add a new libpq connection option client_encoding (which includes the existing PGCLIENTENCODING environment variable), which besides an encoding name accepts a special value ""auto"" that tries to determine the encoding from the locale in the client's environment, using the mechanisms that have been in use in initdb. psql sets this new connection option to ""auto"" when running from a terminal and not overridden by setting PGCLIENTENCODING. original code by Heikki Linnakangas, with subsequent contributions by Jaime Casanova, Peter Eisentraut, Stephen Frost, Ibrar Ahmed "	02e14562a806a96f38120c96421d39dfa7394192
----------------------------
Document that text search comparisons happen after text search configuration rules. Erik Rijkers 	5bba4948eb835413cc4a5ca1e2f7255ce4c78e69
----------------------------
Hot Standby feedback for avoidance of cleanup conflicts on standby. Standby optionally sends back information about oldestXmin of queries which is then checked and applied to the WALSender's proc->xmin. GetOldestXmin() is modified slightly to agree with GetSnapshotData(), so that all backends on primary include WALSender within their snapshots. Note this does nothing to change the snapshot xmin on either master or standby. Feedback piggybacks on the standby reply message. vacuum_defer_cleanup_age is no longer used on standby, though parameter still exists on primary, since some use cases still exist. Simon Riggs, review comments from Fujii Masao, Heikki Linnakangas, Robert Haas 	bca8b7f16a3e720794cb0afbdb3733be4f8d9c2c
----------------------------
Rename max_predicate_locks_per_transaction. The new name, max_pred_locks_per_transaction, is shorter. Kevin Grittner, per discussion. 	6a77e9385eb46829ce80971bc655df9f3ef00d9a
----------------------------
Avoid having autovacuum workers wait for relation locks. Waiting for relation locks can lead to starvation - it pins down an autovacuum worker for as long as the lock is held.  But if we're doing an anti-wraparound vacuum, then we still wait; maintenance can no longer be put off. To assist with troubleshooting, if log_autovacuum_min_duration >= 0, we log whenever an autovacuum or autoanalyze is skipped for this reason. Per a gripe by Josh Berkus, and ensuing discussion. 	32896c40ca766146312b28a5a0eb3f66ca0300ed
----------------------------
Unbreak 'configure' followed immediately by 'make install'. More fallout from ddfe26f6441c24660595c5efe5fd0bd3974cdc5c. Report by Fujii Masao. 	b87811ee273360c45d92b0e7bb7e67670312c221
----------------------------
Log restartpoints in the same fashion as checkpoints. Prior to 9.0, restartpoints never created, deleted, or recycled WAL files, but now they can.  This code makes log_checkpoints treat checkpoints and restartpoints symmetrically.  It also adjusts up the documentation of the parameter to mention restartpoints. Fujii Masao.  Docs by me, as suggested by Itagaki Takahiro. 	0af695fd43b6889613a4035e3cdfcc0fc1b7936a
----------------------------
"Clarify documentation to state that ""zero_damaged_pages"" does not force data to disk, so the table or index should be recreated before the parameter is turned off again. "	7106f74e2a6feb31c022dd98e7d93ab656dc079d
----------------------------
Add a link from client_encoding parameter to the list of character sets in documentation. Thom Brown 	03282bfa8973f3a77ca3e7c14847a5a11d07d6a2
----------------------------
Try to avoid running with a full fsync request queue. When we need to insert a new entry and the queue is full, compact the entire queue in the hopes of making room for the new entry.  Doing this on every insertion might worsen contention on BgWriterCommLock, but when the queue it's full, it's far better than allowing the backend to perform its own fsync, per testing by Greg Smith as reported in http://archives.postgresql.org/pgsql-hackers/2011-01/msg02665.php Original idea from Greg Smith.  Patch by me.  Review by Chris Browne and Greg Smith 	7f242d880b5b5d9642675517466d31373961cf98
----------------------------
autoreconf Synchronize pg_config.h.in with configure.in (someone must have forgotten to run autoheader or autoreconf), and clean up some spurious change in configure introduced by the last commit there. 	6fe5e4e63ee274e66c36dce999978a3fee8cf4c6
----------------------------
In pg_test_fsync, use K(1024) rather than k(1000) for write size units. 	00869024cb0164969957c1b3e8f6a11242a939e9
----------------------------
"Update contrib documention mentions to point to actual documentation sections, rather than just calling it ""/contrib/module_name"". Also update pg_test_fsync build instructions now that it is in /contrib. "	159e3d86292cfec2a2828f9f69ac7a6cb1be242d
----------------------------
Adjust pg_test_fsync to always do XLOG_BLCKSZ-sized writes, rather than always 8k writes, per suggestion from Tom.  Also adjust open_sync output layout. 	64bc872761bc9bf730307957f09f44a3eabbe3af
----------------------------
Use XLOG_BLCKSZ in pg_test_fsync, rather than our own define, but verify it is 8k as expected. 	9dd7933937a076ce7573944b8d1d42e618163440
----------------------------
Code cleanup for assign_transaction_read_only. As in commit fb4c5d2798730f60b102d775f22fb53c26a6445d on 2011-01-21, this avoids spurious debug messages and allows idempotent changes at any time.  Along the way, make assign_XactIsoLevel allow idempotent changes even when not within a subtransaction, to be consistent with the new coding of assign_transaction_read_only and because there's no compelling reason to do otherwise. Kevin Grittner, with some adjustments. 	6f59777c65d557485e933a383ebc4c3fdfc1a2b7
----------------------------
Allow the wal_buffers setting to be auto-tuned to a reasonable value. If wal_buffers is initially set to -1 (which is now the default), it's replaced by 1/32nd of shared_buffers, with a minimum of 8 (the old default) and a maximum of the XLOG segment size.  The allowed range for manual settings is still from 4 up to whatever will fit in shared memory. Greg Smith, with implementation correction by me. 	0f73aae13def660371c34c8feda6e684e6366bdb
----------------------------
More pg_test_fsync fixups. Reduce #includes to minimum actually needed; in particular include postgres_fe.h not postgres.h, so as to stop build failures on some platforms. Use get_progname() instead of hardwired program name; improve error checking for command line syntax; bring error messages into line with style guidelines; include strerror result in die() cases. 	37eb2cd4ad4c3323f1c7ed1c893c9d645fbaeb1a
----------------------------
Link libpgport into pg_test_fsync on msvc 	f5a0fd2f3bbe233802cbbddfe8bdf086c69c1ac3
----------------------------
Avoid treating WAL senders as normal backends. The previous coding treated anything that wasn't an autovacuum launcher as a normal backend, which is wrong now that we also have WAL senders. Fujii Masao, reviewed by Robert Haas, Alvaro Herrera, Tom Lane, and Bernd Helmle. 	a0c75f55394fe904e09f7caee9a8195e3a09c801
----------------------------
More pg_test_fsync cleanup. Un-break Windows build (I hope) by making the HAVE_FSYNC_WRITETHROUGH code match the backend.  Fix incorrect program help message.  static-ize all functions. 	cb38ab6d3b89eccb75b3337f8723cfc283fb77fb
----------------------------
Clean up pg_test_fsync commit. Actually rename the program, rather than just claiming we did.  Hook it into the build system.  Get rid of useless dependency on libpq.  Clean up #include list and messy whitespace. 	bc616703e8767d2a5d0312cdbf5dc3c6de2b86fe
----------------------------
Update SGML docs to point to new /contrib/pg_test_fsync. 	5925aa09a9110fe0d12393c758812e7149546443
----------------------------
Update C banner on new pg_test_fsync file. 	b35bfcae937810f43fdf2327bcea2e8a03ccbf68
----------------------------
Move test_fsync to /contrib. 	606a3d54fcd053c31e52886f4c69848a68777480
----------------------------
In test_fsync, adjust test headings to match wal_sync_method values; add more test cases for open_sync of different sizes. 	8995440e387846261d18e728f11adc528ccc5c1b
----------------------------
Log replication connections only when log_connections is on Previously we'd always log replication connections, with no way to turn them off. 	6e1726d082b5a9c305ed44a69ff50bc3407d01a2
----------------------------
Add getopt() support to test_fsync;  also fix printf() format problem. 	08af45f4ff89ff5bee25c7d5bf496e987eb90060
----------------------------
Set fallback_application_name in walreceiver Makes replication slaves identify themselves in the new pg_stat_replication view. 	48075095ac3ce1aaa63624ea0148dbe5bcba3b09
----------------------------
Before exiting walreceiver, fsync() all the WAL received. Otherwise WAL recovery will replay the un-flushed WAL after walreceiver has exited, which can lead to a non-recoverable standby if the system crashes hard at that point. 	34ef02b4d4c06e2bae6ad09cfd6d9c097eb73743
----------------------------
In test_fsync, use #define for printf format of ops/sec. 	e0c274679cb50064a92472c94c7ef5849a156536
----------------------------
Reverse number of stars used for test_fsync details. 	3eebb33dddcfe4ac0719b697c1ebd3694038054e
----------------------------
In test_fsync, warn about options without o_direct that are not used by Postgres, and cases where o_direct does not work with certain file systems. 	431605f666cfb223cd615ec8c63cbdea07295550
----------------------------
Have test_fsync output details that fdatasync is the default wal_sync_method on Linux. 	001d3664e32c0d156215bbfeccea3272aaf17722
----------------------------
Improve output display of test_fsync. 	3ab80cfe031b616638eb6956010dcc9cb6426631
----------------------------
Apply patch for test_fsync to add tests for O_DIRECT. Adjusted patch by Josh Berkus 	677b06ca462ec6fd98da9369a2eae6085c9d7fed
----------------------------
Revert patch adding support for logging the current role. This reverts commit a8a8867912c46a68c9ac14903b3dba2fab8f7097, committed by me earlier today (2011-01-12).  This isn't safe inside an aborted transaction. Noted by Tom Lane. 	7a32ff97321408afa0ddfcae1a4a060062956d24
----------------------------
Add support for logging the current role. Stephen Frost, with some editorialization by me. 	a8a8867912c46a68c9ac14903b3dba2fab8f7097
----------------------------
"Tweak create_index_paths()'s test for whether to consider a bitmap scan. Per my note of a couple days ago, create_index_paths would refuse to consider any path at all for GIN indexes if the selectivity estimate came out as 1.0; not even if you tried to force it with enable_seqscan.  While this isn't really a bad outcome in practice, it could be annoying for testing purposes.  Adjust the test for ""is this path only useful for sorting"" so that it doesn't fire on paths with nil pathkeys, which will include all GIN paths. "	9d1ac2f5fa4043529dbaff5ebdc73405fa73207b
----------------------------
"Give superusers REPLIACTION permission by default This can be overriden by using NOREPLICATION on the CREATE ROLE statement, but by default they will have it, making it backwards compatible and ""less surprising"" (given that superusers normally override all checks). "	66a8a0428db046d725b88c8b956384c2a4b4a11c
----------------------------
Improve psql tab completion for CREATE/ALTER ROLE [NO]REPLICATION. Missing support for VALID UNTIL in CREATE ROLE is also added. 	14158f25cd164d65cf174dab9e22b3b4a22962a7
----------------------------
Add missing part of replication role docs Noted by Peter E. 	1996b482859c67726e77b80a263d3cce954e022d
----------------------------
Improve pg_upgrade's checks for required executables. Don't insist on pg_dumpall and psql being present in the old cluster, since they are not needed.  Do insist on pg_resetxlog being present (in both old and new), since we need it.  Also check for pg_config, but only in the new cluster.  Remove the useless attempt to call pg_config in the old cluster; we don't need to know the old value of --pkglibdir.  (In the case of a stripped-down migration installation there might be nothing there to look at anyway, so any future change that might reintroduce that need would have to be considered carefully.) Per my attempts to build a minimal previous-version installation to support pg_upgrade. 	88c803457a53d2f83168519f0651e6dc258003b5
----------------------------
Add REPLICATION privilege for ROLEs This privilege is required to do Streaming Replication, instead of superuser, making it possible to set up a SR slave that doesn't have write permissions on the master. Superuser privileges do NOT override this check, so in order to use the default superuser account for replication it must be explicitly granted the REPLICATION permissions. This is backwards incompatible change, in the interest of higher default security. 	9b8aff8c192e2f313f90395d114c58a9ef84f97f
----------------------------
Work around unfortunate getppid() behavior on BSD-ish systems. On MacOS X, and apparently also on other BSD-derived systems, attaching a debugger causes getppid() to return the pid of the debugging process rather than the actual parent PID.  As a result, debugging the autovacuum launcher, startup process, or WAL sender on such systems causes it to exit, because the previous coding of PostmasterIsAlive() detects postmaster death by testing whether getppid() == PostmasterPid. Work around that behavior by checking the return value of getppid() more carefully.  If it's PostmasterPid, the postmaster must be alive; if it's 1, assume the postmaster is dead.  If it's any other value, assume we've been debugged and fall through to the less-reliable kill() test. Review by Tom Lane. 	24ecde7742cd4d7c781e6890b07571fff42b25dc
----------------------------
set_ps_display when calling functions via fastpath This improves tag output by log_line_prefix 	3026027ec3a795745e8e80fc9f204bebc97be58e
----------------------------
Remove unnecessary definition for autovacuum in SignalSomeChildren. 	b68193c0c7a7cfbc4aead3910cd492be63c0cd8b
----------------------------
Force default wal_sync_method to be fdatasync on Linux. Recent versions of the Linux system header files cause xlogdefs.h to believe that open_datasync should be the default sync method, whereas formerly fdatasync was the default on Linux.  open_datasync is a bad choice, first because it doesn't actually outperform fdatasync (in fact the reverse), and second because we try to use O_DIRECT with it, causing failures on certain filesystems (e.g., ext4 with data=journal option). This part of the patch is largely per a proposal from Marti Raudsepp. More extensive changes are likely to follow in HEAD, but this is as much change as we want to back-patch. Also clean up confusing code and incorrect documentation surrounding the fsync_writethrough option.  Those changes shouldn't result in any actual behavioral change, but I chose to back-patch them anyway to keep the branches looking similar in this area. In 9.0 and HEAD, also do some copy-editing on the WAL Reliability documentation section. Back-patch to all supported branches, since any of them might get used on modern Linux versions. 	576477e73c4a9cb32c7471c1cec354fd5328140e
----------------------------
Optimize commit_siblings in two ways to improve group commit. First, avoid scanning the whole ProcArray once we know there are at least commit_siblings active; second, skip the check altogether if commit_siblings = 0. Greg Smith 	e620ee35b249b0af255ef788003d1c9edb815a35
----------------------------
Point out in default_tablespace's description that CREATE DATABASE ignores it. Per gripe from Andreas Scherbaum. 	c623365ff9a5ef937e05b85c2feb5a5c5cde9b3b
----------------------------
Add more ALTER <object> .. SET SCHEMA commands. This adds support for changing the schema of a conversion, operator, operator class, operator family, text search configuration, text search dictionary, text search parser, or text search template. Dimitri Fontaine, with assorted corrections and other kibitzing. 	55109313f96fb5c7d671fe8954b6f7fc0cca9631
----------------------------
For libpq/Makefile OPT_PGPORT, remove .o extension after we test configure's LIBOBJS.  Should fix buildfarm failures. 	742ac738c33a1a6adf11a7e69c65f102b602a1e5
----------------------------
Remove GucContext parameter from ParseConfigFile 	5272d7987506554f6b2bde740e1b4d7e4a0b8608
----------------------------
Fix leakage of cost_limit when multiple autovacuum workers are active. When using default autovacuum_vac_cost_limit, autovac_balance_cost relied on VacuumCostLimit to contain the correct global value ... but after the first time through in a particular worker process, it didn't, because we'd trashed it in previous iterations.  Depending on the state of other autovac workers, this could result in a steady reduction of the effective cost_limit setting as a particular worker processed more and more tables, causing it to go slower and slower.  Spotted by Simon Poole (bug #5759). Fix by saving and restoring the GUC variables in the loop in do_autovacuum. In passing, improve a few comments. Back-patch to 8.3 ... the cost rebalancing code has been buggy since it was put in. 	b58c25055ef6d7097618c680f6768689a110d529
----------------------------
Additional fixes for parallel make Add some additional dependencies to constrain the build order to prevent parallel make from failing.  In the case of src/Makefile, this is likely to be too complicated to be worth maintaining, so just add .NOTPARALLEL to get the old for-loop-like behavior. More fine-tuning might be necessary for some platforms or configurations. 	cfad144f894b306fc300f5d03ea52a32d4624db0
----------------------------
Add new buffers_backend_fsync field to pg_stat_bgwriter. This new field counts the number of times that a backend which writes a buffer out to the OS must also fsync() it.  This happens when the bgwriter fsync request queue is full, and is generally detrimental to performance, so it's good to know when it's happening.  Along the way, log a new message at level DEBUG1 whenever we fail to hand off an fsync, so that the problem can also be seen in examination of log files (if the logging level is cranked up high enough). Greg Smith, with minor tweaks by me. 	3134d8863e8473e3ed791e27d484f9e548220411
----------------------------
Add missing outfuncs.c support for struct InhRelation. This is needed to support debug_print_parse, per report from Jon Nelson. Cursory testing via the regression tests suggests we aren't missing anything else. 	2138c701a397885d4f360c90bf8b95d0d98aecd0
----------------------------
Fix error handling in temp-file deletion with log_temp_files active. The original coding in FileClose() reset the file-is-temp flag before unlinking the file, so that if control came back through due to an error, it wouldn't try to unlink the file twice.  This was correct when written, but when the log_temp_files feature was added, the logging action was put in between those two steps.  An error occurring during the logging action --- such as a query cancel --- would result in the unlink not getting done at all, as in recent report from Michael Glaesemann. To fix this, make sure that we do both the stat and the unlink before doing anything that could conceivably CHECK_FOR_INTERRUPTS.  There is a judgment call here, which is which log message to emit first: if you can see only one, which should it be?  I chose to log unlink failure at the risk of losing the log_temp_files log message --- after all, if the unlink does fail, the temp file is still there for you to see. Back-patch to all versions that have log_temp_files.  The code was OK before that. 	54428dbe90cf11d17439acad9b8dcf375a14819d
----------------------------
Fix permanent memory leak in autovacuum launcher get_database_list was uselessly allocating its output data, along some created along the way, in a permanent memory context.  This didn't matter when autovacuum was a single, short-lived process, but now that the launcher is permanent, it shows up as a permanent leak. To fix, make get_database list allocate its output data in the caller's context, which is in charge of freeing it when appropriate; and the memory leaked by heap_beginscan et al is allocated in a throwaway transaction context. 	854ae8c3a6bab2053f8bdbc453787be878ce8c81
----------------------------
"Make get_stack_depth_rlimit() handle RLIM_INFINITY more sanely. Rather than considering this result as meaning ""unknown"", report LONG_MAX. This won't change what superusers can set max_stack_depth to, but it will cause InitializeGUCOptions() to set the built-in default to 2MB not 100kB. The latter seems like a fairly unreasonable interpretation of ""infinity"". Per my investigation of odd buildfarm results as well as an old complaint from Heikki. Since this should persuade all the buildfarm animals to use a reasonable stack depth setting during ""make check"", revert previous patch that dumbed down a recursive regression test to only 5 levels. "	dd1c781903811416db4e03383a4cb0bfc8cfac40
----------------------------
Include the current value of max_stack_depth in stack depth complaints. I'm mainly interested in finding out what it is on buildfarm machines, but including the active value in the message seems like good practice in any case.  Add the info to the HINT, not the ERROR string, so as not to change the regression tests' expected output. 	6736916f5f5a5f340aa20d4b27540764b5646585
----------------------------
Reduce recursion depth in recently-added regression test. Some buildfarm members fail the test with the original depth of 10 levels, apparently because they are running at the minimum max_stack_depth setting of 100kB and using ~ 10k per recursion level.  While it might be interesting to try to figure out why they're eating so much stack, it isn't likely that any fix for that would be back-patchable.  So just change the test to recurse only 5 levels.  The extra levels don't prove anything correctness-wise anyway. 	0abc8fdd4df3dd0524cd9fd8e2d761cf932dd80f
----------------------------
Make \? output of \dg and \du the same The previous wording might have suggested that \du only showed login roles and \dg only group roles, but that is no longer the case. proposed by Josh Kupershmidt 	299591d1a293e737d72d57aa8545c6c00d19db1d
----------------------------
Note that effective_io_concurrency only affects bitmap heap scans. Josh Kupershmidt 	5a12c808cf223c7a5498217142cc9cb45efe033a
----------------------------
Add mention of using tools/fsync to test fsync methods. Restructure recent wal_sync_method doc paragraph to be clearer. 	f75d6a1b19ec334a9b1455c4b8030a09d582581d
----------------------------
Accept 'public' as a pseudo-role name in has_table_privilege() and friends to see if a particular privilege has been granted to PUBLIC. The issue was reported by Jim Nasby. Patch by Alvaro Herrera, and reviewed by KaiGai Kohei. 	d0f876ca8ccb7dc8820302543b114014b7bac090
----------------------------
Remove some unnecessary tests of pgstat_track_counts. We may as well make pgstat_count_heap_scan() and related macros just count whenever rel->pgstat_info isn't null.  Testing pgstat_track_counts buys nothing at all in the normal case where that flag is ON; and when it's OFF, the pgstat_info link will be null, so it's still a useless test. This change is unlikely to buy any noticeable performance improvement, but a cycle shaved is a cycle earned; and my investigations earlier today convinced me that we're down to the point where individual instructions in the inner execution loops are starting to matter. 	f4d242ef94730c447d87b9840a40b0ec3371fe0f
----------------------------
Single-word clarification in postgresql.conf log_truncate_on_rotation comment. 	f7dbddac69d01fb27484ad27c1d042f36f55ea12
----------------------------
Improve WAL reliability documentation, and add more cross-references to it. In particular, we are now more explicit about the fact that you may need wal_sync_method=fsync_writethrough for crash-safety on some platforms, including MaxOS X.  There's also now an explicit caution against assuming that the default setting of wal_sync_method is either crash-safe or best for performance. 	694c56af2b586551afda624901d6dec951b58027
----------------------------
Add/fix caching on some configure checks 	804a786c958d44fdf3b2e2d4774618f919759dc8
----------------------------
Add DISCARD to the command_no_begin list for AUTOCOMMIT=off. Backpatch to 8.3. Reported by Sergey Burladyan. 	d08c698d9d47f9d004fd0bb6212ca80259e2fe9c
----------------------------
Prevent show_session_authorization from crashing when session_authorization hasn't been set. The only known case where this can happen is when show_session_authorization is invoked in an autovacuum process, which is possible if an index function calls it, as for example in bug #5669 from Andrew Geery.  We could perhaps try to return a sensible value, such as the name of the cluster-owning superuser; but that seems like much more trouble than the case is worth, and in any case it could create new possible failure modes.  Simply returning an empty string seems like the most appropriate fix. Back-patch to all supported versions, even those before autovacuum, just in case there's another way to provoke this crash. 	660fbec560335292db9e05e4ad5d46437bb806bc
----------------------------
Move pg_db_role_setting docs to correct place in alphabetical order. 	48f0a28b488f6ab2c3774c922f5af69b84f693b5
----------------------------
Don't warn about an in-progress online backup, when we're recovering from an online backup instead of performing one. pg_ctl can detect that by checking if recovery.conf exists. Backup label file is renamed away early in recovery, so the window where backup label exists during recovery is normally very small, but you can run into it e.g if restore_command is set incorrectly and the startup process never finds even the first WAL segment containing the checkpoint record to start recovery from. Fujii Masao with comments by me. 	06e8c8e3ec14e597e5f47c7b5b6b0c0b17bedcf0
----------------------------
Process options from the startup packed in walsender. Only few options make sense for walsender, but for example application_name and client_encoding do. We still don't apply per-role settings from pg_db_role_setting, because that would require connecting to a database to read the table. Fujii Masao 	418039d3af44813294812ce7e29e2259874a1e23
----------------------------
Don't try aligning comments for new archive_command Win32 doc example; it doesn't work. Backpatch to 9.0.X. 	df57a5e8981d1a3272d4693ffc64eda0afbd3ac1
----------------------------
Re-add documentation for Win32 copy syntax for archive_command. Backpatch to 9.0.X. 	39fa4d0b318909a0d90143f67be6b479a3efbf73
----------------------------
Document the existence of the socket lock file under unix_socket_directory, which is perhaps not a terribly good spot for it but there doesn't seem to be a better place.  Also add a source-code comment pointing out a couple reasons for having a separate lock file.  Per suggestion from Greg Smith. 	73b3bd5574099ac0f6a174852ce224d55d0cdf78
----------------------------
Update autovacuum_freeze_max_age documentation to mention that the default is low because of pg_clog file removal. Backpatch to 9.0.X. 	c107c35df3ae62444497dbba1d60e591c8d0d436
----------------------------
Document that autovacuum_freeze_max_age is used for pg_clog recycling. We already mentioned xid wraparound. 	d8986332cb98d0463baacf87552c9059d28da731
----------------------------
Bring some sanity to the trace_recovery_messages code and docs. Per gripe from Fujii Masao, though this is not exactly his proposed patch. Categorize as DEVELOPER_OPTIONS and set context PGC_SIGHUP, as per Fujii, but set the default to LOG because higher values aren't really sensible (see the code for trace_recovery()).  Fix the documentation to agree with the code and to try to explain what the variable actually does.  Get rid of no-op calls trace_recovery(LOG), which accomplish nothing except to demonstrate that this option confuses even its author. 	79dc97a401e8b51c3b91f3d629122b3f6c365a9f
----------------------------
Tidy up a few calls to smrgextend(). In the new API introduced by my patch to include the backend ID in temprel filenames, the last argument to smrgextend() became skipFsync rather than isTemp, but these calls didn't get the memo.  It's not really a problem to pass rel->rd_istemp rather than just plain false, because smgrextend() now automatically skips the fsync for temprels anyway, but this seems cleaner and saves some minute number of cycles. 	d37781fa82fa6b4316e51aca210d5fb53bd33983
----------------------------
"Fix failure of ""ALTER TABLE t ADD COLUMN c serial"" when done by non-owner. The implicitly created sequence was created as owned by the current user, who could be different from the table owner, eg if current user is a superuser or some member of the table's owning role.  This caused sanity checks in the SEQUENCE OWNED BY code to spit up.  Although possibly we don't need those sanity checks, the safest fix seems to be to make sure the implicit sequence is assigned the same owner role as the table has. (We still do all permissions checks as the current user, however.) Per report from Josh Berkus. Back-patch to 9.0.  The bug goes back to the invention of SEQUENCE OWNED BY in 8.2, but the fix requires an API change for DefineRelation(), which seems to have potential for breaking third-party code if done in a minor release. Given the lack of prior complaints, it's probably not worth fixing in the stable branches. "	b5565bca110c3b2d6fe55cc87d0b3fbb105a504f
----------------------------
Arrange to fsync the contents of lockfiles (both postmaster.pid and the socket lockfile) when writing them.  The lack of an fsync here may well explain two different reports we've seen of corrupted lockfile contents, which doesn't particularly bother the running server but can prevent a new server from starting if the old one crashes.  Per suggestion from Alvaro. Back-patch to all supported versions. 	ee0e525bfc3a3d0851e36d3d15dce3a8bd7ac029
----------------------------
Add xml_is_well_formed, xml_is_well_formed_document, xml_is_well_formed_content functions to the core XML code.  Per discussion, the former depends on XMLOPTION while the others do not.  These supersede a version previously offered by contrib/xml2. Mike Fowler, reviewed by Pavel Stehule 	a0b7b717a4324f573d3a7651a06037557066eb77
----------------------------
Make RecordTransactionCommit() respect wal_level. Since the only purpose of WAL-loggin SharedInvalidationMessages is to support Hot Standby operation, they needn't be included when wal_level < hot_standby. Back-patch to 9.0. Review by Heikki Linnakanagas and Fujii Masao. 	95ef7cd40da69feff0ab1f2e4964949e6fb15383
----------------------------
Add a comment about the initial default value of max_stack_depth. 	f73b765182b3ecb3bd3f14a9022e27c01b16cd21
----------------------------
Standardize get_whatever_oid functions for other object types. - Rename TSParserGetPrsid to get_ts_parser_oid. - Rename TSDictionaryGetDictid to get_ts_dict_oid. - Rename TSTemplateGetTmplid to get_ts_template_oid. - Rename TSConfigGetCfgid to get_ts_config_oid. - Rename FindConversionByName to get_conversion_oid. - Rename GetConstraintName to get_constraint_oid. - Add new functions get_opclass_oid, get_opfamily_oid, get_rewrite_oid, get_rewrite_oid_without_relid, get_trigger_oid, and get_cast_oid. The name of each function matches the corresponding catalog. Thanks to KaiGai Kohei for the review. 	fd1843ff8979c0461fb3f1a9eab61140c977e32d
----------------------------
Standardize get_whatever_oid functions for object types with unqualified names. - Add a missing_ok parameter to get_tablespace_oid. - Avoid duplicating get_tablespace_od guts in objectNamesToOids. - Add a missing_ok parameter to get_database_oid. - Replace get_roleid and get_role_checked with get_role_oid. - Add get_namespace_oid, get_language_oid, get_am_oid. - Refactor existing code to use new interfaces. Thanks to KaiGai Kohei for the review. 	2a6ef3445c73473edb222abf108b323fb7f002dc
----------------------------
Rewrite the rbtree routines so that an RBNode is the first field of the struct representing a tree entry, rather than being a separately allocated piece of storage.  This API is at least as clean as the old one (if not more so --- there were some bizarre choices in there) and it permits a very substantial memory savings, on the order of 2X in ginbulk.c's usage. Also, fix minor memory leaks in code called by ginEntryInsert, in particular in ginInsertValue and entryFillRoot, as well as ginEntryInsert itself.  These leaks resulted in the GIN index build context continuing to bloat even after we'd filled it to maintenance_work_mem and started to dump data out to the index. In combination these fixes restore the GIN index build code to honoring the maintenance_work_mem limit about as well as it did in 8.4.  Speed seems on par with 8.4 too, maybe even a bit faster, for a non-pathological case in which HEAD was formerly slower. Back-patch to 9.0 so we don't have a performance regression from 8.4. 	0454f131616ecafcc9289da919ab9acdabd0aad7
----------------------------
Rename asyncCommitLSN to asyncXactLSN to reflect changed role in 9.0. Transaction aborts now record their LSN to avoid corner case behaviour in SR/HS, hence change of name of variables and functions. As pointed out by Fujii Masao. Cosmetic changes only. 	5b8bd0529ed5912dae04ffc3383bf4ac43e30083
----------------------------
Clean up some inconsistencies in the volatility marking of various I/O related functions.  Per today's discussion, we will henceforth assume that datatype I/O functions are either stable or immutable, never volatile. (This implies in particular that domain CHECK constraint expressions shouldn't be volatile, since domain_in executes them.)  In turn, functions that execute the I/O functions of arbitrary datatypes should always be labeled stable. This affects the labeling of array_to_string, which was unsafely marked immutable, and record_in, record_out, record_recv, record_send, domain_in, domain_recv, which were over-conservatively marked volatile. The array I/O functions were already marked stable, which is correct per this policy but would have been wrong if we maintained domain_in as volatile. Back-patch to 9.0, along with an earlier fix to correctly mark cash_in and cash_out as stable not immutable (since they depend on lc_monetary). No catversion bump --- the implications of this are not currently severe enough to justify a forced initdb. 	aab353a60b95aadc00f81da0c6d99bde696c4b75
----------------------------
In postgresql.conf.sample, use on/off rather than true/false. We used to be consistent about this, but my recent patch to add a restart_after_crash GUC failed to follow the existing convention. Report and patch from Fujii Masao. 	e0226a9bf2dd7e639754d530d21e98c929344f6a
----------------------------
Add options to force quoting of all identifiers. I've added a quote_all_identifiers GUC which affects the behavior of the backend, and a --quote-all-identifiers argument to pg_dump and pg_dumpall which sets the GUC and also affects the quoting done internally by those applications. Design by Tom Lane; review by Alex Hunsaker; in response to bug #5488 filed by Hartmut Goebel. 	ce68df468a41d8dbb992184aad490c07d02ca721
----------------------------
Make ECPG regression tests independent of standard_conforming_strings. Per buildfarm, again. 	b25749cc64995ae668f6744765169b354a7f43be
----------------------------
Make hstore regression tests independent of standard_conforming_strings. Per buildfarm. 	0e22e08fe5a5de9baa0a4ec12c8df548594a461a
----------------------------
"Add restart_after_crash GUC. Normally, we automatically restart after a backend crash, but in some cases when PostgreSQL is invoked by clusterware it may be desirable to suppress this behavior, so we provide an option which does this. Since no existing GUC group quite fits, create a new group called ""error handling options"" for this and the previously undocumented GUC exit_on_error, which is now documented. Review by Fujii Masao. "	5ffaa9005c451330bcde29d11a9385c0900ee707
----------------------------
Change the default value of standard_conforming_strings to on. This change should be publicized to driver maintainers at once and release-noted as an incompatibility with previous releases. 	0839f312e92c7ab0aecb2c4133197a7da7c5fc39
----------------------------
"Remove unnecessary ""Not safe to send CSV data"" complaint from elog.c's fallback path when CSV logging is configured but not yet operational.  It's sufficient to send the message to stderr, as we were already doing, and the ""Not safe"" gripe has already confused at least two core members ... Backpatch to 9.0, but not further --- doesn't seem appropriate to change this behavior in stable branches. "	cf5305f4066d827269b27f75af52dc2699d5426f
----------------------------
Add a log_file_mode GUC that allows control of the file permissions set on log files created by the syslogger process. In passing, make unix_file_permissions display its value in octal, same as log_file_mode now does. Martin Pihlak 	3ec694e17bc01cec4ae2000847f25e3d549888c0
----------------------------
Add a paragraph explaining what restartpoints are. Mention that wal_keep_segments does not take effect during recovery. Fujii Masao 	8f9c46117569131e63f36dbd5412f68d9ab167b2
----------------------------
Use an <xref> for restore_command reference.  Marko Tiikkaja 	25be9b1d54ad956d17bbee3e377b82b5f7d934b6
----------------------------
Print each test_fsync description while test is running, rather than at the end. 	bae8283557e08c71c263288b32ebcbaa86b152ca
----------------------------
In pg_upgrade, prevent psql AUTOCOMMIT=off by not loading .psqlrc. 	804f96accbfe25a13f464788f0b8f1266430cedc
----------------------------
Make log_temp_files based on kB, and revert docs & comments to match. Per extensive discussion on pgsql-hackers.  We are deliberately not back-patching this even though the behavior of 8.3 and 8.4 is unquestionably broken, for fear of breaking existing users of this parameter.  This incompatibility should be release-noted. 	20be0d480a167c86b505d9a3b477441446c4e999
----------------------------
Accept slightly grotty coding in Makefile.global in order to keep the -L flag for src/port/ in front of any -L flags placed in LDFLAGS by configure. This undoes an L-flag-ordering change that I had thought would be safe, but seems to be making at least one buildfarm member fail --- the only theory for orca's failure that I can think of is that it's got an old copy of libpgport.a in /usr/lib.  Also allow for LDFLAGS_SL to be set by contrib makefiles before they invoke Makefile.global. 	458474d9d7ff552d697f8a85a61113582c86ae3a
----------------------------
Simplify test_fsync duration computation. 	2330d9c1475a70385b116fda6cc54ac2cc2939c4
----------------------------
"Make vacuum_defer_cleanup_age be PGC_SIGHUP level, since it's not sensible to have different values in different processes of the primary server. Also put it into the ""Streaming Replication"" GUC category; it doesn't belong in ""Standby Servers"" because you use it on the master not the standby. In passing also correct guc.c's idea of wal_keep_segments' category. "	aceedd88f612472dae447fb59077abe8ed22f1f6
----------------------------
"Replace max_standby_delay with two parameters, max_standby_archive_delay and max_standby_streaming_delay, and revise the implementation to avoid assuming that timestamps found in WAL records can meaningfully be compared to clock time on the standby server.  Instead, the delay limits are compared to the elapsed time since we last obtained a new WAL segment from archive or since we were last ""caught up"" to WAL data arriving via streaming replication. This avoids problems with clock skew between primary and standby, as well as other corner cases that the original coding would misbehave in, such as the primary server having significant idle time between transactions. Per my complaint some time ago and considerable ensuing discussion. Do some desultory editing on the hot standby documentation, too. "	e76c1a0f4d2127f11c72c02b3d73a5dcb4517173
----------------------------
Document that shared_preload_libraries and local_preload_libraries lowercase the library names, unless double-quoted. 	5016b69cf1302b941ee3a0c5daa66fd1e920e091
----------------------------
Add C comment about why synchronous_commit=off behavior can lose committed transactions in a postmaster crash. 	b57ddccf05039bc511e7c4eb3b23933126441bac
----------------------------
Add new Non-Durable Settings documentation section. Document that synchronous_commit can lose transactions in a db crash, not just a OS crash. 	c65f29989493fccd7e0a08ead2435d57c5751dfe
----------------------------
Fix log_temp_files docs and comments to say bytes not kilobytes. stat(2) field st_size returns bytes not kilobytes. Bug found during recent performance tuning for PostgreSQL user. 	3bdd23932b2a1d0dcae5b10e639108c2430ca9f0
----------------------------
Clean up some randomness associated with trace_recovery_messages: don't put the variable declaration in the middle of a bunch of externs, and do use extern where it should be used. 	78e8f0025e3f18855dc0af5916223f9fcfda5706
----------------------------
Don't allow walsender to send WAL data until it's been safely fsync'd on the master.  Otherwise a subsequent crash could cause the master to lose WAL that has already been applied on the slave, resulting in the slave being out of sync and soon corrupt.  Per recent discussion and an example from Robert Haas. Fujii Masao 	07e8b6aabcca3ad9a67681694d955f607e29ce7b
----------------------------
Document new 9.0 behavior of ANALYZE on inheritance hierarchies. In particular, note that autovacuum does not yet understand that it might need to vacuum inheritance parents as a result of changes to the child tables. 	4a969085753d4e6586e60e613f160bf3a956b75d
----------------------------
Add new GUC categories corresponding to sections in docs, and move description for vacuum_defer_cleanup_age to the correct category. Sections in postgresql.conf are also sorted in the same order with docs. Per gripe by Fujii Masao, suggestion by Heikki Linnakangas, and patch by me. 	41f302b52a2f0388a9e9b084d42f18d1904db7ff
----------------------------
New contrib module for use as an archive_cleanup_command, or as a standalone utility for removing files from archive. 	25fee5cfbdcbc8cbc2d1a31f6546d9fc4663c203
----------------------------
Rename restartpoint_command to archive_cleanup_command. 	56834fc759d74d7be645186c09ca65757f12e96a
----------------------------
In standby mode, respect checkpoint_segments in addition to checkpoint_timeout to trigger restartpoints. We used to deliberately only do time-based restartpoints, because if checkpoint_segments is small we would spend time doing restartpoints more often than really necessary. But now that restartpoints are done in bgwriter, they're not as disruptive as they used to be. Secondly, because streaming replication stores the streamed WAL files in pg_xlog, we want to clean it up more often to avoid running out of disk space when checkpoint_timeout is large and checkpoint_segments small. Patch by Fujii Masao, with some minor changes by me. 	71815306e9e1ba7e95752779d2ad51d0c2b9c747
----------------------------
Avoid useless snprintf() call when update_process_title is turned off. Fujii Masao 	36614006e15e2a9d2d866ee57af9320bf482aa7c
----------------------------
Ensure default-only storage parameters for TOAST relations to be initialized with proper values. Affected parameters are fillfactor, analyze_threshold, and analyze_scale_factor. Especially uninitialized fillfactor caused inefficient page usage because we built a StdRdOptions struct in which fillfactor is zero if any reloption is set for the toast table. In addition, we disallow toast.autovacuum_analyze_threshold and toast.autovacuum_analyze_scale_factor because we didn't actually support them; they are always ignored. Report by Rumko on pgsql-bugs on 12 May 2010. Analysis by Tom Lane and Alvaro Herrera. Patch by me. Backpatch to 8.4. 	b5faba1284c4e5108c6fbe577daa33f933e7a4e0
----------------------------
Adjust misleading comment in walsender.c.  We try to send all WAL data that's been written out from shared memory, but the previous phrasing might be read to say that we send only what's been fsync'd. 	3ceb44fa0a96231202b8192dff2f0e517ad534fc
----------------------------
Fix some inconsistent quoting of wal_level values in messages When referring to postgresql.conf syntax, then it's without quotes (wal_level=archive); in narrative it's with double quotes.  But never single quotes. 	cb6038c168cac4fea81175787f3a928cddb7a42e
----------------------------
Fix reference to nonexistent configure option --enable-ssl -> --with-openssl 	af3c7e60eef07edfe90de58c80103fd780124954
----------------------------
Reword fsync and full_page_writes docs to be clearer about when to turn them off. Josh Berkus, with slight wording changes by me. 	6f1932c2490c35e763e147534dd32ca543683471
----------------------------
Change ps_status.c to explicitly track the current logical length of ps_buffer. This saves cycles in get_ps_display() on many popular platforms, and more importantly ensures that get_ps_display() will correctly return an empty string if init_ps_display() hasn't been called yet.  Per trouble report from Ray Stell, in which log_line_prefix %i produced junk early in backend startup. Back-patch to 8.0.  7.4 doesn't have %i and its version of get_ps_display() makes no pretense of avoiding pad junk anyhow. 	ede50726762a6d331d87e1e2d3fd504646d185e8
----------------------------
HS Defer buffer pin deadlock check until deadlock_timeout has expired. During Hot Standby we need to check for buffer pin deadlocks when the Startup process begins to wait, in case it never wakes up again. We previously made the deadlock check immediately on the basis it was cheap, though clearer thinking and prima facie evidence shows that was too simple. Refactor existing code to make it easy to add in deferral of deadlock check until deadlock_timeout allowing a good reduction in deadlock checks since far few buffer pins are held for that duration. It's worth doing anyway, though major goal is to prevent further reports of context switching with high numbers of users on occasional tests. 	f9dbac94767d64f6a1174506b6e61db34729e015
----------------------------
Tell openssl to include the names of the root certs the server trusts in requests for client certs.  This lets a client with a keystore select the appropriate client certificate to send.  In particular, this is necessary to get Java clients to work in all but the most trivial configurations. Per discussion of bug #5468. Craig Ringer 	c3bf3bf2aa0998876fd219fbfcc771fb83594539
----------------------------
More fixes for shutdown during recovery. 1. If we receive a fast shutdown request while in the PM_STARTUP state, process it just as we would in PM_RECOVERY, PM_HOT_STANDBY, or PM_RUN. Without this change, an early fast shutdown followed by Hot Standby causes the database to get stuck in a state where a shutdown is pending (so no new connections are allowed) but the shutdown request is never processed unless we end Hot Standby and enter normal running. 2. Avoid removing the backup label file when a smart or fast shutdown occurs during recovery.  It makes sense to do this once we've reached normal running, since we must be taking a backup which now won't be valid.  But during recovery we must be recovering from a previously taken backup, and any backup label file is needed to restart recovery from the right place. Fujii Masao and Robert Haas 	615704af1e5868c6fc9001ee5daef68db6d10f76
----------------------------
Replace self written 'long long int' configure test by standard 'AC_TYPE_LONG_LONG_INT' macro call. 	29259531c7b48384dba863124aff79e05980b329
----------------------------
"Added a configure test for ""long long"" datatypes. So far this is only used in ecpg and replaces the old test that was kind of hackish. "	555a02f910490b94c48c1c479e9da2e4759ad25f
----------------------------
Fix index entry for lo_compat_privileges, per bug #5467 from KOIZUMI Satoru. 	de98ef62c7fe7a2bf02fafab6a95ae2e138ed075
----------------------------
For pg_upgrade, update template0's datfrozenxid and its relfrozenxids to match the behavior of autovacuum, which does this as the xid advances even if autovacuum is turned off. 	573e446f6f5963a0edad575130743eb75887d087
----------------------------
Refer to pg_ident.conf as config file for username mapping, as it's now used for other things than just ident authentication. Noted by Stephen Frost 	3ef95741026384e97a4adfd24f6dc7b2db9aafc8
----------------------------
Rename PM_RECOVERY_CONSISTENT and PMSIGNAL_RECOVERY_CONSISTENT. The new names PM_HOT_STANDBY and PMSIGNAL_BEGIN_HOT_STANDBY more accurately reflect their actual function. 	ea9968c331ab913d07b0a7eb2c28f29915e39893
----------------------------
Ensure that top level aborts call XLogSetAsyncCommit(). Not doing so simply leads to data waiting in wal_buffers which then causes later commits to potentially do emergency writes and for all forms of replication to be potentially delayed without need or benefit. Issue pointed out exactly by Fujii Masao, following bug report by Robert Haas on a separate though related topic. 	463f151a23242c531890589db3692077aadb05ca
----------------------------
Update config.guess and config.sub 	087b393dabc5309bfdcdfb57ee7bb91debcc6ed5
----------------------------
Cause the archiver process to adopt new postgresql.conf settings (particularly archive_command) as soon as possible, namely just before issuing a new call of archive_command, even when there is a backlog of files to be archived. The original coding would only absorb new settings after clearing the backlog and returning to the outer loop.  Per discussion. Back-patch to 8.3.  The logic in prior versions is a bit different and it doesn't seem worth taking any risks of breaking it. 	4a69624f495363810371a9178b0c5a5f5336e70e
----------------------------
Set per-function GUC settings during validating the function. Now validators work properly even when the settings contain parameters that affect behavior of the function, like search_path. Reported by Erwin Brandstetter. 	5d6d037822ccfae697f0a530e37a70ae1cd7e420
----------------------------
Need to hold ControlFileLock while updating control file. Update minRecoveryPoint in control file when replaying a parameter change record, to ensure that we don't allow hot standby on WAL generated without wal_level='hot_standby' after a standby restart. 	ffe8c7c677197ef8062a71309b14a1847841118c
----------------------------
Change wording so that you don't need to understand that wal_levels form a hierarchy. Per Simon's suggestion. 	c0de88c4152a239cb4df00b538770afbf422adf8
----------------------------
Add cross-reference from wal_level to hot_standby setting. Update the PITR documentation to mention that you need to set wal_level to 'archive' or 'hot_standby', to enable WAL archiving. Per Simon's request. 	f35951619c921442061f788548c14fd5e039b786
----------------------------
Fix replay of XLOG_HEAP_NEWPAGE WAL records to pay attention to the forknum field of the WAL record.  The previous coding always wrote to the main fork, resulting in data corruption if the page was meant to go into a non-default fork. At present, the only operation that can produce such WAL records is ALTER TABLE/INDEX SET TABLESPACE when executed with archive_mode = on. Data corruption would be observed on standby slaves, and could occur on the master as well if a database crash and recovery occurred after committing the ALTER and before the next checkpoint.  Per report from Gordon Shannon. Back-patch to 8.4; the problem doesn't exist in earlier branches because we didn't have a concept of multiple relation forks then. 	e55e6ecfe4e00ecb3f316b7b41d586ea2f12cd48
----------------------------
Clean up some awkward, inaccurate, and inefficient processing around MaxStandbyDelay.  Use the GUC units mechanism for the value, and choose more appropriate timestamp functions for performing tests with it.  Make the ps_activity manipulation in ResolveRecoveryConflictWithVirtualXIDs have behavior similar to ps_activity code elsewhere, notably not updating the display when update_process_title is off and not truncating the display contents at an arbitrarily-chosen length.  Improve the docs to be explicit about what MaxStandbyDelay actually measures, viz the difference between primary and standby servers' clocks, and the possible hazards if their clocks aren't in sync. 	f9ed327f760e7794faecfda54b19515a95ba901d
----------------------------
Update our information about OS X shared memory configuration: it's now possible to set most of the SHM kernel parameters without a reboot. Also, reorder the paragraph to explain the modern configuration method first. There are probably not too many people who still care about how to do it on OS X 10.3 or older. 	05f030837ce2b84cce6511dfba03f0f921866580
----------------------------
Fix multiple memory leaks in PLy_spi_execute_fetch_result: it would leak memory if the result had zero rows, and also if there was any sort of error while converting the result tuples into Python data.  Reported and partially fixed by Andres Freund. Back-patch to all supported versions.  Note: I haven't tested the 7.4 fix. 7.4's configure check for python is so obsolete it doesn't work on my current machines :-(.  The logic change is pretty straightforward though. 	b1bc2f042523e1d192a924484d6a83b7cb6d7465
----------------------------
Adjust error checks in pg_start_backup and pg_stop_backup to make it possible to perform a backup without archive_mode being enabled.  This gives up some user-error protection in order to improve usefulness for streaming-replication scenarios.  Per discussion. 	69f7a4d8e322f7f93d1c6d91c7eabd9d5925a401
----------------------------
"Rename the parameter recovery_connections to hot_standby, to reduce possible confusion with streaming-replication settings.  Also, change its default value to ""off"", because of concern about executing new and poorly-tested code during ordinary non-replicating operation.  Per discussion. In passing do some minor editing of related documentation. "	f0488bd57c3745b5dbed80e884ee5452e77314c9
----------------------------
"Introduce wal_level GUC to explicitly control if information needed for archival or hot standby should be WAL-logged, instead of deducing that from other options like archive_mode. This replaces recovery_connections GUC in the primary, where it now has no effect, but it's still used in the standby to enable/disable hot standby. Remove the WAL-logging of ""unlogged operations"", like creating an index without WAL-logging and fsyncing it at the end. Instead, we keep a copy of the wal_mode setting and the settings that affect how much shared memory a hot standby server needs to track master transactions (max_connections, max_prepared_xacts, max_locks_per_xact) in pg_control. Whenever the settings change, at server restart, write a WAL record noting the new settings and update pg_control. This allows us to notice the change in those settings in the standby at the right moment, they used to be included in checkpoint records, but that meant that a changed value was not reflected in the standby until the first checkpoint after the change. Bump PG_CONTROL_VERSION and XLOG_PAGE_MAGIC. Whack XLOG_PAGE_MAGIC back to the sequence it used to follow, before hot standby and subsequent patches changed it to 0x9003. "	9b8a73326e99821caf33c36c081cb307e17422d4
----------------------------
Add comments about why we set LC_CTYPE in WIN32 for time when we don't actually access it, per information from Hiroshi. 	7eb6e6b48adfe89861923e83aee9f697c50275b0
----------------------------
Fix encoding issue when lc_monetary or lc_numeric are different encoding from lc_ctype, that could happen on Windows. We need to change lc_ctype together with lc_monetary or lc_numeric, and convert strings in lconv from lc_ctype encoding to the database encoding. The bug reported by Mikko, original patch by Hiroshi Inoue, with changes by Bruce and me. 	95a777c612c6dcebe2f17c57c35f7e7c93714484
----------------------------
Enforce superuser permissions checks during ALTER ROLE/DATABASE SET, rather than during define_custom_variable().  This entails rejecting an ALTER command if the target variable doesn't have a known (non-placeholder) definition, unless the calling user is superuser.  When the variable *is* known, we can correctly apply the rule that only superusers can issue ALTER for SUSET parameters.  This allows define_custom_variable to apply ALTER's values for SUSET parameters at module load time, secure in the knowledge that only a superuser could have set the ALTER value.  This change fixes a longstanding gotcha in the usage of SUSET-level custom parameters; which is a good thing to fix now that plpgsql defines such a parameter. 	a6dcd19a2a5064d753c1d5aa756a2d50cf05842d
----------------------------
Rename standby_keep_segments to wal_keep_segments. Also, make the name of the GUC and the name of the backing variable match. Alnong the way, clean up a couple of slight typographical errors in the related docs. 	481cb5d9b506069a6fbe2a7069b576e8eb2f2cde
----------------------------
Update docs as to when WAL logging can be skipped. In 8.4 and prior, WAL-logging could potentially be skipped whenever archive_mode=off.  With streaming replication, this is now true only if max_wal_senders=0. Fujii Masao, with light copyediting by me 	ee7769bb7649e0f990179f9ed56e60c031542077
----------------------------
Add an 'enable_material' GUC. The logic for determining whether to materialize has been significantly overhauled for 9.0.  In case there should be any doubt about whether materialization is a win in any particular case, this should provide a convenient way of seeing what happens without it; but even with enable_material turned off, we still materialize in cases where it is required for correctness. Thanks to Tom Lane for the review. 	5b89ef384c7719478bb08b0c771dcbfdc51d507e
----------------------------
Provide better guidance for adjusting shared_buffers. 	7b130fbc503a1bfabf58c0c67cf8461e33fcc680
----------------------------
On Windows, syslogger runs in two threads. The main thread processes config reload and rotation signals, and a helper thread reads messages from the pipe and writes them to the log file. However, server code isn't generally thread-safe, so if both try to do e.g palloc()/pfree() at the same time, bad things will happen. To fix that, use a critical section (which is like a mutex) to enforce that only one the threads are active at a time. 	961ad3fdd95f621e34a1680e42ff859f0bcb5682
----------------------------
Document that autovacuum cannot vacuum or analyze temporary tables. 	b4fd1e246e6edf08b2b7ce4d5af7704ce0c75a26
----------------------------
Remove example of archive_command from configure section;  instead have users look at the referenced section for examples, per idea from Greg Smith. 	325e9cb3a06b6e35968ad8eee4a606c64519fac9
----------------------------
Arrange to remove pg_default_acl entries completely if their ACL setting is changed to match the hard-wired default.  This avoids accumulating useless catalog entries, and also provides a path for dropping the owning role without using DROP OWNED BY.  Per yesterday's complaint from Jaime Casanova, the need to use DROP OWNED BY for that is less than obvious, so providing this alternative method might save some user frustration. 	60bd2b1941c6211e973770e69cfa33367cc5db48
----------------------------
Fix updateAclDependencies() to not assume that ACL role dependencies can only be added during GRANT and can only be removed during REVOKE; and fix its callers to not lie to it about the existing set of dependencies when instantiating a formerly-default ACL.  The previous coding accidentally failed to malfunction so long as default ACLs contain only references to the object's owning role, because that role is ignored by updateAclDependencies.  However this is obviously pretty fragile, as well as being an undocumented assumption. The new coding is a few lines longer but IMO much clearer. 	9029df17c4a885b83ea2b000b4114d438578a51a
----------------------------
"Allow for more room in the man page title, so that ""CREATE TEXT SEARCH CONFIGURATION"" is not truncated. "	7969145483e45298d754ee70f857817962377f8f
----------------------------
Check compulsory parameters in recovery.conf in standby_mode, per docs. 	cf2575b8c42605834f2deddca4a07756345194ec
----------------------------
Refer to max_wal_senders in a more consistent fashion. The error message now makes explicit reference to the GUC that must be changed to fix the problem, using wording suggested by Tom Lane.  Along the way, rename the GUC from MaxWalSenders to max_wal_senders for consistency and grep-ability. 	54943734f8fca3a9092564f31a7c9c6b8a58c7bc
----------------------------
Clarify ellipses use in archive_command example, per Josh Kupershmidt. 	c2af244021cf46da928d1e0f4f7f67f9761a193f
----------------------------
"Fix ""constraint_exclusion = partition"" logic so that it will also attempt constraint exclusion on an inheritance set that is the target of an UPDATE or DELETE query.  Per gripe from Marc Cousin.  Back-patch to 8.4 where the feature was introduced. "	d174a4adbb7423ee5ff30aa98043db4521ffd1be
----------------------------
Edit recovery.conf.sample so it matches docs. Change standby_mode example to 'on or 'off' rather than 'true' or 'false', as shown in docs. Add restartpoint_command. Add section header for recovery target parameters, matching docs. 	de66effede5f7cb6da258e1bfe6fc508ad4cf940
----------------------------
Clear error_context_stack and debug_query_string at the beginning of proc_exit, so that we won't try to attach any context printouts to messages that get emitted while exiting.  Per report from Dennis Koegel, the context functions won't necessarily work after we've started shutting down the backend, and it seems possible that debug_query_string could be pointing at freed storage as well.  The context information doesn't seem particularly relevant to such messages anyway, so there's little lost by suppressing it. Back-patch to all supported branches.  I can only demonstrate a crash with log_disconnections messages back to 8.1, but the risk seems real in 8.0 and before anyway. 	f784f05e95c14bc4234e27db54a220818161c3ac
----------------------------
Clarify docs about database parameter in streaming replication primary_conninfo. Docs were unclear on whether or not database=replication was required, nor did they mention the FATAL error this causes if database parameter is mentioned explicitly, whatever its value. 	f42ddc477297a6cac9cc403a65b268f2b578b621
----------------------------
Add connection messages for streaming replication. log_connections was broken for a replication connection and no messages were displayed on either standby or primary, at any debug level. Connection messages needed to diagnose session drop/reconnect events. Use LOG mode for now, discuss lowering in later releases. 	6a771d1d367d7e204edf78aee3f069f1b5ba36db
----------------------------
Add restartpoint_command option to recovery.conf. Fix bug in %r handling in recovery_end_command, it always came out as 0 because InRedo was cleared before recovery_end_command was executed. Also, always take ControlFileLock when reading checkpoint location for %r. The recovery_end_command bug and the missing locking was present in 8.4 as well, that part of this patch will be backported separately. 	c21ac0b58e8c3bb050d87e213a6f4524b01b2a6d
----------------------------
Add vacuum_defer_cleanup_age to postgresql.conf.sample. 	6407fa996a0f2a9da1fbb91fd47afe97f5743be8
----------------------------
Update shared memory configuration information for Linux In particular, the assertion that shmall is sufficiently sized by default is slowly becoming untrue. 	8b2ae44dc8dd56511c7004c5b117b720081dc8fb
----------------------------
Second try at fsyncing directories in CREATE DATABASE. Let's see what the build farm says of opening directories read-only and ignoring EBADF from fsync of directories 	7d7db18a68b7a16df85e8dc9d345b3ee7f39d460
----------------------------
Document trace_recovery_messages() parameter as an enum, not string. Fujii Masao 	c685b942e532e0937d3495967fc0446dcf2a09e6
----------------------------
Document clearly the meaning of none/all for log_statements. 	1951c97805d52e56b3fbdb2618fcde56d11a79f4
----------------------------
Add configuration parameter ssl_renegotiation_limit to control how often we do SSL session key renegotiation. Can be set to 0 to disable renegotiation completely, which is required if a broken SSL library is used (broken patches to CVE-2009-3555 a known cause) or when using a client library that can't do renegotiation. 	413d34be4e1f47ce52b02a6c60858ef6f1285578
----------------------------
Clarify that the connection string for primary_conninfo is in the same format as in PQconnectdb(). As pointed out by Thom Brown. 	0a4807dd93895924ae43d9636b2bf0a3354f3b90
----------------------------
Fix configure's regexp for extracting the Perl version number from perl -v output.  Per bug #5339, Perl 5.11 has changed the format of that output enough to break the previous coding. Alex Hunsaker 	dc43e2f54064504426f7f8d9219608476bd27415
----------------------------
Some platforms reject fsync() on files opened O_RDONLY. 	c3a24e3143e35af141145cdb082a6e66dded922b
----------------------------
"Revert configure warning to use ""official distribution"". "	b4689bfb00a6d256a74a0c275378a0b42a22acfd
----------------------------
"Use the term ""bundled distribution"" instead of ""official distribution"" in configure warnings. "	6a0b6421e27a27f35d847024dca33750403859ab
----------------------------
Let's try forcing errno to zero before issuing fsync.  The current buildfarm results claiming EBADF seem improbable enough that I'm not convinced fsync is really returning that --- could it be failing to set errno at all? 	9dd6c4686bc496912f1b4958139931ef6a6f029b
----------------------------
Adjust pg_fsync_writethrough so that it will set errno when failing on a platform that doesn't support this operation.  The former coding would allow an unrelated errno to be reported, which would be quite misleading.  Not sure if this has anything to do with the current buildfarm failures, but it's certainly bogus as-is. 	e9a383303ce2f47a2733419e8d23e9e5a20b5ff2
----------------------------
Oops, don't forget to rewind the directory before scanning it to fsync files in CREATE DATABASE 	b21121cd3d5f2b9045a02a9dd43ff98a102e0def
----------------------------
Reduce the rescan cost estimate for Materialize nodes to cpu_operator_cost per tuple, instead of the former cpu_tuple_cost.  It is sane to charge less than cpu_tuple_cost because Materialize never does any qual-checking or projection, so it's got less overhead than most plan node types.  In particular, we want to have the same charge here as is charged for readout in cost_sort.  That avoids the problem recently exhibited by Teodor wherein the planner prefers a useless sort over a materialize step in a context where a lot of rescanning will happen.  The rescan costs should be just about the same for both node types, so make their estimates the same. Not back-patching because all of the current logic for rescan cost estimates is new in 9.0.  The old handling of rescans is sufficiently not-sane that changing this in that structure is a bit pointless, and might indeed cause regressions. 	3f56ca1d4985bd61af329474a3c654a1eb360c47
----------------------------
log_error_verbosity is now LOGGING_WHAT category. 	9cbcfca44a25bb066cbc36abf18d74613984ae19
----------------------------
"Move log_error_verbosity GUC setting to ""What to log"" section, and document the behavior of terse and verbose output options. "	813135d8c98e2f2d6d646150005148d79f4f4e25
----------------------------
Temporarily disable fsyncing the database directory in CREATE DATABASE until we can work out portability issues the build farm uncovered. In passing avoid fsyncing subdirectories twice. 	68cfc75a72fa3617ba157e4c7d10616d35fa0d07
----------------------------
Speed up CREATE DATABASE by deferring the fsyncs until after copying all the data and using posix_fadvise to nudge the OS into flushing it earlier. This also hopefully makes CREATE DATABASE avoid spamming the cache. Tests show a big speedup on Linux at least on some filesystems. Idea and patch from Andres Freund. 	f8c183a1ac02aef14832c1f29946ef2bcb5866b7
----------------------------
"Make CREATE DATABASE safe against losing whole files by fsyncing the directory and not just the individual files. Back-patch to 8.1 -- before that we just called ""cp -r"" and never fsynced anything anyways. "	1012492bc0bfb322d59db17e17735d17d634e264
----------------------------
"Support inlining various small performance-critical functions on non-GCC compilers, by applying a configure check to see if the compiler will accept an unreferenced ""static inline foo ..."" function without warnings.  It is believed that such warnings are the only reason not to declare inlined functions in headers, if the compiler understands ""inline"" at all. Kurt Harriman "	e08ab7c3127c10d419e91072c68e1bfeaab025b8
----------------------------
If primary_conninfo is not set, don't try to establish streaming connection. 	54cbd1757e6fe166673f66455557f0397b01e17c
----------------------------
"Check for partial WAL files in standby mode. If restore_command restores a partial WAL file, assume it's because the file is just being copied to the archive and treat it the same as ""file not found"" in standby mode. pg_standby has a similar check, so it seems reasonable to have the same level of protection in the built-in standby mode. "	9fa01f6c8acbae4568f5e7b3d682235dd67c3a74
----------------------------
Document that archive_timeout will force new WAL files  even if a single checkpoint has happened, and recommend adjusting checkpoint_timeout to reduce the impact of this. 	4b113d9cdc8654e3f979497e057c7f9062bfa612
----------------------------
Get rid of unportable use of socklen_t --- we have a configure test for that, so use it. 	4913efc6244b09e70752e6dab93caaec14c11365
----------------------------
Fix crashing bug at the end of recovery in Streaming Replication, when restore_command is not given. Fujii Masao. 	b0509ef6016abf1133a9d85dd4f60b865ee9f90b
----------------------------
Introduce two new libpq connection functions, PQconnectdbParams and PQconnectStartParams. These are analogous to PQconnectdb and PQconnectStart respectively. They differ from the legacy functions in that they accept two NULL-terminated arrays, keywords and values, rather than conninfo strings. This avoids the need to build the conninfo string in cases where it might be inconvenient to do so. Includes documentation. Also modify psql to utilize PQconnectdbParams rather than PQsetdbLogin. This allows the new config parameter application_name to be set, which in turn is displayed in the pg_stat_activity view and included in CSV log entries. This will also ensure both new functions get regularly exercised. Patch by Guillaume Lelarge with review and minor adjustments by Joe Conway. 	e3f36838e5b2666a15286b137bb11f35a7245848
----------------------------
Make standby server continuously retry restoring the next WAL segment with restore_command, if the connection to the primary server is lost. This ensures that the standby can recover automatically, if the connection is lost for a long time and standby falls behind so much that the required WAL segments have been archived and deleted in the master. This also makes standby_mode useful without streaming replication; the server will keep retrying restore_command every few seconds until the trigger file is found. That's the same basic functionality pg_standby offers, but without the bells and whistles. To implement that, refactor the ReadRecord/FetchRecord functions. The FetchRecord() function introduced in the original streaming replication patch is removed, and all the retry logic is now in a new function called XLogReadPage(). XLogReadPage() is now responsible for executing restore_command, launching walreceiver, and waiting for new WAL to arrive from primary, as required. This also changes the life cycle of walreceiver. When launched, it now only tries to connect to the master once, and exits if the connection fails, or is lost during streaming for any reason. The startup process detects the death, and re-launches walreceiver if necessary. 	1bb2558046cc8b8cb0c8f5563e8d32b3b120c9ec
----------------------------
Re-order configure tests to reflect the fact that the code generated for posix_fadvise and other file-related functions can depend on _LARGEFILE_SOURCE and/or _FILE_OFFSET_BITS.  Per report from Robert Treat. Back-patch to 8.4.  This has been wrong all along, but we weren't really using posix_fadvise in anger before, and AC_FUNC_FSEEKO seems to mask the issue well enough for that function. 	a6c75be23d192f286ffaa5cbd546515052a46161
----------------------------
Tidy up and refactor plperl.c. - Changed MULTIPLICITY check from runtime to compiletime. No loads the large Config module. - Changed plperl_init_interp() to return new interp and not alter the global interp_state - Moved plperl_safe_init() call into check_interp(). - Removed plperl_safe_init_done state variable as interp_state now covers that role. - Changed plperl_create_sub() to take a plperl_proc_desc argument. - Simplified return value handling in plperl_create_sub. - Changed perl.com link in the docs to perl.org and tweaked wording to clarify that require, not use, is what's blocked. - Moved perl code in large multi-line C string literal macros out to plc_*.pl files. - Added a test2macro.pl utility to convert the plc_*.pl files to macros in a perlchunks.h file which is #included - Simplifed plperl_safe_init() slightly - Optimized pg_verifymbstr calls to avoid unneeded strlen()s. Patch from Tim Bunce, with minor editing from me. 	a2b34b16bed5699aa3ba407d9a412df65f448323
----------------------------
Make configure check the version of Perl we're building with, and reject versions < 5.8.  Also, if there's no Perl, emit a warning informing the user that he won't be able to build from a CVS pull.  This is exactly the same treatment we give Bison and Perl, and for the same reasons. 	55233c3382ed5b9981f232e2f43003dab84c3925
----------------------------
Alter the configure script to fail immediately if the C compiler does not provide a working 64-bit integer datatype.  As recently noted, we've been broken on such platforms since early in the 8.4 development cycle.  Since it took nearly two years for anyone to even notice, it seems that the rationale for continuing to support such platforms has reached the point of non-existence.  Rather than thrashing around to try to make it work again, we'll just admit up front that this no longer works. Back-patch to 8.4 since that branch is also broken. We should go around to remove INT64_IS_BUSTED support, but just in HEAD, so that seems like material for a separate commit. 	d15cb38dec01fcc8d882706a3fa493517597c76b
----------------------------
Support ALTER TABLESPACE name SET/RESET ( tablespace_options ). This patch only supports seq_page_cost and random_page_cost as parameters, but it provides the infrastructure to scalably support many more. In particular, we may want to add support for effective_io_concurrency, but I'm leaving that as future work for now. Thanks to Tom Lane for design help and Alvaro Herrera for the review. 	d86d51a95810caebcea587498068ff32fe28293e
----------------------------
Move the default configuration for the MSVC build system to config_default.pl, and allow using config.pl to override the defaults. config.pl is removed from the repository, so changes there will no longer show up when doing diff, and will not prevent switching branches and such things. config.pl would normally be used to override single values, but if an old-style config.pl is read, it will override the entire default configuration, making it backwards compatible. 	af322a8a3ef28d9b0425238353a8bffa94bfaa47
----------------------------
Add the ability to store inheritance-tree statistics in pg_statistic, and teach ANALYZE to compute such stats for tables that have subclasses. Per my proposal of yesterday. autovacuum still needs to be taught about running ANALYZE on parent tables when their subclasses change, but the feature is useful even without that. 	649b5ec7c8a3050a30bd6d36003ba3a681c9a198
----------------------------
More cleanups for the recent large object permissions patch. Rewrite or adjust various comments for clarity.  Remove one bogus comment that doesn't reflect what the code actually does.  Improve the description of the lo_compat_privileges option. 	c7e4be59ae389f73b5d5145603eb8e4f2ba5a748
----------------------------
Add a whitespace to fix the query to dump large objects. PL/pgSQL-by-default patch broke the code for 8.3 <= server_version < 8.5. 	ce1489fa942a0e5713456563afb8debaefeecd38
----------------------------
Add an EXPLAIN (BUFFERS) option to show buffer-usage statistics. This patch also removes buffer-usage statistics from the track_counts output, since this (or the global server statistics) is deemed to be a better interface to this information. Itagaki Takahiro, reviewed by Euler Taveira de Oliveira. 	cddca5ec13d27017281422124cae0480cddfb663
----------------------------
"Prevent indirect security attacks via changing session-local state within an allegedly immutable index function.  It was previously recognized that we had to prevent such a function from executing SET/RESET ROLE/SESSION AUTHORIZATION, or it could trivially obtain the privileges of the session user.  However, since there is in general no privilege checking for changes of session-local state, it is also possible for such a function to change settings in a way that might subvert later operations in the same session. Examples include changing search_path to cause an unexpected function to be called, or replacing an existing prepared statement with another one that will execute a function of the attacker's choosing. The present patch secures VACUUM, ANALYZE, and CREATE INDEX/REINDEX against these threats, which are the same places previously deemed to need protection against the SET ROLE issue.  GUC changes are still allowed, since there are many useful cases for that, but we prevent security problems by forcing a rollback of any GUC change after completing the operation.  Other cases are handled by throwing an error if any change is attempted; these include temp table creation, closing a cursor, and creating or deleting a prepared statement.  (In 7.4, the infrastructure to roll back GUC changes doesn't exist, so we settle for rejecting changes of ""search_path"" in these contexts.) Original report and patch by Gurjeet Singh, additional analysis by Tom Lane. Security: CVE-2009-4136 "	62aba76568e58698ad5eaa6153bc45186aacbde2
----------------------------
Speed up information schema privilege views Instead of expensive cross joins to resolve the ACL, add table-returning function aclexplode() that expands the ACL into a useful form, and join against that. Also, implement the role_*_grants views as a thin layer over the respective *_privileges views instead of essentially repeating the same code twice. fixes bug #4596 by Joachim Wieland, with cleanup by me 	36f887c41c294d0035d84dfac75b4cc68a514950
----------------------------
Information schema documentation Add a sentence of documentation about the differences between the *_privileges and the role_*_grants views. 	636bac6e4617caa60dbbd5a2e3f4cf7afa88281a
----------------------------
Mark application_name as GUC_REPORT so that the value will be reported back to the client by the server.  This might seem pretty pointless but apparently it will help pgbouncer, and perhaps other connection poolers.  Anyway it's practically free to do so for the normal use-case where appname is only set in the startup packet --- we're just adding a few more bytes to the initial ParameterStatus response packet.  Per comments from Marko Kreen. 	59ed94ad0c9f74a3f057f359316c845cedc4461e
----------------------------
Instead of sending application_name as a SET command after the connection is made, include it in the startup-packet options.  This makes it work more like every other libpq connection option, in particular it now has the same response to RESET ALL as the rest.  This also saves one network round trip for new applications using application_name.  The cost is that if the server is pre-8.5, it'll reject the startup packet altogether, forcing us to retry the entire connection cycle.  But on balance we shouldn't be optimizing that case in preference to the behavior with a new server, especially when doing so creates visible behavioral oddities.  Per discussion. 	3dfcf8cc15aeae3d30a0470b7d6bd5d4d462805d
----------------------------
THREAD_SUPPORT There is no reference to THREAD_SUPPORT outside configure, and it is never set, so remove it. 	891f924bad098b0e8ede5f76747de9b55eb0b3e1
----------------------------
Make pg_stat_activity.application_name visible to all users, rather than being hidden when current_query is.  Relocate it to a column position more consistent with that behavior.  Per discussion. 	0c61cff57a1dc7685fcac9f09451b261f14cb711
----------------------------
Add support for an application_name parameter, which is displayed in pg_stat_activity and recorded in log entries. Dave Page, reviewed by Andres Freund 	8217cfbd991856d25d73b0f7afcf43d99f90b653
----------------------------
fsync test tools Add link to exteran fsync testing script and our fsync test tool. 	cb98f615383ccf2f9f339b4e812b23e840b12d9f
----------------------------
test_fsync: Improve test descriptions displayed during test_fsync;  increase default loops to 5k. 	017c47bf51f47b61df04ef563bab0424e9975858
----------------------------
"Add a hook to CREATE/ALTER ROLE to allow an external module to check the strength of database passwords, and create a sample implementation of such a hook as a new contrib module ""passwordcheck"". Laurenz Albe, reviewed by Takahiro Itagaki "	c742b795ddce852975c513a04c29966420937553
----------------------------
Make unaccent's install/uninstall scripts look more like all the others. Set search_path explicitly, don't use IF EXISTS, etc. 	29faadcd2780f74550d6a983a81bc6bad3967bd6
----------------------------
The recent patch to log changes in postgresql.conf settings dumped core if the initial value of a string variable was NULL, which is entirely possible.  Noted while experimenting with custom_variable_classes. 	0894c6b83862f1d091e3c37713e6e5db355248ef
----------------------------
In psql \du, separate the role attributes by comma instead of newline, for an arguably more pleasant display. 	60cd1f182943448eeb662b0f73ecb985ad9cc26e
----------------------------
Fix longstanding problems in VACUUM caused by untimely interruptions In VACUUM FULL, an interrupt after the initial transaction has been recorded as committed can cause postmaster to restart with the following error message: PANIC: cannot abort transaction NNNN, it was already committed This problem has been reported many times. In lazy VACUUM, an interrupt after the table has been truncated by lazy_truncate_heap causes other backends' relcache to still point to the removed pages; this can cause future INSERT and UPDATE queries to error out with the following error message: could not read block XX of relation 1663/NNN/MMMM: read only 0 of 8192 bytes The window to this race condition is extremely narrow, but it has been seen in the wild involving a cancelled autovacuum process. The solution for both problems is to inhibit interrupts in both operations until after the respective transactions have been committed.  It's not a complete solution, because the transaction could theoretically be aborted by some other error, but at least fixes the most common causes of both problems. 	e7ec0222660636870ad85cde25cf1778c9d82a0b
----------------------------
"Make the overflow guards in ExecChooseHashTableSize be more protective. The original coding ensured nbuckets and nbatch didn't exceed INT_MAX, which while not insane on its own terms did nothing to protect subsequent code like ""palloc(nbatch * sizeof(BufFile *))"".  Since enormous join size estimates might well be planner error rather than reality, it seems best to constrain the initial sizes to be not more than work_mem/sizeof(pointer), thus ensuring the allocated arrays don't exceed work_mem.  We will allow nbatch to get bigger than that during subsequent ExecHashIncreaseNumBatches calls, but we should still guard against integer overflow in those palloc requests.  Per bug #5145 from Bernt Marius Johnsen. Although the given test case only seems to fail back to 8.2, previous releases have variants of this issue, so patch all supported branches. "	8442317beb8fb6f180880a977c03ccae4304df25
----------------------------
In the configure check for the Python distutils module, use a less obscure shell construct to hide away the stderr output.  Python 3.1 actually core dumps on the current invocation (http://bugs.python.org/issue7111), but the new version also has the more general advantage of saving the error message in config.log for analysis. 	de7ee9e2e9baad7d575ef4fd177f96f3a32678d8
----------------------------
"Add ""\pset linestyle ascii/unicode"" option to psql, allowing our traditional ASCII-art style of table output to be upgraded to use Unicode box drawing characters if desired.  By default, psql will use the Unicode characters whenever client_encoding is UTF8. The patch forces linestyle=ascii in pg_regress usage, ensuring we don't break the regression tests in Unicode locales. Roger Leigh "	42ec8ad6286be046d86fc9f09bb4cdeefc395bfe
----------------------------
Make it possibly to specify GUC params per user and per database. Create a new catalog pg_db_role_setting where they are now stored, and better encapsulate the code that deals with settings into its realm.  The old datconfig and rolconfig columns are removed. psql has gained a \drds command to display the settings. Backwards compatibility warning: while the backwards-compatible system views still have the config columns, they no longer completely represent the configuration for a user or database. Catalog version bumped. 	2eda8dfb52ed9962920282d8384da8bb4c22514d
----------------------------
Create an ALTER DEFAULT PRIVILEGES command, which allows users to adjust the privileges that will be applied to subsequently-created objects. Such adjustments are always per owning role, and can be restricted to objects created in particular schemas too.  A notable benefit is that users can override the traditional default privilege settings, eg, the PUBLIC EXECUTE privilege traditionally granted by default for functions. Petr Jelinek 	249724cb014bd341cf51a8c4284fca9767a556d1
----------------------------
Document the purpose of the GUC listen_addresses. 	41f89e3bbc3138d82fe26084236f9687414091e4
----------------------------
Fix assorted memory leaks in pg_hba.conf parsing.  Over a sufficiently large number of SIGHUP cycles, these would have run the postmaster out of memory.  Noted while testing memory-leak scenario in postgresql.conf configuration-change-printing patch. 	35a173ab335a2a1842b5d81f58cb9f0f10a22aff
----------------------------
Fix a couple of issues in recent patch to print updates to postgresql.conf settings: avoid calling superuser() in contexts where it's not defined, don't leak the transient copies of GetConfigOption output, and avoid the whole exercise in postmaster child processes. I found that actually no current caller of GetConfigOption has any use for its internal check of GUC_SUPERUSER_ONLY.  But rather than just remove that entirely, it seemed better to add a parameter indicating whether to enforce the check. Per report from Simon and subsequent testing. 	54d60bbd075a61c7dd2ef384dc930d726d68ee64
----------------------------
Fix erroneous handling of shared dependencies (ie dependencies on roles) in CREATE OR REPLACE FUNCTION.  The original code would update pg_shdepend as if a new function was being created, even if it wasn't, with two bad consequences: pg_shdepend might record the wrong owner for the function, and any dependencies for roles mentioned in the function's ACL would be lost. The fix is very easy: just don't touch pg_shdepend at all when doing a function replacement. Also update the CREATE FUNCTION reference page, which never explained exactly what changes and doesn't change in a function replacement. In passing, fix the CREATE VIEW reference page similarly; there's no code bug there, but the docs didn't say what happens. 	d691cb91415542e398aa6ad015ea6a5eab53ab0d
----------------------------
fsync test files Prevent creation of 16GB files during fsync testing; only create 16MB files;  backpatch to 8.4.X. 	c6bc0feb007e42a3e81aaa95c3afc9592b4e2707
----------------------------
Fix two distinct errors in creation of GIN_INSERT_LISTPAGE xlog records. In practice these mistakes were always masked when full_page_writes was on, because XLogInsert would always choose to log the full page, and then ginRedoInsertListPage wouldn't try to do anything.  But with full_page_writes off a WAL replay failure was certain. The GIN_INSERT_LISTPAGE record type could probably be eliminated entirely in favor of using XLOG_HEAP_NEWPAGE, but I refrained from doing that now since it would have required a significantly more invasive patch. In passing do a little bit of code cleanup, including making the accounting for free space on GIN list pages more precise.  (This wasn't a bug as the errors were always in the conservative direction.) Per report from Simon.  Back-patch to 8.4 which contains the identical code. 	384cad5c7b773da29c26fc08a7c969b35c94cb54
----------------------------
Document that autovacuum_max_workers can only be set at server start per Joshua Tolley 	6689ce3e6aba88682b9e7e276daa3c4c58e7df24
----------------------------
Improve GRANT reference page's description of object ownership privileges by mentioning the possibility of granting membership in the owning role. 	5f1b32ddf826550d65dd6e84b965b6a98589ad19
----------------------------
Increase the maximum value of extra_float_digits to 3, and have pg_dump use that value when the backend is new enough to allow it.  This responds to bug report from Keh-Cheng Chu pointing out that although 2 extra digits should be sufficient to dump and restore float8 exactly, it is possible to need 3 extra digits for float4 values. 	8c5463a51176c8d2a01fcf154d7ac33fa9a74f6a
----------------------------
"Add a boolean GUC parameter ""bonjour"" to control whether a Bonjour-enabled build actually attempts to advertise itself via Bonjour.  Formerly it always did so, which meant that packagers had to decide for their users whether this behavior was wanted or not.  The default is ""off"" to be on the safe side, though this represents a change in the default behavior of a Bonjour-enabled build.  Per discussion. "	eeb6cb143a005641841e718cb8638bc0c684ec25
----------------------------
Replace use of the long-deprecated Bonjour API DNSServiceRegistrationCreate with the not-so-deprecated DNSServiceRegister.  This patch shouldn't change any user-visible behavior, it just gets rid of a deprecation warning in --with-bonjour builds.  The new code will fail on OS X releases before 10.3, but it seems unlikely that anyone will want to run Postgres 8.5 on 10.2. 	59b9f3d36d56fa2bc998c4169f650b0a501874ea
----------------------------
Disallow RESET ROLE and RESET SESSION AUTHORIZATION inside security-definer functions. This extends the previous patch that forbade SETting these variables inside security-definer functions.  RESET is equally a security hole, since it would allow regaining privileges of the caller; furthermore it can trigger Assert failures and perhaps other internal errors, since the code is not expecting these variables to change in such contexts.  The previous patch did not cover this case because assign hooks don't really have enough information, so move the responsibility for preventing this into guc.c. Problem discovered by Heikki Linnakangas. Security: no CVE assigned yet, extends CVE-2007-6600 	187e5d8981210c00f7f824de4926d036006d5b02
----------------------------
Force VACUUM to recalculate oldestXmin even when we haven't changed our own database's datfrozenxid, if the current value is old enough to be forcing autovacuums or warning messages.  This ensures that a bogus value is replaced as soon as possible.  Per a comment from Heikki. 	794e3e81a0e8068de2606015352c1254cb071a78
----------------------------
"Change the autovacuum launcher to read pg_database directly, rather than via the ""flat files"" facility.  This requires making it enough like a backend to be able to run transactions; it's no longer an ""auxiliary process"" but more like the autovacuum worker processes.  Also, its signal handling has to be brought into line with backends/workers.  In particular, since it now has to handle procsignal.c processing, the special autovac-launcher-only signal conditions are moved to SIGUSR2. Alvaro, with some cleanup from Tom "	00e6a16d01683762c2f34eb4909fc739093ab3bf
----------------------------
Track the current XID wrap limit (or more accurately, the oldest unfrozen XID) in checkpoint records.  This eliminates the need to recompute the value from scratch during database startup, which is one of the two remaining reasons for the flatfile code to exist.  It should also simplify life for hot-standby operation. To avoid bloating the checkpoint records unreasonably, I switched from tracking the oldest database by name to tracking it by OID.  This turns out to save cycles in general (everywhere but the warning-generating paths, which we hardly care about) and also helps us deal with the case that the oldest database got dropped instead of being vacuumed.  The prior coding might go for a long time without updating the wrap limit in that case, which is bad because it might result in a lot of useless autovacuum activity. 	25ec228ef760eb91c094cc3b6dea7257cc22ffb5
----------------------------
Fix handling of autovacuum reloptions. In the original coding, setting a single reloption would cause default values to be used for all the other reloptions.  This is a problem particularly for autovacuum reloptions. Itagaki Takahiro 	53af86c55c1634d1ec7c9f6fefec5cf591967bc5
----------------------------
Update of install-sh, mkinstalldirs, and associated configury Update install-sh to that from Autoconf 2.63, plus our Darwin-specific changes (which I simplified a bit).  install-sh is now able to install multiple files in one run, so we could simplify our makefiles sometime. install-sh also now has a -d option to create directories, so we don't need mkinstalldirs anymore. Use AC_PROG_MKDIR_P in configure.in, so we can use mkdir -p when available instead of install-sh -d.  For consistency with the rest of the world, the corresponding make variable has been renamed from $(mkinstalldirs) to $(MKDIR_P). 	9d182ef002b15c873074c710b709149450ddbcd9
----------------------------
"Try to make silent_mode behave somewhat reasonably. Instead of sending stdout/stderr to /dev/null after forking away from the terminal, send them to postmaster.log within the data directory.  Since this opens the door to indefinite logfile bloat, recommend even more strongly that log output be redirected when using silent_mode. Move the postmaster's initial calls of load_hba() and load_ident() down to after we have started the log collector, if we are going to.  This is so that errors reported by them will appear in the ""usual"" place. Reclassify silent_mode as a LOGGING_WHERE, not LOGGING_WHEN, parameter, since it's got absolutely nothing to do with the latter category. In passing, fix some obsolete references to -S ... this option hasn't had that switch letter for a long time. Back-patch to 8.4, since as of 8.4 load_hba() and load_ident() are more picky (and thus more likely to fail) than they used to be.  This entire change was driven by a complaint about those errors disappearing into the bit bucket. "	8bed238c871fae205c5c6615f3b9ab8a039359e2
----------------------------
Avoid calling kill() in a postmaster signal handler. This causes problems when the system load is high, per report from Zdenek Kotala in <1250860954.1239.114.camel@localhost>; instead of calling kill directly, have the signal handler set a flag which is checked in ServerLoop. This way, the handler can return before being called again by a subsequent signal sent from the autovacuum launcher.  Also, increase the sleep in the launcher in this failure path to 1 second. Backpatch to 8.3, which is when the signalling between autovacuum launcher/postmaster was introduced. Also, add a couple of ReleasePostmasterChildSlot calls in error paths; this part backpatched to 8.4 which is when the child slot stuff was introduced. 	45f9b4646f2f5608d9dbf6357f5a317edcb1d7da
----------------------------
Make version.sgml depend on configure instead of Makefile.global.  This cheats a bit, but it avoids unsatisfied dependencies in distribution tarballs.  (found by make distcheck) 	42d2470c38825ce719cb867eaca54586cc4fedd5
----------------------------
Fix old bug in log_autovacuum_min_duration code: it was relying on being able to access a Relation entry it had just closed.  I happened to be testing with CLOBBER_CACHE_ALWAYS, which made this a guaranteed core dump (at least on machines where sprintf %s isn't forgiving of a NULL pointer).  It's probably quite unlikely that it would fail in the field, but a bug is a bug.  Fix by moving the relation_close call down past the logging action. 	a1f0c9bab99edc6029dee3bf702348aa7eab0099
----------------------------
Adjust test_fsync code to be more sane. Backpatch to 8.4.X. 	933b17b663f06bd5bbe24e8e12044a844fd79bbf
----------------------------
Document that autovacuum may run ANALYZE 	05f43650fcf008a12dd92db4d1ae15c43046e62c
----------------------------
"Improve error messages in md.c. When a filesystem operation like open() or fsync() fails, say ""file"" rather than ""relation"" when printing the filename. This makes messages that display block numbers a bit confusing. For example, in message 'could not read block 150000 of file ""base/1234/5678.1""', 150000 is the block number from the beginning of the relation, ie. segment 0, not 150000th block within that segment. Per discussion, users aren't usually interested in the exact location within the file, so we can live with that. To ease constructing error messages, add FilePathName(File) function to return the pathname of a virtual fd. "	23dc89d2c385e8e362cb4b8186b4d4ad02242ac0
----------------------------
Use DocBook XSL stylesheets for man page building This switches the man page building process to use the DocBook XSL stylesheet toolchain.  The previous targets for Docbook2X are removed. configure has been updated to look for the new tools.  The Documentation appendix contains the new build instructions.  There are also a few isolated tweaks in the documentation to improve places that came out strangely in the man pages. 	c29d7f02c27c72b01c4fa90e24c4d33b5078a169
----------------------------
Fix pg_dump to do the right thing when escaping the contents of large objects. The previous implementation got it right in most cases but failed in one: if you pg_dump into an archive with standard_conforming_strings enabled, then pg_restore to a script file (not directly to a database), the script will set standard_conforming_strings = on but then emit large object data as nonstandardly-escaped strings. At the moment the code is made to emit hex-format bytea strings when dumping to a script file.  We might want to change to old-style escaping for backwards compatibility, but that would be slower and bulkier.  If we do, it's just a matter of reimplementing appendByteaLiteral(). This has been broken for a long time, but given the lack of field complaints I'm not going to worry about back-patching. 	b1732111f233bbb72788e92a627242ec28a85631
----------------------------
"Support hex-string input and output for type BYTEA. Both hex format and the traditional ""escape"" format are automatically handled on input.  The output format is selected by the new GUC variable bytea_output. As committed, bytea_output defaults to HEX, which is an *incompatible change*.  We will keep it this way for awhile for testing purposes, but should consider whether to switch to the more backwards-compatible default of ESCAPE before 8.5 is released. Peter Eisentraut "	a2a8c7a662ec96537b6d1faba0770c516b921911
----------------------------
Fix a thinko introduced into CountActiveBackends by a recent patch: we should ignore NULL array entries, not non-NULL ones.  This had the effect of disabling commit_delay, and could have caused a crash in the rare race condition the patch was intended to fix. Bug report and diagnosis by Jeff Janes, in bug #4952. 	850490579318ff52097eec92ce535357dd0c7a3a
----------------------------
"Rewrite GEQO's gimme_tree function so that it always finds a legal join sequence, even when the input ""tour"" doesn't lead directly to such a sequence. The stack logic that was added in 2004 only supported cases where relations that had to be joined to each other (due to join order restrictions) were adjacent in the tour.  However, relying on a random search to figure that out is tremendously inefficient in large join problems, and could even fail completely (leading to ""failed to make a valid plan"" errors) if random_init_pool ran out of patience.  It seems better to make the tour-to-plan transformation a little bit fuzzier so that every tour can form a legal plan, even though this means that apparently different tours will sometimes yield the same plan. In the same vein, get rid of the logic that knew that tours (a,b,c,d,...) are the same as tours (b,a,c,d,...), and therefore insisted the latter are invalid.  The chance of generating two tours that differ only in this way isn't that high, and throwing out 50% of possible tours to avoid such duplication seems more likely to waste valuable genetic- refinement generations than to do anything useful. This leaves us with no cases in which geqo_eval will deem a tour invalid, so get rid of assorted kluges that tried to deal with such cases, in particular the undocumented assumption that DBL_MAX is an impossible plan cost. This is all per testing of Robert Haas' lets-remove-the-collapse-limits patch.  That idea has crashed and burned, at least for now, but we still got something useful out of it. It's possible we should back-patch this change, since the ""failed to make a valid plan"" error can happen in existing releases; but I'd rather not until it has gotten more testing. "	400e2c934457bef4bc3cc9a3e49b6289bd761bc0
----------------------------
Fix a thinko in join_is_legal: when we decide we can implement a semijoin by unique-ifying the RHS and then inner-joining to some other relation, that is not grounds for violating the RHS of some other outer join. Noticed while regression-testing new GEQO code, which will blindly follow any path that join_is_legal says is legal, and then complain later if that leads to a dead end. I'm not certain that this can result in any visible failure in 8.4: the mistake may always be masked by the fact that subsequent attempts to join the rest of the RHS of the other join will fail.  But I'm not certain it can't, either, and it's definitely not operating as intended.  So back-patch. The added regression test depends on the new no-failures-allowed logic that I'm about to commit in GEQO, so no point back-patching that. 	a43b190e3c7185e42c7329358c2038cf6d86c5a4
----------------------------
"Make GEQO's planning deterministic by having it start from a predictable random number seed each time.  This is how it used to work years ago, but we got rid of the seed reset because it was resetting the main random() sequence and thus having undesirable effects on the rest of the system. To fix, establish a private random number state for each execution of geqo(), and initialize the state using the new GUC variable geqo_seed. People who want to experiment with different random searches can do so by changing geqo_seed, but you'll always get the same plan for the same value of geqo_seed (if holding all other planner inputs constant, of course). The new state is kept in PlannerInfo by adding a ""void *"" field reserved for use by join_search hooks.  Most of the rather bulky code changes in this commit are just arranging to pass PlannerInfo around to all the GEQO functions (many of which formerly didn't receive it). Andres Freund, with some editorialization by Tom "	f5bc74192d2ffb32952a06c62b3458d28ff7f98f
----------------------------
Add erand48() to the set of functions supported by our src/port/ library, and extend configure to test for it properly instead of hard-wiring an assumption that everybody but Windows has the rand48 functions. (We do cheat to the extent of assuming that probing for erand48 will do for the entire rand48 family.) erand48() is unused as of this commit, but a followon patch will cause GEQO to depend on it. Andres Freund, additional hacking by Tom 	c43feefa806c81d68115ed03a7f723720cefad31
----------------------------
Make the configure messages rejecting old bison and flex versions include the full path and version of the program being rejected. 	dcc9d37331a1dbb4493fc92cc074b990de18bae7
----------------------------
Fix up PGDLLIMPORT marking for standard_conforming_strings.  Moving it into a header file that plpgsql's scan.l can see broke the previous kluge.  Per buildfarm results. 	f1d9c299d6e2349973e2f6dfc14d4e6ede710788
----------------------------
Remove no-longer-necessary transmission of postmaster's LC_COLLATE and LC_CTYPE settings to children via BackendParameters.  Per discussion, the postmaster is now just using system defaults anyway, so we might as well save a few cycles during backend startup. 	b11ce5608ab7b053478a6180d98818c02df40f46
----------------------------
Need to use pg_perm_setlocale when setting LC_CTYPE and LC_COLLATE at startup. Otherwise, the LC_CTYPE/COLLATE setting gets reverted when using plperl, which leads to incorrect query results and index corruption. This was accidentally broken in the per-database locale patch in 8.4. Pointed out by Andrew Gierth. 	e5bb0f04db225a06e08b9b74cde82325c87a8de3
----------------------------
Add log_line_prefix placeholder %e to contain the current SQL state Author: Guillaume Smet <guillaume.smet@gmail.com> 	f39df967e930be301f976a537628a5788867e8a1
----------------------------
Upgrade to Autoconf 2.63 This upgrades the configure infrastructure to the latest Autoconf version. Some notable news are: - The workaround for the broken fseeko() test is gone. - Checking for unknown options is now provided by Autoconf itself. - Fixes for Mac OS X 	7cc514ac65d5725f60dae4e4d059a329a6c883b3
----------------------------
Marginal improvement of description of recovery_end_command. 	df858fe58a93be37693b0df9696740477074f2f8
----------------------------
Fix some serious bugs in archive recovery, now that bgwriter is active during it: When bgwriter is active, the startup process can't perform mdsync() correctly because it won't see the fsync requests accumulated in bgwriter's private pendingOpsTable. Therefore make bgwriter responsible for the end-of-recovery checkpoint as well, when it's active. When bgwriter is active (= archive recovery), the startup process must not accumulate fsync requests to its own pendingOpsTable, since bgwriter won't see them there when it performs restartpoints. Make startup process drop its pendingOpsTable when bgwriter is launched to avoid that. Update minimum recovery point one last time when leaving archive recovery. It won't be updated by the end-of-recovery checkpoint because XLogFlush() sees us as out of recovery already. This fixes bug #4879 reported by Fujii Masao. 	7e48b77b1cebb9a43f9fdd6b17128a0ba36132f9
----------------------------
Change test tables in copy2 regression test to be temporary tables. This prevents autovacuum from reclaiming free space in them and causing the test's output row order to change, which is causing intermittent bogus failure reports in the buildfarm. Backpatch to 8.3.  The issue exists further back, but since autovacuum was not on by default before 8.3, it's not a problem for buildfarm testing. 	f51c9a66651dd3d5130c7731bcc10248517fbfbd
----------------------------
Dynamically set a lower bound on autovacuum nap time so that we don't rebuild the database list too often. Per bug report from Łukasz Jagiełło and ensuing discussion on pgsql-performance. 	e8f28cb25d6f375d0d553b6fa16b398835951a1f
----------------------------
Remove the old advice to keep from_collapse_limit less than geqo_threshold, instead just pointing out that a larger value may trigger use of GEQO. Per Robert Haas. In passing, do a bit of wordsmithing on the Genetic Query Optimizer section. 	ade91586ea98f42f9c58ccb1626264777e641fde
----------------------------
Add documentation string for LDFLAGS_SL in configure --help output. 	5e4c8aee1f8109820e1fa786601632513ed6f97a
----------------------------
Update relpages and reltuples estimates in stand-alone ANALYZE, even if there's no analyzable attributes or indexes. We also used to report 0 live and dead tuples for such tables, which messed with autovacuum threshold calculations. This fixes bug #4812 reported by George Su. Backpatch back to 8.1. 	9ca99cda21a7eeb4bd975c811e7bcc6584255e1b
----------------------------
Include recovery_end_command in recovery.conf.sample. Per suggestion of Jaime Casanova. 	bfab3f19e3bd75b95e419cf9ac0eb22d03669ef3
----------------------------
"Add recovery_end_command option to recovery.conf. recovery_end_command is run at the end of archive recovery, providing a chance to do external cleanup. Modify pg_standby so that it no longer removes the trigger file, that is to be done using the recovery_end_command now. Provide a ""smart"" failover mode in pg_standby, where we don't fail over immediately, but only after recovering all unapplied WAL from the archive. That gives you zero data loss assuming all WAL was archived before failover, which is what most users of pg_standby actually want. recovery_end_command by Simon Riggs, pg_standby changes by Fujii Masao and myself. "	9e403c2587868b026e14006c34c8fce0ac5a823d
----------------------------
Adjust pg_dumpall so that it emits ENCODING, LC_COLLATE, and LC_CTYPE options in its CREATE DATABASE commands only for databases that have settings different from the installation defaults.  This is a low-tech method of avoiding unnecessary platform dependencies in dump files.  Eventually we ought to have a platform-independent way of specifying LC_COLLATE and LC_CTYPE, but that's not going to happen for 8.4, and this patch at least avoids the issue for people who aren't setting up per-database locales.  ENCODING doesn't have the platform dependency problem, but it seems consistent to make it act the same as the locale settings. 	4db44b433b857dc2a823eb4673d94346224df698
----------------------------
"Change pgbench to use the table names pgbench_accounts, pgbench_branches, pgbench_history, and pgbench_tellers, rather than just accounts, branches, history, and tellers.  This is to prevent accidental conflicts with real application tables, as has been reported to happen at least once.  Also remove the automatic ""SET search_path = public"" that it did at startup, as this seems to restrict testing flexibility without actually buying much. Per proposal by Joshua Drake and ensuing discussion. Joshua Drake and Tom Lane "	48caf91b66fda69ffaf0d0aeb54ee41c6727ea2d
----------------------------
Fix ecpg tests for change that disallowed Unicode literals unless standard_conforming_strings is on. 	ab4e386a8069e3228536f1044f23bbf09f85204b
----------------------------
Disable the use of Unicode escapes in string constants (U&'') when standard_conforming_strings is not on, for security reasons. 	40bc4c260508e8a2579bd2106e1f81b6795d147b
----------------------------
Remove Windows-specific definition of S_ISDIR().  This should not be here; if there are any Windows configurations where port/win32.h fails to provide the macro, it should be fixed in the latter file not here. 	1d3a1613c5d2b4a3a29bfde593e76efb65f2dd29
----------------------------
Improve the documentation on 8.4 visibility map related VACUUM changes. Explain how vacuum_freeze_table_age should be tuned, and how it relates to the other settings. Mention that vacuum_freeze_table_age also affects when autovacuum scans the whole table. 	335904b4f8949645d9481177f3da373f7b36bc00
----------------------------
"Change the default value of max_prepared_transactions to zero, and add documentation warnings against setting it nonzero unless active use of prepared transactions is intended and a suitable transaction manager has been installed.  This should help to prevent the type of scenario we've seen several times now where a prepared transaction is forgotten and eventually causes severe maintenance problems (or even anti-wraparound shutdown). The only real reason we had the default be nonzero in the first place was to support regression testing of the feature.  To still be able to do that, tweak pg_regress to force a nonzero value during ""make check"".  Since we cannot force a nonzero value in ""make installcheck"", add a variant regression test ""expected"" file that shows the results that will be obtained when max_prepared_transactions is zero. Also, extend the HINT messages for transaction wraparound warnings to mention the possibility that old prepared transactions are causing the problem. All per today's discussion. "	8d4f2ecd41312e57422901952cbad234d293060b
----------------------------
Rethink the idea of having plpgsql depend on parser/gram.h.  Aside from the fact that this is breaking the MSVC build, it's probably not really a good idea to expand the dependencies of gram.h any further than the core parser; for instance the value of SCONST might depend on which bison version you'd built with.  Better to expose an additional call point in parser.c, so move what I had put into pl_funcs.c into parser.c.  Also PGDLLIMPORT'ify the reference to standard_conforming_strings, per buildfarm results. 	85128e5d56f45558634331b171acaa67ce7ed028
----------------------------
Revise plpgsql's scanner to process comments and string literals in a way more nearly matching the core SQL scanner.  The user-visible effects are: * Block comments (slash-star comments) now nest, as per SQL spec. * In standard_conforming_strings mode, backslash as the last character of a non-E string literal is now correctly taken as an ordinary character; formerly it was misinterpreted as escaping the ending quote.  (Since the string also had to pass through the core scanner, this invariably led to syntax errors.) * Formerly, backslashes in the format string of RAISE were always treated as quoting the next character, regardless of mode.  Now, they are ordinary characters with standard_conforming_strings on, while with it off, they introduce the same set of escapes as in the core SQL scanner.  Also, escape_string_warning is now effective for RAISE format strings.  These changes make RAISE format strings work just like any other string literal. This is implemented by copying and pasting a lot of logic from the core scanner.  It would be a good idea to look into getting rid of plpgsql's scanner entirely in favor of using the core scanner.  However, that involves more change than I can justify making during beta --- in particular, the core scanner would have to become re-entrant. In passing, remove the kluge that made the plpgsql scanner emit T_FUNCTION or T_TRIGGER as a made-up first token.  That presumably had some value once upon a time, but now it's just useless complication for both the scanner and the grammar. 	3a624e9200bbd8b88d7724e1448fe530f32e2c3c
----------------------------
Fix pg_dumpall so that when --clean is specified, it drops roles and tablespaces in an order that has some chance of working. Per a complaint from Kevin Bailey. This is a pre-existing bug, but given the lack of prior complaints I'm not sure it's worth back-patching.  In most cases failure of the DROP commands wouldn't be that important anyway. In passing, fix syntax errors in dumpCreateDB()'s queries for old servers; these were apparently introduced in recent binary_upgrade patch. 	e1e17e2a0a31815f8d2b33a29e7c0cea626ca8fd
----------------------------
Add URL for config.guess/sub updates 	f71a0523f98d75ed60aff1a56820e039ea27cc67
----------------------------
Update config.guess and config.sub 	fefe1ae73056874a4a17287b737e091cc0c89412
----------------------------
Treat EOF like \n for line-counting purposes in ParseConfigFile, per bug #4752.  Fujii Masao 	b060c8787f70ec560dadacddd800a20ca1b09a64
----------------------------
Tell gettext which codeset to use by calling bind_textdomain_codeset(). We already did that on Windows, but it's needed on other platforms too when LC_CTYPE=C. With other locales, we enforce (or trust) that the codeset of the locale matches the server encoding so we don't need to bind it explicitly. It should do no harm in that case either, but I don't have full faith in the PG encoding -> OS codeset mapping table yet. Per recent discussion on pgsql-hackers. 	1fe5020558b17a796a7c5d8485256abfb1ab8fc7
----------------------------
Disable effective_io_concurrency on Solaris because posix_fadvise() is no-op on that platform. 	77b044f27e977d773661f6fc457b405a64a1409a
----------------------------
Document in postgresql.conf that the default units for log_min_duration_statement is milliseconds. 	802e414d6250af3127ad5a69baa02c95fcfd4876
----------------------------
Correct keywords table for status of COLLATE vs LC_COLLATE. 	25a76c31dec3418975a2b9def7964b9e0fdc6a56
----------------------------
Rename the new CREATE DATABASE options to set collation and ctype into LC_COLLATE and LC_CTYPE, per discussion on pgsql-hackers. 	1eef90d0a21167c4043c7d8cacaa0e937c9eb8e8
----------------------------
I had always wondered why pg_config.h.win32 claimed that Windows provides optreset.  Current mastodon results prove that in fact it does not; it was only because getopt.c defined the variable anyway that things failed to fall over. 	2227e2f16dfb498e72dc1e7d87ba1c2b7fef0b4d
----------------------------
Make an attempt at fixing our current Solaris 11 breakage: add a configure probe for opterr (exactly like the one for optreset) and have getopt.c define the variables only if configure doesn't find them in libc. 	1d26226d9583ad7bee290ca9bba1aa3794e98a53
----------------------------
Document that Solaris can't use effective_io_concurrency because of an ineffective posix_fadvise(). 	d0b599012f52f4f06847a87dadfd70b47f7c5265
----------------------------
"Give a better error message when trying to change ""effective_io_concurrency"" on systems without posix_fadvise(). "	3b07182e613a0e63ff662e3dc7f820f010923ec7
----------------------------
"Fix SetClientEncoding() to maintain a cache of previously selected encoding conversion functions.  This allows transaction rollback to revert to a previous client_encoding setting without doing fresh catalog lookups. I believe that this explains and fixes the recent report of ""failed to commit client_encoding"" failures. This bug is present in 8.3.x, but it doesn't seem prudent to back-patch the fix, at least not till it's had some time for field testing in HEAD. In passing, remove SetDefaultClientEncoding(), which was used nowhere. "	c26ffb1ead84adc79ef6cfbe125b300cccd1e2b7
----------------------------
Update comment to reflect that LC_COLLATE and LC_CTYPE are now per-database settings. 	00b24e1678ca3bd18535cbd14b73e38f5edc0aac
----------------------------
Fix a rare race condition when commit_siblings > 0 and a transaction commits at the same instant as a new backend is spawned. Since CountActiveBackends() doesn't hold ProcArrayLock, it needs to be prepared for the case that a pointer at the end of the proc array is still NULL even though numProcs says it should be valid, since it doesn't hold ProcArrayLock. Backpatch to 8.1. 8.0 and earlier had this right, but it was broken in the split of PGPROC and sinval shared memory arrays. Per report and proposal by Marko Kreen. 	eeeb782e60082327963d2f1742240d4a893eb9db
----------------------------
Better document that SET ROLE does not uset ALTER ROLE SET settings; suggested wording from Josh Berkus. 	8fbef1090bb2a43e3458ec7f9910af618e22bdb3
----------------------------
Mark Greg as the instigator of the statistics target increase: Increase the default value of default_statistics_target from 10 to 100 (Greg Sabino Mullane, Tom) 	03f625d4d5f2f4fe821a0b59b8af64f7fcdec904
----------------------------
Document that Datestyle no longer controls interval output, per suggestion from Ron Mayer 	0f84033a68a8cf8c932f5108579ce2859644bc45
----------------------------
Fix a couple of places that still claimed LC_COLLATE and LC_CTYPE can't be changed after initdb. 	845693f70f9c49ada509187b153848c47a32b530
----------------------------
Update constraint_exclusion docs because parameter is now 3-valued, not just enable/disable. 	5c617f4e56ef11064b3235a72648cc29784fa366
----------------------------
Remove documentation of log_restartpoints setting, which is obsoleted in favor of log_checkpoints.  Fujii Masao 	df8684c56fbe57a778f1c1fc42a26ad8a1071e4f
----------------------------
Reload config file in startup process on SIGHUP. Fujii Masao 	fb7df896fc56e5503a00db1931e12d2275b34031
----------------------------
Reduce the maximum value of vacuum_cost_delay and autovacuum_vacuum_cost_delay to 100ms (from 1000).  This still seems to be comfortably larger than the useful range of the parameter, and it should help discourage people from picking uselessly large values.  Tweak the documentation to recommend small values, too.  Per discussion of a couple weeks ago. 	640796ff4122c01ab96780cbbee88479c3694907
----------------------------
Remove outdated join_1.out regression test comparison file.  This has been broken for more than a month, so evidently it's not needed, at least not for any configuration in the buildfarm.  We can correct it and replace it later if we find something that still needs it. 	f4fea44ce15ce8a036faf8594c140dc02825dc0c
----------------------------
Don't append epoch to log_filename if no format specifier is given. Robert Haas 	7380b6384b5a0b25fa7dfa7447dbf95ff1c4b8da
----------------------------
"Repair a longstanding bug in CLUSTER and the rewriting variants of ALTER TABLE: if the command is executed by someone other than the table owner (eg, a superuser) and the table has a toast table, the toast table's pg_type row ends up with the wrong typowner, ie, the command issuer not the table owner. This is quite harmless for most purposes, since no interesting permissions checks consult the pg_type row.  However, it could lead to unexpected failures if one later tries to drop the role that issued the command (in 8.1 or 8.2), or strange warnings from pg_dump afterwards (in 8.3 and up, which will allow the DROP ROLE because we don't create a ""redundant"" owner dependency for table rowtypes).  Problem identified by Cott Lang. Back-patch to 8.1.  The problem is actually far older --- the CLUSTER variant can be demonstrated in 7.0 --- but it's mostly cosmetic before 8.1 because we didn't track ownership dependencies before 8.1.  Also, fixing it before 8.1 would require changing the call signature of heap_create_with_catalog(), which seems to carry a nontrivial risk of breaking add-on modules. "	f73bed308a8ccaea9082634f417966f7beb71614
----------------------------
Add note that inlined SQL functions aren't tracked by track_functions. 	451a15f95cbe501ee46e821bfb06c8b9afa5cf6a
----------------------------
"Start background writer during archive recovery. Background writer now performs its usual buffer cleaning duties during archive recovery, and it's responsible for performing restartpoints. This requires some changes in postmaster. When the startup process has done all the initialization and is ready to start WAL redo, it signals the postmaster to launch the background writer. The postmaster is signaled again when the point in recovery is reached where we know that the database is in consistent state. Postmaster isn't interested in that at the moment, but that's the point where we could let other backends in to perform read-only queries. The postmaster is signaled third time when the recovery has ended, so that postmaster knows that it's safe to start accepting connections. The startup process now traps SIGTERM, and performs a ""clean"" shutdown. If you do a fast shutdown during recovery, a shutdown restartpoint is performed, like a shutdown checkpoint, and postmaster kills the processes cleanly. You still have to continue the recovery at next startup, though. Currently, the background writer is only launched during archive recovery. We could launch it during crash recovery as well, but it seems better to keep that codepath as simple as possible, for the sake of robustness. And it couldn't do any restartpoints during crash recovery anyway, so it wouldn't be that useful. log_restartpoints is gone. Use log_checkpoints instead. This is yet to be documented. This whole operation is a pre-requisite for Hot Standby, but has some value of its own whether the hot standby patch makes 8.4 or not. Simon Riggs, with lots of modifications by me. "	cdd46c765488a317997c266ba2bdcc85c4a95c8f
----------------------------
"Tweak configure to attempt to add -qnoansialias to CFLAGS whenever running on AIX with a non-gcc compiler.  The previous coding would do this only if CC was exactly ""xlc""; which is a bad idea, as demonstrated by trouble report from Mihai Criveti. "	68d95f12e72804068e47cda469a7e7cbc1df174d
----------------------------
Update autovacuum to use reloptions instead of a system catalog, for per-table overrides of parameters. This removes a whole class of problems related to misusing the catalog, and perhaps more importantly, gives us pg_dump support for the parameters. Based on a patch by Euler Taveira de Oliveira, heavily reworked by me. 	834a6da4f72dc8e1bf95e5158033c54369df0cc5
----------------------------
"Fix an old corner-case error in match_unsorted_outer(): don't consider the cheapest-total inner path as a new candidate while truncating the sort key list, if it already matched the full sort key list.  This is too much of a corner case to be worth back-patching, since it's unusual for the cheapest total path to be sorted, and anyway no real harm is done (except in JOIN_SEMI/ANTI cases where cost_mergejoin is a bit broken at the moment).  But it wasn't behaving as intended, so fix it. Noted while examining a test case from Kevin Grittner.  This error doesn't explain his issue, but it does explain why ""set enable_seqscan = off"" seemed to reproduce it for me. "	244f6492614c3fdcd9b97cf0fa6ab91b263267e7
----------------------------
Allow reloption names to have qualifiers, initially supporting a TOAST qualifier, and add support for this in pg_dump. This allows TOAST tables to have user-defined fillfactor, and will also enable us to move the autovacuum parameters to reloptions without taking away the possibility of setting values for TOAST tables. 	3a5b77371522b64feda006a7aed2a0e57bfb2b22
----------------------------
Allow extracting and parsing of reloptions from a bare pg_class tuple, and refactor the relcache code that used to do that.  This allows other callers (particularly autovacuum) to do the same without necessarily having to open and lock a table. 	c0f92b57dc91126248d80462ac31497c091a9939
----------------------------
Recreate ecpg_config.h with a stamp file created by config.status, same way pg_config.h is handled.  This avoids reruns of config.status on every build, if configure has been rerun. 	9c4b69ed5cd275953e49f4520398801797f144c3
----------------------------
Make win32 builds always do SetEnvironmentVariable() when doing putenv(). Also, if linked against other versions than the default MSVCRT library (for example the MSVC build which links against MSVCRT80), also update the cache in the default MSVCRT at the same time. This should fix the issues with setting LC_MESSAGES on the MSVC build. Original patch from Hiroshi Inoue and Hiroshi Saito, much rewritten by me. 	0154345078fb96a8bbe8b8785628400b17e5a75b
----------------------------
Add vacuum_freeze_table_age GUC option, to control when VACUUM should ignore the visibility map and scan the whole table, to advance relfrozenxid. 	6587818542e79012276dcfedb2f97e3522ee5e9b
----------------------------
misc.o depends on pg_config_paths.h when --enable-nls is used. 	08585dcf1391dca2c0e9a2b6d824df182cff7aa6
----------------------------
"Simplify the writing of amoptions routines by introducing a convenience fillRelOptions routine that stores the parsed values in the struct using a table-based approach.  Per Tom suggestion.  Also remove the ""continue"" in HANDLE_*_RELOPTION macros, which were useless and in spirit they were assuming too much of how the macros were going to be used.  (Note that these macros are now unused, but the intention is to introduce some usage in a future autovacuum patch, which is why they weren't completely removed.) Also, do not call the string validation routine when not validating.  It seems less error-prone this way, per commentary on the amoptions SGML docs. "	8ebe1e356c8c3bd1f65ff76cc5967478e969d1c2
----------------------------
Implement prefetching via posix_fadvise() for bitmap index scans.  A new GUC variable effective_io_concurrency controls how many concurrent block prefetch requests will be issued. (The best way to handle this for plain index scans is still under debate, so that part is not applied yet --- tgl) Greg Stark 	b7b8f0b6096d2ab6e4f67980d19e478cf6fab629
----------------------------
"Create a third option named ""partition"" for constraint_exclusion, and make it the default.  This setting enables constraint exclusion checks only for appendrel members (ie, inheritance children and UNION ALL arms), which are the cases in which constraint exclusion is most likely to be useful.  Avoiding the overhead for simple queries that are unlikely to benefit should bring the cost down to the point where this is a reasonable default setting. Per today's discussion. "	445ce15702f701423a0fed3defe3a43662c7cd8d
----------------------------
Add a --role option to pg_dump, pg_dumpall, and pg_restore.  This allows performing dumps and restores in accordance with a security policy that forbids logging in directly as superuser, but instead specifies that you should log into an admin account and then SET ROLE to the superuser. In passing, clean up some ugly and mostly-broken code for quoting shell arguments in pg_dumpall. Benedek László, with some help from Tom Lane 	b0a6ad70a12b6949fdebffa8ca1650162bf0254a
----------------------------
Add EmitWarningsOnPlaceholders calls to contrib modules that are likely to get listed in custom_variable_classes. 	da2c1b8a27afed7117606b3275c9809cb6f5463a
----------------------------
Allow configure to deal with Python 3.0.  Changes were: print foo --> print(foo) string.join(...) --> ' '.join(...) These changes are backward compatible. The actual plpython module appears to need significant updates to support Python 3.0, though.  This change just relieves interested developers from having to deal with Autoconf. 	a65ed83f8a6fbf35c1e563533ab8293a788b1fce
----------------------------
Allow loadable modules to create PGC_POSTMASTER GUC variables, but only when loaded via shared_preload_libraries.  Needed for support of pg_stat_statements, or pretty much anything else that wants a GUC to control size of a shared memory allocation. 	4605d1c98b305567a7addb22643a9cc7519315e9
----------------------------
write_nondefault_variables must take care to write custom_variable_classes first; otherwise backends reading the file might reject values of custom variables.  Per experimentation with auto_explain. 	bdcc7576f4b6b68816624daba51c35e80aab0109
----------------------------
Have psql's \d+ print reloptions.  Extracted from Euler Taveira de Oliveira's reloptions patch for autovacuum and revised by me. Note that there doesn't seem to be a way to display an index's reloptions. 	1eec10a2de3925ef791904835e2437d1efe97139
----------------------------
Add note to the shared memory sizing table about needing to use page count in shared_buffers and wal_buffers, not size in bytes.  Per discussion. 	5434e469868a198824df6198733e4fc57f72ce12
----------------------------
Increase the default value of default_statistics_target from 10 to 100, and its maximum value from 1000 to 10000.  ALTER TABLE SET STATISTICS similarly now allows a value up to 10000.  Per discussion. 	65e3ea76417d1baab158fd8305ebed4f43141c7a
----------------------------
Clearify how processes are started by autovacuum, and what the effect of autovacuum_max_workers parameter is. Per discussion with Alvaro. 	9edd720050a2979c684b514f7d5118a8a0d45dff
----------------------------
Add note that autovacuum can use up several times maintenance_work_mem, with warning against setting it too high. 	bd33aca36ee441b72936d0bdb16508492233768d
----------------------------
Utilize the visibility map in autovacuum, too. There was an oversight in the visibility map patch that because autovacuum always sets VacuumStmt->freeze_min_age, visibility map was never used for autovacuum, only for manually launched vacuums. This patch introduces a new scan_all field to VacuumStmt, indicating explicitly whether the visibility map should be used, or the whole relation should be scanned, to advance relfrozenxid. Anti-wraparound vacuums still need to scan all pages. 	7537f52a00acb0a2be60a90d9ec384c5935a1695
----------------------------
configure check for docbook2man program, used in the new XML-based man page build target.  This covers from-source, Debian, and Fedora installation variants. 	f900afff3e8fc2c233ff59cc9bc2639f5efe4d8c
----------------------------
Remove PGINTERVALSTYLE from the set of special environment variables for libpq.  As noted by Peter, adding this variable created a risk of unexpected connection failures when talking to older server versions, and since it doesn't do anything you can't do with PGOPTIONS, it doesn't seem really necessary.  Removing it does occasion a few extra lines in pg_regress.c, but saving a getenv() call per libpq connection attempt is perhaps worth that anyway. 	1304f297a44516857cf404742487da0ed6344fdb
----------------------------
Issue a proper error message when MD5 is attempted when db_user_namespace is enabled. Also document this limitation. 	170b66a0c5ed7b1921fb6119f0668136fecc0a05
----------------------------
"Fix libpq certificate validation for SSL connections. Add config parameter ""sslverify"" to control the verification. Default is to do full verification. Clean up some old SSL code that never really worked. "	c89404edf3f3b35a4a599d71f407055bda8261b6
----------------------------
Arrange to cache the results of looking up a btree predicate proof comparison operator.  The result depends only on the two input operators and the proof direction (imply or refute), so it's easy to cache.  This provides a very large savings in cases such as Sergey Konoplev's long NOT-IN-list example, where predtest spends all its time repeatedly figuring out that the same pair of operators cannot be used to prove anything.  (But of course the O(N^2) behavior still catches up with you eventually.)  I'm not convinced it buys a whole lot when constraint_exclusion isn't turned on, but it's not a lot of added code so we might as well cache all the time. 	e7d8bfb9342622971cfb326672c998934433546a
----------------------------
Fix off-by-one error in autovacuum shmem struct sizing. This could lead to autovacuum worker sending SIGUSR1 signal to wrong process, per Zou Yong's report. Backpatch to 8.3. 	4c22564471e2724bcc62bc2c61ece796c946f16e
----------------------------
"Clean up the ancient decision to show only two fractional-seconds digits in ""postgres_verbose"" intervalstyle, and the equally arbitrary decision to show at least two fractional-seconds digits in most other datetime display styles.  This results in some minor changes in the expected regression test outputs. Also, coalesce a lot of repetitive code in datetime.c into subroutines, for clarity and ease of maintenance.  In particular this roughly halves the number of #ifdef HAVE_INT64_TIMESTAMP segments. Ron Mayer, with some additional kibitzing from Tom Lane "	d1ab3eb7120962327401334903d4e30681d10ae0
----------------------------
"Add support for input and output of interval values formatted per ISO 8601; specifically, we can input either the ""format with designators"" or the ""alternative format"", and we can output the former when IntervalStyle is set to iso_8601. Ron Mayer "	a4917bef0ead2424bf0c2eeb05dfb681dff33574
----------------------------
"Add a new GUC variable called ""IntervalStyle"" that decouples interval output from DateStyle, and create a new interval style that produces output matching the SQL standard (at least for interval values that fall within the standard's restrictions).  IntervalStyle is also used to resolve the conflict between the standard and traditional Postgres rules for interpreting negative interval input. Ron Mayer "	df7641e25ab4da6f3a48222cbda0e121ccb32ad5
----------------------------
Rename several aliases for PLpgSQL_datum.dno to also be called dno. Hopefully this will forestall future confusion about their roles. Jonah Harris 	e0dc7d026fd22b84338d08b0653aae9e8222a9a2
----------------------------
Reduce the acceptable staleness of pgstat data for autovacuum, per the longstanding note in the source that this patch removes. 	88dd4b0a0d3d12605ded082e85693c7f0b5c4c2d
----------------------------
Change the pgstat logic so that the stats collector writes the stats file only upon requests from backends, rather than on a fixed 500msec cycle.  (There's still throttling logic to ensure it writes no more often than once per 500msec, though.)  This should result in a significant reduction in stats file write traffic in typical scenarios where the stats are demanded only infrequently. This approach also means that the former difficulty with changing stats_temp_directory on-the-fly has gone away, so remove the caution about that as well as the thrashing we did to minimize the trouble window. In passing, also fix pgstat_report_stat() so that we will send a stats message if we have function call stats but not table stats to report; this fixes a bug in the recent patch to support function-call stats. Martin Pihlak 	3c2313f4815e1971e2f14e50fffc9328877c52d5
----------------------------
Use Autoconf provided AS_HELP_STRING macro to automatically format and align strings in the --help output.  Do this through our abstraction layer to eliminate redundancy and randomness in configure.in. 	f7ef575fb72cf5f9e0a6fb530e52c4ff13588f12
----------------------------
"Fix oversight in the relation forks patch: forgot to copy fork number to fsync requests. This should fix the installcheck failure of the buildfarm member ""kudu"". "	84c37694827326c3e5853a25d71ac9581ef6432d
----------------------------
"Fixed ""create role"" parsing to accept optional ""with"" argument. "	9d3275e59d336f90d47174cf7505ba792730be31
----------------------------
Fix improper display of fractional seconds in interval values when using --enable-integer-datetimes and a non-ISO datestyle. Ron Mayer 	607b39855a56490ffbe8abc7cf404bf7b333c689
----------------------------
Link libpq with libgssapi if configure finds it, as required by at least NetBSD. Markus Schaaf 	233f135144ffc02512490eaffdb2575284a3af9d
----------------------------
Tighten the check in initdb and CREATE DATABASE that the chosen encoding matches the encoding of the locale. LC_COLLATE is now checked in addition to LC_CTYPE. 	c2d4526495a149d215a9c2a6e0f7c165e78e6b66
----------------------------
Make LC_COLLATE and LC_CTYPE database-level settings. Collation and ctype are now more like encoding, stored in new datcollate and datctype columns in pg_database. This is a stripped-down version of Radek Strnad's patch, with further changes by me. 	61d967498802ab86d8897cb3c61740d7e9d712f6
----------------------------
Mark SessionReplicationRole as PGDLLIMPORT so it can be used from Slony functions. Per report from Hiroshi Saito. 	7626f2a9369d38f5015c7506e9df4567ee26abce
----------------------------
"Initialize the minimum frozen Xid in vac_update_datfrozenxid using GetOldestXmin() instead of RecentGlobalXmin; this is safer because we do not depend on the latter being correctly set elsewhere, and while it is more expensive, this code path is not performance-critical.  This is a real risk for autovacuum, because it can execute whole cycles without doing a single vacuum, which would mean that RecentGlobalXmin would stay at its initialization value, FirstNormalTransactionId, causing a bogus value to be inserted in pg_database.  This bug could explain some recent reports of failure to truncate pg_clog. At the same time, change the initialization of RecentGlobalXmin to InvalidTransactionId, and ensure that it's set to something else whenever it's going to be used.  Using it as FirstNormalTransactionId in HOT page pruning could incur in data loss.  InitPostgres takes care of setting it to a valid value, but the extra checks are there to prevent ""special"" backends from behaving in unusual ways. Per Tom Lane's detailed problem dissection in 29544.1221061979@sss.pgh.pa.us "	d53a56687f3d4772d17ffa0013a33231b7163731
----------------------------
Tweak newly added set_config_sourcefile() so that the target record isn't left corrupt if guc_strdup should fail. 	b8646012d560f3364b0076bb528866f869c3a61e
----------------------------
Add standard boilerplate sentence about when stats_temp_directory can be changed. 	e36716a6534a393225d3c45fcbb85f75d017cad1
----------------------------
"Make stats_temp_directory PGC_SIGHUP, and document how it may cause a temporary ""outage"" of the statistics views. This requires making the stats collector respond to SIGHUP, like the other utility processes already did. "	be8d6c5c3477ba664c533cf0b93cdf4cd426b6e1
----------------------------
"Make ""log_temp_files"" super-user set only, like other logging options. Simon Riggs "	8ddb739e9d937e83b53176c27697ea0e82974451
----------------------------
Cause the output from debug_print_parse, debug_print_rewritten, and debug_print_plan to appear at LOG message level, not DEBUG1 as historically. Make debug_pretty_print default to on.  Also, cause plans generated via EXPLAIN to be subject to debug_print_plan.  This is all to make debug_print_plan a reasonably comfortable substitute for the former behavior of EXPLAIN VERBOSE. 	9650830bc82045b32573e52b0843d6a2f56b802a
----------------------------
Make the temporary directory for pgstat files configurable by the GUC variable stats_temp_directory, instead of requiring the admin to mount/symlink the pg_stat_tmp directory manually. For now the config variable is PGC_POSTMASTER. Room for further improvment that would allow it to be changed on-the-fly. 	5b8eb2b4b95ac4b016368ce6ca2c3477387e7fc7
----------------------------
"Have autovacuum consider processing TOAST tables separately from their main tables. This requires vacuum() to accept processing a toast table standalone, so there's a user-visible change in that it's now possible (for a superuser) to execute ""VACUUM pg_toast.pg_toast_XXX"". "	3ccde312ec8ee47f5f797b070d34a675799448ae
----------------------------
Improve SELECT DISTINCT to consider hash aggregation, as well as sort/uniq, as methods for implementing the DISTINCT step.  This eliminates the former performance gap between DISTINCT and GROUP BY, and also makes it possible to do SELECT DISTINCT on datatypes that only support hashing not sorting. SELECT DISTINCT ON is still always implemented by sorting; it would take executor changes to support hashing that, and it's not clear it's worth the trouble. This is a release-note-worthy incompatibility from previous PG versions, since SELECT DISTINCT can no longer be counted on to deliver sorted output without explicitly saying ORDER BY.  (Anyone who can't cope with that can consider turning off enable_hashagg.) Several regression test queries needed to have ORDER BY added to preserve stable output order.  I fixed the ones that manifested here, but there might be some other cases that show up on other platforms. 	be3b265c94443b75262e89149f148ace0fdf75da
----------------------------
Fix copy-and-pasteo that's causing pg_regress to lie about which file it can't read when the --temp-config argument is bad.  Noted while wondering why buildfarm member dungbeetle is failing ... this isn't why, but it is why the error report isn't very helpful ... 	3c93218aeb670054df88cc9c9236b61de006b515
----------------------------
Cleanup reference to config.pl so it makes sense not only in SGML source but in the actual web/pdf viewer... 	6fe879634121bcad34b7093b7b87c9c149b11d0e
----------------------------
Ratchet up patch to improve autovacuum wraparound messages. Simon Riggs 	85dfe376d9b0ef811ab34bde629b516aa437cc97
----------------------------
Abort if Tcl support was configured and no tcl shell was found. This is required because the value is substituted into the pltcl_*mod scripts. 	509303a597a1688e6c2230c83634a75f872d270c
----------------------------
Publish more openly the fact that autovacuum is working for wraparound protection. Simon Riggs 	0d09688f880d245ffb9a4618ee4468b9f4fbc3e6
----------------------------
"Avoid substituting NAMEDATALEN, FLOAT4PASSBYVAL, and FLOAT8PASSBYVAL into the postgres.bki file during build, because we want that file to be entirely platform- and configuration-independent; else it can't safely be put into /usr/share on multiarch machines.  We can do the substitution during initdb, instead.  FLOAT4PASSBYVAL and FLOAT8PASSBYVAL are new breakage as of 8.4, while the NAMEDATALEN hazard has been there all along but I guess no one tripped over it.  Noticed while trying to build ""universal"" OS X binaries. "	4b362c662e35c0edd6ed66523f94ebfe9f466329
----------------------------
"Add unchangeable GUC ""variables"" segment_size, wal_block_size, and wal_segment_size to make those configuration parameters available to clients, in the same way that block_size was previously exposed.  Bernd Helmle, with comments from Abhijit Menon-Sen and some further tweaking by me. "	7a97abe818798b710d468e2994e211227c95e0d1
----------------------------
Add comment for deadlock_timeout: /* This is PGC_SIGHUP so all backends have the same value. */ 	70d15a51b26c34faf5b1ef9e65327554e11b5cc4
----------------------------
Teach autovacuum how to determine whether a temp table belongs to a crashed backend.  If so, send a LOG message to the postmaster log, and if the table is beyond the vacuum-for-wraparound horizon, forcibly drop it.  Per recent discussions.  Perhaps we ought to back-patch this, but it probably needs to age a bit in HEAD first. 	5b965bf08bfb4aa8928bafaed20e42b89de02a5c
----------------------------
Turn PGBE_ACTIVITY_SIZE into a GUC variable, track_activity_query_size. As the buffer could now be a lot larger than before, and copying it could thus be a lot more expensive than before, use strcpy instead of memcpy to copy the query string, as was already suggested in comments. Also, only copy the PgBackendStatus struct and string if the slot is in use. Patch by Thomas Lee, with some changes by me. 	995fb7420268c2457c9a64f41394cea54316365f
----------------------------
Add to TODO: > > * Improve LDAP authentication configuration options > >   http://archives.postgresql.org/pgsql-hackers/2008-04/msg01745.php 	1fc2fbe51fde7a4c40e48bedb99602d5792a8994
----------------------------
Fix a few places that were non-multibyte-safe in tsearch configuration file parsing.  Per bug #4253 from Giorgio Valoti. 	30dc388a0dd9ceca911b101fe1877cf7a23776fa
----------------------------
Improve error reporting for problems in text search configuration files by installing an error context subroutine that will provide the file name and line number for all errors detected while reading a config file. Some of the reader routines were already doing that in an ad-hoc way for errors detected directly in the reader, but it didn't help for problems detected in subroutines, such as encoding violations. Back-patch to 8.3 because 8.3 is where people will be trying to debug configuration files. 	fbeb9da22be28c3252a1f704b028df0ecf1e3a0d
----------------------------
Rewrite docs section about routine vacuuming --- it's gotten rather mangled of late, with lots of redundancy, bad grammar, and just plain poor exposition. Make it clear that autovacuum is now considered the normal solution. 	9dac1b460fd3f764849d4d2d7c8e58fd044ab7c3
----------------------------
In log_filename documentation, mention that strftime is not used directly to expand the pattern specifier. Per gripe from Josh Drake. 	bd2ef8707f27af1da91f4b4926e71e13e2b13149
----------------------------
Refactor the handling of the various DropStmt variants so that when multiple objects are specified, we drop them all in a single performMultipleDeletions call.  This makes the RESTRICT/CASCADE checks more relaxed: it's not counted as a cascade if one of the later objects has a dependency on an earlier one. NOTICE messages about such cases go away, too. In passing, fix the permissions check for DROP CONVERSION, which for some reason was never made role-aware, and omitted the namespace-owner exemption too. Alex Hunsaker, with further fiddling by me. 	0cefb50f3ce964d6097aad64dabd9b544c3d2e68
----------------------------
"Modify TODO entry to be a function: > 	o Add functions to syntax check configuration files > < * Add pg_ctl option to do a syntax check of postgresql.conf "	95ce4ee943f226152ac8c147da178af5d1a95909
----------------------------
Fix an old corner-case bug in set_config_option: push_old_value has to be called before, not after, calling the assign_hook if any.  This is because push_old_value might fail (due to palloc out-of-memory), and in that case there would be no stack entry to tell transaction abort to undo the GUC assignment.  Of course the actual assignment to the GUC variable hasn't happened yet --- but the assign_hook might have altered subsidiary state. Without a stack entry we won't call it again to make it undo such actions. So this is necessary to make the world safe for assign_hooks with side effects.  Per a discussion a couple weeks ago with Magnus. Back-patch to 8.0.  7.x did not have the problem because it did not have allocatable stacks of GUC values. 	a3d9a2421ad3c16c22c82734a1d12be472bf9ba5
----------------------------
"Done: < 	o Use LC_TIME for localized weekday/month names, rather than > 	o -Use LC_TIME for localized weekday/month names, rather than "	abb5fd8604117f89941fdb484457f70a599801d4
----------------------------
Make to_char()'s localized month/day names depend on LC_TIME, not LC_MESSAGES. Euler Taveira de Oliveira 	07a560673515e6de19010d89549cefdf7544bd63
----------------------------
Fix a subtle bug exposed by recent wal_sync_method rearrangements. Formerly, the default value of wal_sync_method was determined inside xlog.c, but now it is determined inside guc.c.  guc.c was reading xlogdefs.h without having read <fcntl.h>, leading to wrong determination of DEFAULT_SYNC_METHOD.  Obviously xlogdefs.h needs to include <fcntl.h> for itself to ensure stable results. 	1a604b4e3101e7e4327676144963f2a8fdb5722b
----------------------------
Remove the special variable for open_sync_bit used in O_SYNC and O_DSYNC modes, replacing it with a call to a function that derives it from the sync_method variable, now that it has distinct values for these two cases. This means that assign_xlog_sync_method() no longer changes any settings, thus fixing the bug introduced in the change to use a guc enum for wal_sync_method. 	9bf1db04c0acb50ceb3cddf531b67abb1aaf0c14
----------------------------
Fix breakage by the wal_sync_method patch in installations that use O_DSYNC (specifically this broke all the Windows buildfarm members) 	aa82790fcab98b8d3d4eca2e2f6f7bfce57870bc
----------------------------
Convert wal_sync_method to guc enum. 	f99760c19f8bd89a025fb7859dfef315c2396567
----------------------------
Fix contrib/xml2 makefile to not override CFLAGS, and in passing make it auto-configure properly for libxslt present or not. 	eb915caf92a6805740e949c3233ee32bc9676484
----------------------------
Move Client Authentication right after Server Configuration in docs. Scott Marlowe 	00756a5691a9934cabecbe1a01b91f47c2a5c869
----------------------------
Add pg_conf_load_time() function to report when the Postgres configuration files were last loaded. George Gensure 	600da67fbe5e5a96fb08eea115ad58ad4990cfea
----------------------------
Provide for MSVC config equivalents of recently added configure options. Remove any hardcoding of those options. Along the way, reorder the expression used to calculate RELSEG_SIZE to make it slightly clearer. For now wal_segsize is only allowed to have a value of 1 on Windows - we can relax that when we get full large file support in the backend. 	d61eecb5a17d1b9373ca75fb4d6de4e35ba3f640
----------------------------
"Extend yesterday's patch making BLCKSZ and RELSEG_SIZE configurable to also let XLOG_BLCKSZ and XLOG_SEG_SIZE be set via configure.  Per a proposal by Mark Wong, though I thought it better to call the switches after ""wal"" rather than ""xlog"". "	cf9f6c8d8e9df28f3fbe1850ca7f042b2c01252e
----------------------------
Sigh ... pg_config.h.win32 needs to define BLCKSZ and RELSEG_SIZE now. 	170e331c6346e7105270559430878d580f8ac2fd
----------------------------
"Remove the recently added USE_SEGMENTED_FILES option, and indeed remove all support for a nonsegmented mode from md.c.  Per recent discussions, there doesn't seem to be much value in a ""never segment"" option as opposed to segmenting with a suitably large segment size.  So instead provide a configure-time switch to set the desired segment size in units of gigabytes. While at it, expose a configure switch for BLCKSZ as well. Zdenek Kotala "	3c6248a828af66db4c58247cd39e54583dff1d90
----------------------------
Make the minimum allowed value of work_mem be 64KB always, rather than having it vary with BLCKSZ as before.  This agrees with what the documentation says, and avoids a regression test problem when BLCKSZ is larger than default. Per recent discussion. 	1b1e335b15e19a89601d3b025b4d3deb60b39f98
----------------------------
Add example showing how to remove a password from a role. Andreas Scherbaum 	ca0aecfdefbca04f2a6ed05044f9cafc3605389f
----------------------------
Increase the statement_timeout value used in the prepared_xacts regression test.  We have seen some buildfarm failures that seem to be due to this limit being unexpectedly exceeded when the machine is under load. 	98c4ebd38cb7ce22cb50724653bdcdff985b811f
----------------------------
Fix broken configure test for libxslt: it was probing for xsltLibxmlVersion, which is a global variable not a function, and so the probe failed on machines where the linker makes a distinction (cf. Red Hat bug #444317).  Probe for an actual function instead. 	9c37aa291f6111390f0a5761f7317002fbddadb1
----------------------------
Make float4byval and float8byval configurable on MSVC. 	de6e4c9d60e74ffb527f22ee4376d0bb2d3266e4
----------------------------
Add FLOAT4PASSBYVAL/FLOAT8PASSBYVAL to pg_config.h.win32, as a stopgap measure to get the Windows buildfarm members working again.  I don't know if it's worth exposing these as configurables, or exactly how to do it in the MSVC build system ... 	819b49a6e1f727d6c00e7fd2d41711afe752c70a
----------------------------
Allow float8, int8, and related datatypes to be passed by value on machines where Datum is 8 bytes wide.  Since this will break old-style C functions (those still using version 0 calling convention) that have arguments or results of these types, provide a configure option to disable it and retain the old pass-by-reference behavior.  Likewise, provide a configure option to disable the recently-committed float4 pass-by-value change. Zoltan Boszormenyi, plus configurability stuff by me. 	8472bf7a73487b0535c95e299773b882f7523463
----------------------------
Fix two race conditions between the pending unlink mechanism that was put in place to prevent reusing relation OIDs before next checkpoint, and DROP DATABASE. First, if a database was dropped, bgwriter would still try to unlink the files that the rmtree() call by the DROP DATABASE command has already deleted, or is just about to delete. Second, if a database is dropped, and another database is created with the same OID, bgwriter would in the worst case delete a relation in the new database that happened to get the same OID as a dropped relation in the old database. To fix these race conditions: - make rmtree() ignore ENOENT errors. This fixes the 1st race condition. - make ForgetDatabaseFsyncRequests forget unlink requests as well. - force checkpoint on in dropdb on all platforms Since ForgetDatabaseFsyncRequests() is asynchronous, the 2nd change isn't enough on its own to fix the problem of dropping and creating a database with same OID, but forcing a checkpoint on DROP DATABASE makes it sufficient. Per Tom Lane's bug report and proposal. Backpatch to 8.3. 	9cb91f90c95906347cd4d42fcf24a12a6e6a679e
----------------------------
Cause EXPLAIN's VERBOSE option to print the target list (output column list) of each plan node, instead of its former behavior of dumping the internal representation of the plan tree.  The latter display is still available for those who really want it (see debug_print_plan), but uses for it are certainly few and and far between.  Per discussion. This patch also removes the explain_pretty_print GUC, which is obsoleted by the change. 	87a2f050a9b53b3effe0a4da9733b5dba784463d
----------------------------
Make integer_datetimes the default for MSVC even if not mentioned in config.pl. 	fcf053d7829f2d83829256153e856f9a36c83ffd
----------------------------
Make integer_datetimes the default on msvc as well, to have the same default as other platforms. 	bb6f1eb9df00c9009b6aa0402024cd68735db8f1
----------------------------
Remove no-longer-used function assign_backslash_quote() 	a051ab0a80659be449cd8b3dd9b1931b8213433e
----------------------------
Convert backslash_quote guc to use enum. 	2288d646a6a6d1f7cb35c35772cbcf9feb9b451a
----------------------------
Turn xmlbinary and xmloption GUC variables into enumsTurn xmlbinary and xmloption GUC variables into enums.. 	d672ea6ffa16b1ab302c6d8ba5d4c797f398625b
----------------------------
Convert syslog_facility guc to enum type. 	409e386be0d1360aca97b7fee486b3d7c18a4004
----------------------------
Convert three more guc settings to enum type: default_transaction_isolation, session_replication_role and regex_flavor. 	ad6bf716baa7c4c1d0c2fbece0344046e3ce1173
----------------------------
Clarify documentation on PITR and warm standby on the fact that the standby restore_command should report failure on non-existent .backup and .history files. Tidy up some related text along the way. Patch by Markus Bertheau, with some editing by Simon Riggs and myself. 	958db06181a41ac3d63bb55478fbad9b55b58e6a
----------------------------
"Update TODO: < 	o Consider invalidating the cache or keeping seperate cached < 	  copies when search_path changes > 	o Consider keeping seperate cached copies when search_path changes "	530659fac8fd218c82d3e2d5b3bcad22ef1f27e0
----------------------------
"Add to pl/pgsql TODO: > > 	o Consider invalidating the cache or keeping seperate cached > 	  copies when search_path changes > > 	  http://archives.postgresql.org/pgsql-hackers/2008-01/msg01009.php "	d30ccbe2aed2af68ed73ab08b18ee522ec57df4f
----------------------------
Use new errdetail_log() mechanism to provide a less klugy way of reporting large numbers of dependencies on a role that couldn't be dropped. Per a comment from Alvaro. 	2a346725bafbc6c7a5dd1771c6004703545a935c
----------------------------
"Support a --no-tablespaces option in pg_dump/pg_dumpall/pg_restore, so that dumps can be loaded into databases without the same tablespaces that the source had.  The option acts by suppressing all ""SET default_tablespace"" commands, and also CREATE TABLESPACE commands in pg_dumpall's case. Gavin Roy, with documentation and minor fixes by me. "	68528d37bbfbb3ae8dc83418f3e1d343c4050f0a
----------------------------
We no longer need a snapshot set after opening the finishing transaction: this is redundant because autovacuum now always analyzes a single table per transaction. 	a9686591d7fa79a39e704c2585ebcd8da80d3e72
----------------------------
Fix postgres --describe-config for guc enums, breakage noted by Alvaro. While at it, rename option lookup functions to make names clearer, per discussion with Tom. 	7cbfa7565e11b3668a388fac94d787e3590b1a97
----------------------------
Add a note to the CREATE INDEX reference page about the impact of maintenance_work_mem and effective_cache_size on index creation speed. 	ff213239c5da29b3a5b66b03f742fae3522f2436
----------------------------
When creating a large hash index, pre-sort the index entries by estimated bucket number, so as to ensure locality of access to the index during the insertion step.  Without this, building an index significantly larger than available RAM takes a very long time because of thrashing.  On the other hand, sorting is just useless overhead when the index does fit in RAM. We choose to sort when the initial index size exceeds effective_cache_size. This is a revised version of work by Tom Raney and Shreya Bhargava. 	787eba734be8e1fb8c5fdb101a02e826cccec3e9
----------------------------
Fix inappropriately-timed memory context switch in autovacuum_do_vac_analyze. This accidentally failed to fail before 8.3, because the context we were switching back to was long-lived anyway; but it sure looks risky as can be now.  Well spotted by Pavan Deolasee. 	4873c96ff3f38b51b29c86ede658343be01f519f
----------------------------
Fix vacuum so that autovacuum is really not cancelled when doing an emergency job (i.e. to prevent Xid wraparound problems.)  Bug reported by ITAGAKI Takahiro in 20080314103837.63D3.52131E4D@oss.ntt.co.jp, though I didn't use his patch. 	adc4e1e6353bfda442c23a32f172eb42c649c495
----------------------------
"Add: > 	o Prevent pg_dump/pg_restore from being affected by > 	  statement_timeout > > 	  Using psql to restore a pg_dump dump is also affected. "	8e4b2e354f1b8694ebc1cf194c58435b93634b67
----------------------------
Add to documentation: +         Setting <varname>statement_timeout</> in +         <filename>postgresql.conf</> is not recommended because it +         affects all sessions. Backpatch to 8.3.X. 	a534afc8541d3e372931cf30f778d9bf0c390b83
----------------------------
Back out doc addition that statement_timeout affects autovacuum. 	2d049a07c9db68a65a16fb7d6f5b8d83c0d4a536
----------------------------
"Remove item, per Alvaro: < < 	o Set up autovacuum to ignore statement_timeout set in < 	  postgresql.conf < < 	  http://archives.postgresql.org/pgsql-hackers/2007-03/msg01753.php "	032f9d9a2e55d14463af0004dca2cec8a5e14fc5
----------------------------
Add: > > * Consider adding buffers the BGW finds reusable to the free list > >   http://archives.postgresql.org/pgsql-hackers/2007-04/msg00781.php > > * Automatically tune bgwriter_delay based on activity rather then using a >   fixed interval > >   http://archives.postgresql.org/pgsql-hackers/2007-04/msg00781.php 	bc0fc3ec5fec36942c23566900b206457a492eb5
----------------------------
Document that statement_timeout is not recommended in postgresql.conf because it affects all sessions, including autovacuum. 	bbd2e68cfb1a5601c1b857e26f7ad7d4956c87d6
----------------------------
"Add: > > 	o Set up autovacuum to ignore statement_timeout set in > 	  postgresql.conf > > 	  http://archives.postgresql.org/pgsql-hackers/2007-03/msg01753.php "	eb34ffc15b4688a76762a8ce94f30c39cfc7fead
----------------------------
Document and enforce that the usable range of setseed() arguments is -1 to 1, not 0 to 1.  The actual behavior for values within this range does not change.  Kris Jurka 	23c356ccecaf10665777c05fac414466b7d5793d
----------------------------
Increase the default value of log_min_messages to WARNING, so that NOTICE-grade messages are not logged by default.  Per pgsql-hackers discussion back on 21-Nov-2007. 	2abf130a4efc0eb59f428e0fd2b4b300d372254a
----------------------------
Remove postmaster.c's check that NBuffers is at least twice MaxBackends. With the addition of multiple autovacuum workers, our choices were to delete the check, document the interaction with autovacuum_max_workers, or complicate the check to try to hide that interaction.  Since this restriction has never been adequate to ensure backends can't run out of pinnable buffers, it doesn't really have enough excuse to live to justify the second or third choices. Per discussion of a complaint from Andreas Kling (see also bug #3888). This commit also removes several documentation references to this restriction, but I'm not sure I got them all. 	d9384a4b7334ba755db88160fb96cd33725bd6d3
----------------------------
"Add: > > > 	o Prevent autovacuum from running if an old transaction is still > 	  running from the last vacuum > > 	  http://archives.postgresql.org/pgsql-hackers/2007-11/msg00899.php > "	f76eee0bf1a211eaac17957651c661806f182a2b
----------------------------
"Add item: > 	o Store per-table autovacuum settings in pg_class.reloptions. > > 	  http://archives.postgresql.org/pgsql-hackers/2007-02/msg01440.php > 	  http://archives.postgresql.org/pgsql-hackers/2008-01/msg00724.php "	4864986e9405dc95cf7e6acadc6c50447a547701
----------------------------
"Improve ""bgwriter_lru_multiplier"" GUC description. "	7ec66eab88e0d4868e160ccdee7ab9b58bc5d097
----------------------------
Show example of ts_headline() using a configuration name. 	271205223a3a2f8daec73869af82753c19d46826
----------------------------
In the SSH setup instructions, change ssh -L 3333:foo.com:5432 joe@foo.com I think this should be changed to ssh -L 3333:localhost:5432 joe@foo.com The reason is that this assumes the postgres server on foo.com allows connections from foo.com, which is not allowed by the default listen_addresses setting.  Add more detail explaining this. pointed out by Faheem Mitha Also change the example port number 3333 to 63333 so no one can complain that we are stealing a reserved port number. 	f49beb3f505ca30a155134deb5a9b4b7167c6728
----------------------------
Fix datetime input to behave correctly for Feb 29 in years BC. Formerly, DecodeDate attempted to verify the day-of-the-month exactly, but it was under the misapprehension that it would know whether we were looking at a BC year or not.  In reality this check can't be made until the calling function (eg DecodeDateTime) has processed all the fields.  So, split the BC adjustment and validity checks out into a new function ValidateDate that is called only after processing all the fields.  In passing, this patch makes DecodeTimeOnly work for BC inputs, which it never did before. (The historical veracity of all this is nonexistent, of course, but if we're going to say we support proleptic Gregorian calendar then we should do it correctly.  In any case the unpatched code is broken because it could emit dates that it would then reject on re-inputting.) Per report from Bernd Helmle.  Back-patch as far as 8.0; in 7.x we were not using our own calendar support and so this seems a bit too risky to put into 7.4. 	05506fc4afe95eca768853a9da35eb10e2126721
----------------------------
Avoid trying to print a NULL char pointer in --describe-config.  On some platforms this works, but on some it crashes.  Zdenek Kotala 	2e0e563124d3b1b279c4242927d1786e43303a0f
----------------------------
Put back code modularization of fseeko() configure checks. 	a74e0414a223f73bf9c4b836c9d62b03b4f898a9
----------------------------
Added --htmldir option to pg_config, equivalent to the new configure option. 	84ce707ba8f6dfd776e0d284fecd1fd497acf5a3
----------------------------
Upgrade to Autoconf 2.61: - Change configure.in to use Autoconf 2.61 and update generated files. - Update build system and documentation to support now directory variables offered by Autoconf 2.61. - Replace usages of PGAC_CHECK_ALIGNOF by AC_CHECK_ALIGNOF, now available in Autoconf 2.61. - Drop our patched version of AC_C_INLINE, as Autoconf now has the change. 	b120382353a938a342d3149031f40f42dc6e2720
----------------------------
No need to use checkpoint_warning to log checkpoints --- we added log_checkpoints in 8.3. 	2f67722dda9a46e82bad6807a12401dd7839910c
----------------------------
Add suggestion about how to set checkpoint_warning to log all checkpoints. 	2fce2336dc5413cd397d88be788348a1caebafa9
----------------------------
Add missing copyfuncs/equalfuncs support for AlterTSDictionaryStmt and AlterTSConfigurationStmt.  All utility statement node types are expected to be supported here, though they do not have to have outfuncs/readfuncs support.  Found by running regression tests with COPY_PARSE_PLAN_TREES enabled. 	49a730128c50fc6d5031001a26730caff0b0ea4b
----------------------------
Move example of turning off synchronous_commit to a more logical place, to wit in the description of that variable rather than some other one. 	19c40492f03803e9f9f8911cbc1b9b174d0ffd1c
----------------------------
configure tag'd 8.3.0 and built witih autoconf 2.59 	9e647a13872a5f34dc0009566925c5c352463780
----------------------------
Stamp 8.3 in CVS.  _No_ update of configure/configure.in. 	aad140b7ff572af7fba5d206e68484caa56cf09c
----------------------------
Mention synchronize_seqscans GUC variable in release notes. Update expected release date. 	06462f51e33b179ab523df503b63de0b90911c8e
----------------------------
Improve pg_autovacuum documentation to clarify that the enabled field cannot prevent anti-wraparound vacuuming, and to caution against setting unreasonably small values of freeze_max_age.  Also put in a notice that this catalog is likely to disappear entirely in some future release.  Per discussion of bug #3898 from Steven Flatt. 	7c15b10a9a7027b77a0a7b9b5b71debcacf2de9a
----------------------------
"Add a GUC variable ""synchronize_seqscans"" to allow clients to disable the new synchronized-scanning behavior, and make pg_dump disable sync scans so that it will reliably preserve row ordering.  Per recent discussions. "	47df4f668826c0646ae30d37971e4ff15e77b3e3
----------------------------
Minor editorial improvements in documentation of session_replication_role; in particular correct the obsolete claim that it can't be changed once any plans have been cached. 	b5518c8e886758800576ebf74eaa525eb3aa5550
----------------------------
Change StatementCancelHandler() to check the DoingCommandRead flag to decide whether to execute an immediate interrupt, rather than testing whether LockWaitCancel() cancelled a lock wait.  The old way misclassified the case where we were blocked in ProcWaitForSignal(), and arguably would misclassify any other future additions of new ImmediateInterruptOK states too.  This allows reverting the old kluge that gave LockWaitCancel() a return value, since no callers care anymore.  Improve comments in the various implementations of PGSemaphoreLock() to explain that on some platforms, the assumption that semop() exits after a signal is wrong, and so we must ensure that the signal handler itself throws elog if we want cancel or die interrupts to be effective.  Per testing related to bug #3883, though this patch doesn't solve those problems fully. Perhaps this change should be back-patched, but since pre-8.3 branches aren't really relying on autovacuum to respond to SIGINT, it doesn't seem critical for them. 	6322e84430e2b1756fbf31072679507266f2b304
----------------------------
Provide a concrete example of parameter expansion in archive_command. Per discussion of bug #3877.  Simon Riggs, some fixes by moi. 	1570d0467af81e652e2e9f89ba6c8508cc118255
----------------------------
Improve description of bgwriter_lru_multiplier, per discussion. 	1e985720ebd1a68ae3c64a660caebf72efca59c7
----------------------------
Stamp release for 8.3RC2;  configure will be stamped by packager. 	7b4be2ba2f3e891360c1a7232dde365b010e0261
----------------------------
Mark autovacuum entries in pg_stat_activity so that they can be easily distinguished from user-invoked commands.  Per suggestion from Tom Lane. 	7aa4164363f48c9a8345a0fda48e21de75f499d6
----------------------------
Fix a regression test that fails if default_text_search_config isn't 'english'. 	689d02a2e9c56dbad3982a440278e937fd063260
----------------------------
"Fix a conceptual error in my patch of 2007-10-26 that avoided considering clauseless joins of relations that have unexploited join clauses.  Rather than looking at every other base relation in the query, the correct thing is to examine the other relations in the ""initial_rels"" list of the current make_rel_from_joinlist() invocation, because those are what we actually have the ability to join against.  This might be a subset of the whole query in cases where join_collapse_limit or from_collapse_limit or full joins have prevented merging the whole query into a single join problem.  This is a bit untidy because we have to pass those rels down through a new PlannerInfo field, but it's necessary.  Per bug #3865 from Oleg Kharin. "	59fc64acee20071dd7386408c2e22a28e8c86541
----------------------------
Restructure the shutdown procedure for the archiver process to allow it to finish archiving everything (when there's no error), and to eliminate various hazards as best we can.  This fixes a previous 8.3 patch that caused the postmaster to kill and then restart the archiver during shutdown (!?). The new behavior is that the archiver is allowed to run unmolested until the bgwriter has exited; then it is sent SIGUSR2 to tell it to do a final archiving cycle and quit.  We only SIGQUIT the archiver if we want a panic stop; this is important since SIGQUIT will also be sent to any active archive_command.  The postmaster also now doesn't SIGQUIT the stats collector until the bgwriter is done, since the bgwriter can send stats messages in 8.3. The postmaster will not exit until both the archiver and stats collector are gone; this provides some defense (not too bulletproof) against conflicting archiver or stats collector processes being started by a new postmaster instance.  We continue the prior practice that the archiver will check for postmaster death immediately before issuing any archive_command; that gives some additional protection against conflicting archivers. Also, modify the archiver process to notice SIGTERM and refuse to issue any more archive commands if it gets it.  The postmaster doesn't ever send it SIGTERM; we assume that any such signal came from init and is a notice of impending whole-system shutdown.  In this situation it seems imprudent to try to start new archive commands --- if they aren't extremely quick they're likely to get SIGKILL'd by init. All per discussion. 	e6a442c71b30f62e7b5eee6058afc961b1c7f29b
----------------------------
vacuum_cost_limit has a minimum value of 1, not zero;  update postgresql.conf comment to match. 	77015b59aafe0ec58b2ae15285b419ade6eae818
----------------------------
Make standard maintenance operations (including VACUUM, ANALYZE, REINDEX, and CLUSTER) execute as the table owner rather than the calling user, using the same privilege-switching mechanism already used for SECURITY DEFINER functions.  The purpose of this change is to ensure that user-defined functions used in index definitions cannot acquire the privileges of a superuser account that is performing routine maintenance.  While a function used in an index is supposed to be IMMUTABLE and thus not able to do anything very interesting, there are several easy ways around that restriction; and even if we could plug them all, there would remain a risk of reading sensitive information and broadcasting it through a covert channel such as CPU usage. To prevent bypassing this security measure, execution of SET SESSION AUTHORIZATION and SET ROLE is now forbidden within a SECURITY DEFINER context. Thanks to Itagaki Takahiro for reporting this vulnerability. Security: CVE-2007-6600 	eedb068c0a7474fb11d67d03b0a9e1ded5df82c4
----------------------------
"Update TODO list based on 8.3 completed items: < * Allow major upgrades without dump/reload, perhaps using pg_upgrade <   [pg_upgrade] < * Check for unreferenced table files created by transactions that were <   in-progress when the server terminated abruptly < <   http://archives.postgresql.org/pgsql-patches/2006-06/msg00096.php < > * Check for unreferenced table files created by transactions that were >   in-progress when the server terminated abruptly > >   http://archives.postgresql.org/pgsql-patches/2006-06/msg00096.php > < * Support table partitioning that allows a single table to be stored <   in subtables that are partitioned based on the primary key or a WHERE <   clause <   creation of rules for INSERT/UPDATE/DELETE, and constraints for <   rapid partition selection.  Options could include range and hash >   creation of triggers or rules for INSERT/UPDATE/DELETE, and constraints >   for rapid partition selection.  Options could include range and hash < < * Improve replication solutions < < 	o Load balancing < < 	  You can use any of the master/slave replication servers to use a < 	  standby server for data warehousing. To allow read/write queries to < 	  multiple servers, you need multi-master replication like pgcluster. < < 	o Allow replication over unreliable or non-persistent links < < < 	o Mark change-on-restart-only values in postgresql.conf < 	  All objects in the default database tablespace must have default < 	  tablespace specifications. This is because new databases are < 	  created by copying directories. If you mix default tablespace < 	  tables and tablespace-specified tables in the same directory, < 	  creating a new database from such a mixed directory would create a < 	  new database with tables that had incorrect explicit tablespaces. < 	  To fix this would require modifying pg_class in the newly copied < 	  database, which we don't currently do. > 	  Currently all objects in the default database tablespace must > 	  have default tablespace specifications. This is because new > 	  databases are created by copying directories. If you mix default > 	  tablespace tables and tablespace-specified tables in the same > 	  directory, creating a new database from such a mixed directory > 	  would create a new database with tables that had incorrect > 	  explicit tablespaces.  To fix this would require modifying > 	  pg_class in the newly copied database, which we don't currently > 	  do. < < 	  o Allow recovery.conf to allow the same syntax as > 	  o Allow recovery.conf to support the same syntax as < * Allow user-defined types to specify a type modifier at table creation <   time < * Allow all data types to cast to and from TEXT < <   http://archives.postgresql.org/pgsql-hackers/2007-04/msg00017.php < < < 		o Add support for year-month syntax, INTERVAL '50-6' YEAR TO MONTH < 		o Interpret INTERVAL '1 year' MONTH as CAST (INTERVAL '1 year' AS < 		  INTERVAL MONTH), and this should return '12 months' > 		o Add support for year-month syntax, INTERVAL '50-6' YEAR > 		  TO MONTH > 		o Interpret INTERVAL '1 year' MONTH as CAST (INTERVAL '1 > 		  year' AS INTERVAL MONTH), and this should return '12 months' < 	* Allow MONEY to be cast to/from other numeric data types > 	* Allow MONEY to be easily cast to/from other numeric data types > < * Allow functions to have a schema search path specified at creation time < * Fix cases where invalid byte encodings are accepted by the database, <   but throw an error on SELECT < <   http://archives.postgresql.org/pgsql-hackers/2007-03/msg00767.php < * Improve logging of prepared statements recovered during startup > * Improve logging of prepared transactions recovered during startup < * Make standard_conforming_strings the default in 8.4? > * Make standard_conforming_strings the default in 8.5? < * Allow the count returned by SELECT, etc to be to represent as an int64 > * Allow the count returned by SELECT, etc to be represented as an int64 < 	o Use more reliable method for CREATE DATABASE to get a consistent < 	  copy of db? < 	o Fix transaction restriction checks for CREATE DATABASE and < 	  other commands < < 	  http://archives.postgresql.org/pgsql-hackers/2007-01/msg00133.php < 	  currently allowed. > 	  currently allowed.  This currently is done if the table is > 	  created inside the same transaction block as the COPY because > 	  no other backends can see the table. < 	o Add SET PATH for schemas? < < 	  This is basically the same as SET search_path. < 	o Enforce referential integrity for system tables < 		o Add Oracle-style packages  (Pavel) < < 		  A package would be a schema with session-local variables, < 		  public/private functions, and initialization functions.  It < 		  is also possible to implement these capabilities < 		  in all schemas and not use a separate ""packages"" < 		  syntax at all. < < 		  http://archives.postgresql.org/pgsql-hackers/2006-08/msg00384.php < < 		o Add single-step debugging of functions < 		o Allow RETURN to return row or record functions < < 		  http://archives.postgresql.org/pgsql-patches/2005-11/msg00045.php < 		  http://archives.postgresql.org/pgsql-patches/2006-08/msg00397.php < 		  http://archives.postgresql.org/pgsql-hackers/2006-09/msg00388.php < < 		o Fix problems with RETURN NEXT on tables with < 		  dropped/added columns after function creation < < 		  http://archives.postgresql.org/pgsql-patches/2006-02/msg00165.php < < * Make consistent use of long/short command options --- pg_ctl needs <   long ones, pg_config doesn't have short ones, postgres doesn't have <   enough long ones, etc. < < < < 	o Consider parsing the -c string into individual queries so each < 	  is run in its own transaction < < 	  http://archives.postgresql.org/pgsql-hackers/2007-01/msg00291.php < < < 	o Remove unnecessary function pointer abstractions in pg_dump source < 	  code > 	o Remove unnecessary function pointer abstractions in pg_dump source > 	  code < < < 	o Fix SSL retry to avoid useless repeated connection attempts and < 	  ensuing misleading error messages > < <   This is difficult because it requires datatype-specific knowledge. < < * Improve commit_delay handling to reduce fsync() < * %Add an option to sync() before fsync()'ing checkpoint files > < * Reduce lock time during VACUUM FULL by moving tuples with read lock, <   then write lock and truncate table < <   Moved tuples are invisible to other backends so they don't require a <   write lock. However, the read lock promotion to write lock could lead <   to deadlock situations. < < * Prevent long-lived temporary tables from causing frozen-xid advancement <    starvation < <    The problem is that autovacuum cannot vacuum them to set frozen xids; <    only the session that created them can do that. < < < < 	o Use free-space map information to guide refilling < 	o Consider logging activity either to the logs or a system view > 	  The problem is that autovacuum cannot vacuum them to set frozen xids; > 	  only the session that created them can do that. < * Add connection pooling < <   It is unclear if this should be done inside the backend code or done <   by something external like pgpool. The passing of file descriptors to <   existing backends is one of the difficulties with a backend approach. < < * Consider reducing memory used for shared buffer reference count < <   http://archives.postgresql.org/pgsql-hackers/2007-01/msg00752.php < < * %Remove memory/file descriptor freeing before ereport(ERROR) < * %Promote debug_query_string into a server-side function current_query() < * Allow ecpg to work with MSVC and BCC < * Add xpath_array() to /contrib/xml2 to return results as an array < * Allow building in directories containing spaces < <   This is probably not possible because 'gmake' and other compiler tools <   do not fully support quoting of paths with spaces. < < * Fix sgmltools so PDFs can be generated with bookmarks < * Split out libpq pgpass and environment documentation sections to make <   it easier for non-developers to find < * Use strlcpy() rather than our StrNCpy() macro < <   http://archives.postgresql.org/pgsql-hackers/2006-09/msg02108.php < < 	o Re-enable timezone output on log_line_prefix '%t' when a < 	  shorter timezone string is available < * Allow statements across databases or servers with transaction <   semantics < <   This can be done using dblink and two-phase commit. > * Add Oracle-style packages  (Pavel) < * Add the features of packages > 	  A package would be a schema with session-local variables, > 	  public/private functions, and initialization functions.  It > 	  is also possible to implement these capabilities > 	  in any schema and not use a separate ""packages"" > 	  syntax at all. < 	o  Make private objects accessible only to objects in the same schema < 	o  Allow current_schema.objname to access current schema objects < 	o  Add session variables < 	o  Allow nested schemas > 	  http://archives.postgresql.org/pgsql-hackers/2006-08/msg00384.php "	a225bf05e000ec5240bff98a75839362130eace9
----------------------------
"Improve consistency of error reporting in GUC assign_hook routines.  Some were reporting ERROR for interactive assignments and LOG for other cases, some were saying nothing for non-interactive cases, and a few did yet other things.  Make them use a new function GUC_complaint_elevel() to establish a reasonably uniform policy about how to report.  There are still a few edge cases such as assign_search_path(), but it's much better than before. Per gripe from Devrim Gunduz and subsequent discussion. As noted by Alvaro, it'd be better to fold these custom messages into the standard ""invalid parameter value"" complaint from guc.c, perhaps as the DETAIL field.  However that will require more redesign than seems prudent for 8.3. This is a relatively safe, low-impact change that we can afford to risk now. "	5233dc15cf08afc0ddece24cc0f308582bf34c18
----------------------------
Update archive_command example to use || test, rather than if []. 	3791d26d4b6f2080d5e1fd1a008249f8ece29f6e
----------------------------
Mention use all configure options when getting pgindent typedefs. 	812bf6984b00d72309fd9d5e36149331456add3f
----------------------------
Update write-cache docs to mention windows behavior for various fsync_methods. Magnus. 	900f84e27538d44d00650adbfd8349f492f7e4ab
----------------------------
Fix example archive_command for standalone backups so it doesn't return spurious non-zero. 	780f50dae9b83704471d77f5d9e79a0ab950c6d3
----------------------------
Improve the method of localizing column names and other fixed strings in psql's \d commands and other uses of printQuery().  Previously we would pass these strings through gettext() and then send them to the server as literals in the SQL query.  But the code was not set up to handle doubling of quotes in the strings, causing failure if a translation attempted to use the wrong kind of quote marks, as indeed is now the case for (at least) the French translation of \dFp.  Another hazard was that gettext() would translate to whatever encoding was implied by the client's LC_CTYPE setting, which might be different from the client_encoding setting, which would probably cause the server to reject the query as mis-encoded.  The new arrangement is to send the untranslated ASCII strings to the server, and do the translations inside printQuery() after the query results come back.  Per report from Guillaume Lelarge and subsequent discussion. 	df4271fedd3a3428ffafb9c2cff7de37e13976a0
----------------------------
"Remove completed 8.3 TODO items: < 	o -Allow commenting of variables in postgresql.conf to restore them < 	  to defaults < 	o -Add a GUC variable to control the tablespace for temporary objects < 	  and sort files < Monitoring < ========== < < * -Allow server log information to be output as CSV format < * -Add ability to monitor the use of temporary sort files < * -Allow user-defined types to accept 'typmod' parameters < <   http://archives.postgresql.org/pgsql-hackers/2005-08/msg01142.php <   http://archives.postgresql.org/pgsql-hackers/2005-09/msg00012.php <   http://archives.postgresql.org/pgsql-hackers/2006-08/msg00149.php < < * -Add Globally/Universally Unique Identifier (GUID/UUID) < <   http://archives.postgresql.org/pgsql-patches/2006-09/msg00209.php <   http://archives.postgresql.org/pgsql-general/2007-01/msg00853.php < < * -Support a data type with specific enumerated values (ENUM) < 	o -Add support for arrays of complex types < 	o -Make 64-bit version of the MONEY data type < * -Add ISO day of week format 'ID' to to_char() where Monday = 1 < * -Add a field 'isoyear' to extract(), based on the ISO week < * -Add RESET SESSION command to reset all session state < 	o -Make CLUSTER preserve recently-dead tuples per MVCC requirements < 	o -Add more logical syntax CLUSTER table USING index; < 	  support current syntax for backward compatibility < 	o -Allow UPDATE/DELETE WHERE CURRENT OF cursor < 		o -Add support for MOVE cursors < 		o -Allow PL/PythonU to return boolean rather than 1/0 < 	o -Allow psql \pset boolean variables to set to fixed values, rather < 	  than toggle < 	o -Add -f to pg_dumpall < Dependency Checking < =================== < < * -Flush cached query plans when the dependent objects change or <   when new ANALYZE statistics are available < * -Track dependencies in function bodies and recompile/invalidate < * -Invalidate prepared queries, like INSERT, when the table definition <   is altered < < * -Allow use of indexes to search for NULLs < * -Allow the creation of indexes with mixed ascending/descending <   specifiers < * -Reduce checkpoint performance degredation by forcing data to disk <   more evenly < * -Allow sequential scans to take advantage of other concurrent <   sequential scans, also called ""Synchronised Scanning"" < * -Consider shrinking expired tuples to just their headers < * -Allow heap reuse of UPDATEd rows if no indexed columns are changed, <   and old and new versions are on the same heap page < * -Reduce XID consumption of read-only queries < 	o -Turn on by default < 	o -Allow multiple vacuums so large tables do not starve small < 	  tables < * -Allow the pg_xlog directory location to be specified during initdb <   with a symlink back to the /data location < * -Allow buffered WAL writes and fsync < * -Allow ORDER BY ... LIMIT # to select high/low value without sort or <   index using a sequential scan for highest/lowest values < * -Merge xmin/xmax/cmin/cmax back into three header fields < 	o -Support a smaller header for short variable-length fields < * -Move NAMEDATALEN from postgres_ext.h to pg_config_manual.h < * -Fix problem with excessive logging during SSL disconnection < <   http://archives.postgresql.org/pgsql-bugs/2006-12/msg00122.php <   http://archives.postgresql.org/pgsql-bugs/2007-05/msg00065.php < < 	o -Add long file support for binary pg_dump output "	d32f24776fb6780aaf3c08019692778b7bff1b82
----------------------------
Change wording of logged message when cancelling an autovacuum task, using american speling (unlike this commit message).  Per complaint from Mike C. on bug #3790 and subsequent discussion. 	59c841506c5b659bc570d49220313ef680ab236c
----------------------------
If pg_dump drops a schema, make sure 'search_path' it SET the next time it is needed --- basically don't remember the previous 'search_path' after a drop schema because it might have failed but be created later. 	7ebbc815d994393c4315ef02fe66622e0089f972
----------------------------
Update text: < * Prevent long-lived temporary tables from causing frozen-Xid advancement > * Prevent long-lived temporary tables from causing frozen-xid advancement > >    The problem is that autovacuum cannot vacuum them to set frozen xids; >    only the session that created them can do that. > > > 	ba2b2a2c4ebc883aabba5857eaeb6f3cef83e879
----------------------------
Minor improvement in documentation of temp_tablespaces: avoid grammatical ambiguity and say what the default value is. 	3ebb8867aa72eaac7df9d797efe760bdb61c1b56
----------------------------
GIN index build's allocatedMemory counter needs to be long, not uint32. Else, in a 64-bit machine with maintenance_work_mem set to above 4Gb, the counter overflows and we never recognize having reached the maintenance_work_mem limit.  I believe this explains out-of-memory failure recently reported by Sean Davis. This is a bug, so backpatch to 8.2. 	16dcd5e5ce460c976cec93cfbbe4e6e970168450
----------------------------
Re-do configure with autoconf 2.59 	7c0bc953e6f53ed9a2ae07ad8f6a2b019bc8fe58
----------------------------
Add a couple of notes pointing out that GIN index build time is very sensitive to maintenance_work_mem (something I just learned the hard way). 	fb8b38e4bf324787d090f77261441bf13b02a69c
----------------------------
Add snb_ru_init(internal) to list of stub functions in tsearch2 compatibility module.  Needed to support loading of 8.1-era tsearch2 configuration data. 	f00d75b8d7a5e101b1a7434c282c17f7bb90aaa1
----------------------------
When logging the recovery.conf parameters, show them quoted as they would appear in the configuration file. 	b30769ee54f1877dab17e7b5c7bf91de93970036
----------------------------
Update config.guess and config.sub 	7a550cb95cf3a541deed15df1d5e25f36af636e5
----------------------------
Fix insufficient search-path paranoia in SQL function definitions. Remove setting of search_path in install/uninstall scripts, since unlike other contrib modules this one does not want to let you change the installation schema. 	e0b15e27483ecbe911ea8681c18ceedf260920bf
----------------------------
I find that an out-of-the-box installation of OSSP uuid 1.6.0 installs itself as libuuid, not libossp-uuid which was the only case expected by our build support.  Install a configure test to determine which name to use (and to check that the library is present at all). 	1ef648cfbc75041eddce48ef2e9eb004b7906efd
----------------------------
Document that configure option only affects contrib: --with-ossp-uuid        use OSSP UUID library when building /contrib/uuid-ossp 	c1a03bee0806c14511bf94d257e3e41bcaf2a78a
----------------------------
Properly pass third argument to open() in fsync test program. Hiroshi Saito 	049f6b9baac3d0d1a164e058b216ff168b692e2f
----------------------------
Update wording for xsl configure option. 	f96e1e0faa1f86a6cd0321743a2c505da573e211
----------------------------
Document that configure --with-libxslt controls just /contrib/xml2. Nikolay Samokhvalov 	ede83e04aadda5c893d826324f3c9640e34671c2
----------------------------
Prevent continuing disk-space bloat when profiling (with PROFILE_PID_DIR enabled) and autovacuum is on.  Since there will be a steady stream of autovac worker processes exiting and dropping gmon.out files, allowing them to make separate subdirectories results in serious bloat; and it seems unlikely that anyone will care about those profiles anyway.  Limit the damage by forcing all autovac workers to dump in one subdirectory, PGDATA/gprof/avworker/. Per report from Jrg Beyer and subsequent discussion. 	69500b05d6adb77d73fd5867f74167f17a608e3e
----------------------------
Update discussion of shared memory sizing for 8.3: adjust multipliers, mention autovacuum_max_workers.  Minor copy-editing too. 	388c7e28c517d3077bfa9de3058cd98dc938a451
----------------------------
Add documentation mention that FSM == Free Space Map, so the config parameter name makes more sense. 	53e3f9dcfdb533dc4513c35d4d2e090eed81f6c2
----------------------------
simple script to pull together a very small (<500k) tar file that builds *just* libpq ... its not perfect, as it pulls in more files then is necessarily required to build, but as it is, it requires one simple patch to configure.in in order to work ... Tested on FreeBSD ... patch for configure.in hasn't been applied, but putting the script in place so that it doesn't get lost ... 	b973530737805710e67730393000b3786d454292
----------------------------
Allow an autovacuum worker to be interrupted automatically when it is found to be locking another process (except when it's working to prevent Xid wraparound problems). 	acac68b2bcae818bc8803b8cb8cbb17eee8d5e2b
----------------------------
Make initdb's selection of default text search configuration depend only on the 'language' part of the locale name, ignoring the country code. We may need to be smarter later when there are more built-in configurations, but for now this is good enough and avoids having to bloat the table. 	48c16e14f5695a5f1d446629f0a348e5202cbead
----------------------------
Rearrange vacuum-related bits in PGPROC as a bitmask, to better support having several of them.  Add two more flags: whether the process is executing an ANALYZE, and whether a vacuum is for Xid wraparound (which is obviously only set by autovacuum). Sneakily move the worker's recently-acquired PostAuthDelay to a more useful place. 	745c1b2c2ab8385c8392ff10383a64527e3150b7
----------------------------
Minor changes to autovacuum worker: change error handling so that it continues with the next table on schedule instead of exiting, in all cases instead of just on query cancel. Add a errcontext() line indicating the activity of the worker to the error message when it is cancelled. Change the WorkerInfo struct to contain a pointer to the worker's PGPROC instead of just the PID. Add forgotten post-auth delays, per Simon Riggs.  Also to autovac launcher. 	2627c83561d8a0ff1f07d85426a389c5eb82980f
----------------------------
Make configure probe for the location of the <uuid.h> header file. Needed to accommodate different layout on some platforms (Debian for one).  Heikki Linnakangas 	07d0a370c13545755aec57839530fe14e83be092
----------------------------
Add a note pointing out that you can't log to syslog without tweaking the syslog configuration file (at least not on most known Unixen). I dunno why we hadn't had that info in the docs all along ... 	41a312a1f63050ba961032e3e3fca6f718a02c0c
----------------------------
Include NOLOGIN roles in the 'flat' password file.  In the original coding this was seen as useless, but the problem with not including them is that the error message will often be something about authentication failure, rather than the more helpful one about 'role is not permitted to log in'.  Per discussion. 	fb631dba2a3c2c183bb99f2098491ecf96fb6664
----------------------------
"Replace a reference to ""start_log_collector"" with ""logging_collector"", per Guillaume Lelarge. "	81f285da7c65c753a8b5c3ff2bd9e0383f0c6251
----------------------------
"A few improvements to analyze and vacuum sections in documentation: add ""see also"" entries for autovacuum in analyze and vacuum reference pages, and enhance usage of cross-references in the maintenance page. "	2a997a7065cbe25299006ca6ed6156516a56466f
----------------------------
Stamp 8.3beta1, except in configure.in/configure. 	87dfa0d9ae803900ccdebb6b3c03eaaf23c90bf1
----------------------------
Adjust recovery PS display as agreed with Simon: 'waiting for XXX' while the restore_command does its thing, then 'recovering XXX' while processing the segment file.  These operations are heavyweight enough that an extra PS display set shouldn't bother anyone. 	ab051bd2938feb8fcbbad6a4c9d97a69d7ec87a6
----------------------------
Change initdb and CREATE DATABASE to actively reject attempts to create databases with encodings that are incompatible with the server's LC_CTYPE locale, when we can determine that (which we can on most modern platforms, I believe).  C/POSIX locale is compatible with all encodings, of course, so there is still some usefulness to CREATE DATABASE's ENCODING option, but this will insulate us against all sorts of recurring complaints caused by mismatched settings. I moved initdb's existing LC_CTYPE-to-encoding mapping knowledge into a new src/port/ file so it could be shared by CREATE DATABASE. 	70b9b9b788ceb8d16479fb3e6c5a4a5784a45766
----------------------------
Tweak initdb's text search configuration selection code so it can cope with LANG settings like 'es_ES@euro'. 	834f45014bd944817e37cdde7169e4f9dbf87931
----------------------------
Minor improvements in backup and recovery: - create a separate archive_mode GUC, on which archive_command is dependent - %r option in recovery.conf sends last restartpoint to recovery command - %r used in pg_standby, updated README - minor other code cleanup in pg_standby - doc on Warm Standby now mentions pg_standby and %r - log_restartpoints recovery option emits LOG message at each restartpoint - end of recovery now displays last transaction end time, as requested by Warren Little; also shown at each restartpoint - restart archiver if needed to carry away WAL files at shutdown Simon Riggs 	f18dfc48356945d684fe74abaa7d5f5033b2af46
----------------------------
"Create a function variable ""join_search_hook"" to let plugins override the join search order portion of the planner; this is specifically intended to simplify developing a replacement for GEQO planning.  Patch by Julius Stroffek, editorialized on by me.  I renamed make_one_rel_by_joins to standard_join_search and make_rels_by_joins to join_search_one_level to better reflect their place within this scheme. "	cdf0231c88bd65409f93904443ee4c021f021c64
----------------------------
Dept. of second thoughts: fix loop in BgBufferSync so that the exit when bgwriter_lru_maxpages is exceeded leaves the loop variables in the expected state.  In the original coding, we'd fail to advance next_to_clean, causing that buffer to be probably-uselessly rechecked next time, and also have an off-by-one idea of the number of buffers scanned. 	7a315a09dc0f7a1f903b89022a2a833c1719145b
----------------------------
Avoid having autovacuum read pgstats data too many times in quick succession. This is problematic for the autovac launcher when there are many databases, so we keep data for a full second before reading it again. 	45cbdaa038d7219ac08e04750cd18c9958611a9b
----------------------------
"Simplify and rename some GUC variables, per various recent discussions: * stats_start_collector goes away; we always start the collector process, unless prevented by a problem with setting up the stats UDP socket. * stats_reset_on_server_start goes away; it seems useless in view of the availability of pg_stat_reset(). * stats_block_level and stats_row_level are merged into a single variable ""track_counts"", which controls all reports sent to the collector process. * stats_command_string is renamed to track_activities. * log_autovacuum is renamed to log_autovacuum_min_duration to better reflect its meaning. The log_autovacuum change is not a compatibility issue since it didn't exist before 8.3 anyway.  The other changes need to be release-noted. "	48f7e6439568e5d665f622e2973becc50a86b64a
----------------------------
Make autovacuum report the start time of its current activity in pg_stat_activity.  Per gripe from Jim Nasby. 	ea72d37ff727db8c7393990dd483e287dcb75b25
----------------------------
If we're gonna provide an --enable-profiling configure option, surely it ought to know that you need -DLINUX_PROFILE on Linux. 	017daed0dd8bc158b97fe5c6ecb839a56905fc52
----------------------------
Update documentation to mention that autovacuum also does analyze so we don't need to recommend nightly analyzes anymore unless autovacuum is off. 	13e26073bda7e5fb91c8724670357f2e0541a17d
----------------------------
Add tsearch tab completion support: * adds a few missing words to some commands (like adding GIN as a valid index type or OWNED BY for ALTER SEQUENCE,...) * support for ALTER TABLE foo ENABLE/DISABLE REPLICA TRIGGER/RULE * autocomplete CREATE DATABASE foo TEMPLATE (mostly done to prevent conflicts with the TEMPLATE keyword for text search) * support for ALTER/CREATE/DROP TEXT SEARCH as well as COMMENT ON TEXT SEARCH and the corresponding psql backslash commands. This proved a little more difficult than expected due to the fact that words_after_create[] is used for two purposes - one is to provide a list of words that follow immediatly after CREATE (or DROP) and the other purpose is to use it for autocompleting anywhere in the statement if the word in that struct is found with a query. Since TEXT SEARCH CONFIGURATION|DICTIONARY|TEMPLATE|PARSER results in 3 words instead of one (as all the other words in that list are) I added a flag to the struct to tell create_command_generator() to skip that entry for autocompleting immediatly after CREATE which feels like a dirty hack (but that holds true for a lot of code in tab-complete.c). Stefan Kaltenbrunner 	17aae41afdd419a5921e75d3dd9fc29a8f18851d
----------------------------
Update documentation to emphasize autovacuum rather than administrator-scheduled vacuums. 	f307fe4c9bbc6a0a23c5c661a2ad1151eb969367
----------------------------
Fix a memory leak in the autovacuum launcher code.  Noted by Darcy Buskermolen, who reported it privately to me. 	945ba50dc398ad55ac0ebe5adb428177d642f2a3
----------------------------
Make sure that open hash table scans are cleaned up when bgwriter tries to recover from elog(ERROR).  Problem was created by introduction of hash seq search tracking awhile back, and affects all branches that have bgwriter; in HEAD the disease has snuck into autovacuum and walwriter too.  (Not sure that the latter two use hash_seq_search at the moment, but surely they might someday.)  Per report from Sergey Koposov. 	f181f9e1e49b1546d7e42b43a04487dfc6f73690
----------------------------
Remove the vacuum_delay_point call in count_nondeletable_pages, because we hold an exclusive lock on the table at this point, which we want to release as soon as possible.  This is called in the phase of lazy vacuum where we truncate the empty pages at the end of the table. An alternative solution would be to lower the vacuum delay settings before starting the truncating phase, but this doesn't work very well in autovacuum due to the autobalancing code (which can cause other processes to change our cost delay settings).  This case could be considered in the balancing code, but it is simpler this way. 	21c27af65fb21a36ff263bcd9e8e7cac0419984c
----------------------------
Revert temporary patch that made synchronous_commit default to OFF. 	f243a1a1bd836ed45f6e37a3843868bd9bbecad7
----------------------------
Set the correct context (PGC_SIGHUP) for log_autovacuum, per ITAGAKI Takahiro. Fix grammatical errors in its description. 	b7adf47eda0ef19507aa65bc021cb893536e708c
----------------------------
Code review for GUC revert-values-if-removed-from-postgresql.conf patch; and in passing, fix some bogosities dating from the custom_variable_classes patch.  Fix guc-file.l to correctly check changes in custom_variable_classes that are attempted concurrently with additions/removals of custom variables, and don't allow the new setting to be applied in advance of checking it. Clean up messy and undocumented situation for string variables with NULL boot_val.  Fix DefineCustomVariable functions to initialize boot_val correctly.  Prevent find_option from inserting bogus placeholders for custom variables that are simply inquired about rather than being set. 	40fda15dcebdd07ee75ac1f55dad145f91297b99
----------------------------
Provide for a file specifying non-standard config options for temp install for pg_regress, via --temp-config option. Pick this up in the make file via TEMP_CONFIG setting. 	0cb74d3cec086eab637b8016ae7ade2cbf546223
----------------------------
Restrict tsearch config file base names to contain a-z, 0-9, and underscore, instead of the initial policy of whatever isalpha() likes.  Per discussion. 	6d871a2538d55a74034face43dde1f9ceaedc151
----------------------------
Support SET FROM CURRENT in CREATE/ALTER FUNCTION, ALTER DATABASE, ALTER ROLE. (Actually, it works as a plain statement too, but I didn't document that because it seems a bit useless.)  Unify VariableResetStmt with VariableSetStmt, and clean up some ancient cruft in the representation of same. 	e7889b83b7059e776f0a3d76bbbdd98687f4592c
----------------------------
Add an ORDER BY to nail down the expected row order from a query that's been shown to be sensitive to concurrent autovacuum.  Per Alvaro. 	6f4a5462b4d710316877f21bdad2c13f17e61fe7
----------------------------
Text search documentation word improvements;  move configuration section to be more logical. 	09c29cc57b7a73b68bef79204b595c76bfc2a7f7
----------------------------
"Improve behavior of log_lock_waits patch.  Ensure that something gets logged even if the ""deadlock detected"" ERROR message is suppressed by an exception catcher.  Be clearer about the event sequence when a soft deadlock is fixed: the fixing process might or might not still have to wait, so log that separately.  Fix race condition when someone releases us from the lock partway through printing all this junk --- we'd not get confused about our state, but the log message sequence could have been misleading, ie, a ""still waiting"" message with no subsequent ""acquired"" message.  Greg Stark and Tom Lane. "	24d4517b3b98ad02a47cde09976fcdfd25778fc5
----------------------------
Mention configurations early in text search documentation to table/index section makes a little more sense. 	baf3a134d9f2184907914acae0361154a0e63424
----------------------------
"Fix a couple of misbehaviors rooted in the fact that the default creation namespace isn't necessarily first in the search path (there could be implicit schemas ahead of it).  Examples are test=# set search_path TO s1; test=# create view pg_timezone_names as select * from pg_timezone_names(); ERROR:  ""pg_timezone_names"" is already a view test=# create table pg_class (f1 int primary key); ERROR:  permission denied: ""pg_class"" is a system catalog You'd expect these commands to create the requested objects in s1, since names beginning with pg_ aren't supposed to be reserved anymore.  What is happening is that we create the requested base table and then execute additional commands (here, CREATE RULE or CREATE INDEX), and that code is passed the same RangeVar that was in the original command.  Since that RangeVar has schemaname = NULL, the secondary commands think they should do a path search, and that means they find system catalogs that are implicitly in front of s1 in the search path. This is perilously close to being a security hole: if the secondary command failed to apply a permission check then it'd be possible for unprivileged users to make schema modifications to system catalogs.  But as far as I can find, there is no code path in which a check doesn't occur.  Which makes it just a weird corner-case bug for people who are silly enough to want to name their tables the same as a system catalog. The relevant code has changed quite a bit since 8.2, which means this patch wouldn't work as-is in the back branches.  Since it's a corner case no one has reported from the field, I'm not going to bother trying to back-patch. "	862861ee7748f9ee288decf7d5f9a2ba908b5b19
----------------------------
Cleanup for some problems in tsearch patch: - ispell initialization crashed on empty dictionary file - ispell initialization crashed on affix file with prefixes but no suffixes - stop words file was run through pg_verify_mbstr, with database encoding, but it's supposed to be UTF-8; similar bug for synonym files - bunch of comments added, typos fixed, and other cleanup Introduced consistent encoding checking/conversion of data read from tsearch configuration files, by doing this in a single t_readline() subroutine (replacing direct usages of fgets).  Cleaned up API for readstopwords too. Heikki Linnakangas 	7351b5fa1781c3942d2d5ff2116d2d0ba882bd42
----------------------------
Remove option to change parser of an existing text search configuration. This prevents needing to do complex and poorly-defined updates of the mapping table if the new parser has different token types than the old. Per discussion. 	8a5592daf1bcc65f002fce23de1ee0e533e6c6a6
----------------------------
Simplify CREATE TEXT SEARCH CONFIGURATION by eliminating the separate 'with map' parameter; as things now stand there's really not much point in specifying a config-to-copy if you don't copy its map.  Also, use COPY instead of TEMPLATE as the key word for a config-to-copy, so as to avoid confusion with text search templates.  Per discussion; the just-committed reference page for the command already describes it this way. 	fd33d90a23150dec944cdfdf4587f7770543acd1
----------------------------
Add configure option --with-system-tzdata to use operating system time zone database. 	4e94d1f952c3ce5670ceae3c12b55e344503a701
----------------------------
Provide for logfiles in machine readable CSV format. In consequence, rename redirect_stderr to logging_collector. Original patch from Arul Shaji, subsequently modified by Greg Smith, and then heavily modified by me. 	fd801f4faa8e0f00bc314b16549e3d8e8aa1b653
----------------------------
TEMPORARILY make synchronous_commit default to OFF, so that we can get more thorough testing of async-commit mode from the buildfarm.  This patch MUST get reverted before 8.3 release! 	b83bd31bd953b6daa22bcbdaee5ade2a27ec7324
----------------------------
Adjust configure so that it sets CFLAGS properly for Intel's icc even if the compiler is not defining __GNUC__.  Per report from Dirk Tilger that it is possible for icc to not do that. 	df9ea6a1f1c283b342d1b6e80968fc09310a2f67
----------------------------
Fix crash caused by log_timezone patch if we attempt to emit any elog messages between the setting of log_line_prefix and the setting of log_timezone.  We can't realistically set log_timezone any earlier than we do now, so the best behavior seems to be to use GMT zone if any timestamps are to be logged during early startup.  Create a dummy zone variable with a minimal definition of GMT (in particular it will never know about leap seconds), so that we can set it up without reference to any external files. 	4fd8d6b3e77eb00cfd7bb8d3d130b147ba0d60f3
----------------------------
Fix a problem in my recent patch to initialize cancel_key for autovac workers as well as regular backends: if no regular backend launches before the autovac launcher tries to start an autovac worker, the postmaster would get an Assert fault due to calling PostmasterRandom before random_seed was initialized. Cleanest solution seems to be to take the initialization of random_seed out of ServerLoop and let PostmasterRandom do it for itself. 	0b9d3d4dcd0561fbf674e09af1160f087eda535b
----------------------------
Switch over to using the src/timezone functions for formatting timestamps displayed in the postmaster log.  This avoids Windows-specific problems with localized time zone names that are in the wrong encoding, and generally seems like a good idea to forestall other potential platform-dependent issues. To preserve the existing behavior that all backends will log in the same time zone, create a new GUC variable log_timezone that can only be changed on a system-wide basis, and reference log-related calculations to that zone instead of the TimeZone variable. This fixes the issue reported by Hiroshi Saito that timestamps printed by xlog.c startup could be improperly localized on Windows.  We still need a simpler patch for that problem in the back branches, however. 	bdd6b62245fe7b5f25c4fec509b80ec930b6deff
----------------------------
Fix some sloppiness in the recent multiple-autovacuum-worker patch.  It was not bothering to initialize is_autovacuum for regular backends, meaning there was a significant chance of the postmaster prematurely sending them SIGTERM during database shutdown.  Also, leaving the cancel key unset for an autovac worker meant that any client could send it SIGINT, which doesn't sound especially good either. 	73852bd520c219051431a74ee511c4f29dd4baf3
----------------------------
Move session_start out of MyProcPort stucture and make it a global called MyStartTime, so that we will be able to create a cookie for all processes for CSVlogs. It is set wherever MyProcPid is set. Take the opportunity to remove the now unnecessary session-only restriction on the %s and %c escapes in log_line_prefix. 	63872601e84ec78fd1942d5779fccedd415c929f
----------------------------
Done: < * Allow buffered WAL writes and fsync 	c441e26ee8022862b3c3906609e5a386696d2d3b
----------------------------
Support an optional asynchronous commit mode, in which we don't flush WAL before reporting a transaction committed.  Data consistency is still guaranteed (unlike setting fsync = off), but a crash may lose the effects of the last few transactions.  Patch by Simon, some editorialization by Tom. 	4a78cdeb6b598940e9d9adb92deca6494628802a
----------------------------
"Create a new dedicated Postgres process, ""wal writer"", which exists to write and fsync WAL at convenient intervals.  For the moment it just tries to offload this work from backends, but soon it will be responsible for guaranteeing a maximum delay before asynchronously-committed transactions will be flushed to disk. This is a portion of Simon Riggs' async-commit patch, committed to CVS separately because a background WAL writer seems like it might be a good idea independently of the async-commit feature.  I rebased walwriter.c on bgwriter.c because it seemed like a more appropriate way of handling signals; while the startup/shutdown logic in postmaster.c is more like autovac because we want walwriter to quit before we start the shutdown checkpoint. "	ad4295728e04f4107f4dcbbee4950e526becb95d
----------------------------
Set a default autovacuum vacuum_cost_delay value of 20ms, to avoid excessive I/O utilization, per discussion. While at it, lower the autovacuum vacuum and analyze threshold values to 50 tuples.  It is a bit higher (i.e. more conservative) than what I originally proposed but much better than the old values for small tables. 	53d2951be7687089885865f31949eda87439a80b
----------------------------
Reword paragraph about the autovacuum_max_workers setting.  Patch from Jim Nasby. 	aa81c558ee5293fef96aa4049cd5a4d9da90954e
----------------------------
Fix elog.c to avoid infinite recursion (leading to backend crash) when log_min_error_statement is active and there is some problem in logging the current query string; for example, that it's too long to include in the log message without running out of memory.  This problem has existed since the log_min_error_statement feature was introduced.  No doubt the reason it wasn't detected long ago is that 8.2 is the first release that defaults log_min_error_statement to less than PANIC level. Per report from Bill Moran. 	a0dab332a2e1961f45b38b23bd428859621e6f3c
----------------------------
Provide a bit more high-level documentation for the GEQO planner. Per request from Luca Ferrari. 	ddb93cac24cfe810e9c94df7f03facc1d07725fd
----------------------------
Adjust configure script to print the bison and flex versions in use. Minor rearrangements to make a few tests in a more logical order. 	177be3f9bbb0c82e77d24c3982f57444b69200c6
----------------------------
Document that 'deleted' is also tracked by autovacuum. 	9e19063abc6d545f610d104eb11ae5b650720f2d
----------------------------
Fix outfuncs.c to dump A_Const nodes representing NULLs correctly.  This has been broken since forever, but was not noticed because people seldom look at raw parse trees.  AFAIK, no impact on users except that debug_print_parse might fail; but patch it all the way back anyway.  Per report from Jeff Ross. 	804f016fb5e1dab31e8272f44298f1c0900d1cb8
----------------------------
"Because plpgsql's scanner uses %option case-insensitive, flex's results could theoretically vary depending on what the compile-time locale setting is. Hence, force it to see LC_CTYPE=C to ensure consistent build results. (It's likely that this makes no difference in practice, since our specification for ""identifier"" surely includes both ends of any possible uppercase/lowercase pair anyway.  But it should silence warnings about ambiguous character classes that are reported by some buildfarm members.) "	78c84ad49eeb12c67797e5acb3cf637a59601ce2
----------------------------
Fix incorrect comment about the timing of AbsorbFsyncRequests() during checkpoint.  The comment claimed that we could do this anytime after setting the checkpoint REDO point, but actually BufferSync is relying on the assumption that buffers dumped by other backends will be fsync'd too.  So we really could not do it any sooner than we are doing it. 	83aaebba63a51cf2207b69e89ead767f3a82ce88
----------------------------
Add notes about configuring Visual Studio Express for use with the Platform SDK. 	454333a687d7d64ae88892606e7bc69ebcec7746
----------------------------
Avoid crash in interrupted autovacuum worker, caused by leaving the current memory context pointing at a context not long lived enough. Also, create a fake PortalContext where to store the vac_context, if only to avoid having it be a top-level memory context. 	2910ccefb454759a9f598996a4be9505b388e824
----------------------------
Arrange for SIGINT in autovacuum workers to cancel the current table and continue with the schedule.  Change current uses of SIGINT to abort a worker into SIGTERM, which keeps the old behaviour of terminating the process. Patch from ITAGAKI Takahiro, with some editorializing of my own. 	10af02b912714a1cb423d100186b43b20142f008
----------------------------
Fix computation of PG_VERSION_NUM by configure: remove unnecessary and unportable backslashes in awk script (per Patrick Welche), and add brackets to prevent autoconf from mangling sed's regexp (the sed call here never did what was expected). 	c786796d0a7931d67a38840d899c4e45ef4c7bf6
----------------------------
Fix PGXS conventions so that extensions can be built against Postgres installations whose pg_config program does not appear first in the PATH. Per gripe from Eddie Stanley and subsequent discussions with Fabien Coelho and others. 	b09c248bdd3d0d86714865d2142604aea789e840
----------------------------
Improve autovacuum launcher's ability to detect a problem in worker startup, by having the postmaster signal it when certain failures occur.  This requires the postmaster setting a flag in shared memory, but should be as safe as the pmsignal.c code is. Also make sure the launcher honor's a postgresql.conf change turning it off on SIGHUP. 	bae0b56880f5187c3e75bb8bcb4f04da6b6bbc4f
----------------------------
Add a <tip> that log_line_prefix should usually end with a space to provide visual separation from the rest of the log line; I've been noticing lately that quite a few newbies fail to figure this out for themselves.  Also a little editorial cleanup of the log_line_prefix description. 	ec0bb02db8452d4098023f82b100ba68d8f7dfab
----------------------------
Restrict deadlock_timeout to the range for which the implementation actually works sanely, viz not 0 and not more than INT_MAX/1000 (else TimestampTzPlusMilliseconds can overflow).  Per discussion with Greg Stark.  Since this is a superuser-only setting and there was not previously any big reason to change it, not worth back-patching. 	6f0072df774ab0b5af9d2b8d3123929a983da16d
----------------------------
Code review for log_lock_waits patch.  Don't try to issue log messages from within a signal handler (this might be safe given the relatively narrow code range in which the interrupt is enabled, but it seems awfully risky); do issue more informative log messages that tell what is being waited for and the exact length of the wait; minor other code cleanup.  Greg Stark and Tom Lane 	6e07228728e51bf875ecc9669f63ed648aba88c9
----------------------------
Avoid having autovacuum run multiple ANALYZE commands in a single transaction, to prevent possible deadlock problems.  Per request from Tom Lane. 	bd06ab29aef18dab1335ba822b8f079a06618712
----------------------------
Avoid integer overflow issues in autovacuum. 	a0a26c47d401797fbdd48ce54ae6d51b68d31287
----------------------------
Insert ORDER BY into a few regression test queries that now have unstable results due to syncscan patch, when shared_buffers is small enough.  Per buildfarm reports and some local testing with shared_buffers set to the lowest value considered by initdb. 	7063c46fc18e2987b655b0bc7531128633daac7e
----------------------------
Avoid passing zero as a value for vacuum_cost_limit, because it's not a valid value for the vacuum code.  Instead, make zero signify getting the value from a higher level configuration facility, just like -1 in the original coding.  We still document that -1 is the value that disables the feature, to avoid confusing the user unnecessarily. Reported by Galy Lee in <200705310914.l4V9E6JA094603@wwwmaster.postgresql.org>; per subsequent discussion. 	2b438c12cca443fe69852e9b0c678893c8686ac0
----------------------------
Rework temp_tablespaces patch so that temp tablespaces are assigned separately for each temp file, rather than once per sort or hashjoin; this allows spreading the data of a large sort or join across multiple tablespaces. (I remain dubious that this will make any difference in practice, but certain people insisted.)  Arrange to cache the results of parsing the GUC variable instead of recomputing from scratch on every demand, and push usage of the cache down to the bottommost fd.c level. 	24ee8af57378ee3b065f6a0d62aeb5a5c7313284
----------------------------
The session_replication_role actually can be changed at will during a session regardless of the existence of cached plans. The plancache only needs to be invalidated so that rules affected by the new setting will be reflected in the new query plans. Jan 	1120b99445a90ceba27f49e5cf86293f0628d06a
----------------------------
Tidy overly long configure help lines. 	3da3c04f3a7bf6b7ce1b4409cf00a0d4621b8d70
----------------------------
Create a GUC parameter temp_tablespaces that allows selection of the tablespace(s) in which to store temp tables and temporary files.  This is a list to allow spreading the load across multiple tablespaces (a random list element is chosen each time a temp object is to be created).  Temp files are not stored in per-database pgsql_tmp/ directories anymore, but per-tablespace directories. Jaime Casanova and Albert Cervera, with review by Bernd Helmle and Tom Lane. 	acfce502ba1f79ff48c9376a4c113ee06b2674b8
----------------------------
Stop a few regression tests from needlessly disabling GEQO. This was necessary in 1997, when geqo_threshold did not exist, but it is no longer needed. 	6a6c752b08ac2d4a24811123d5c565412f75f6f4
----------------------------
Applied patch send by Joachim Wieland to fix INTEGER_DATETIMES under MSVC. 	7e72d07aa470e94849e30a740637ef37b50514e6
----------------------------
Applied Joachim's patch for ecpg_config.h creation on Vista. Changed variable test to not run into infinite loops on backend errors. 	93625aa8ac8ae64721229e6544adaaa00aaeb673
----------------------------
"Teach tuplestore.c to throw away data before the ""mark"" point when the caller is using mark/restore but not rewind or backward-scan capability.  Insert a materialize plan node between a mergejoin and its inner child if the inner child is a sort that is expected to spill to disk.  The materialize shields the sort from the need to do mark/restore and thereby allows it to perform its final merge pass on-the-fly; while the materialize itself is normally cheap since it won't spill to disk unless the number of tuples with equal key values exceeds work_mem. Greg Stark, with some kibitzing from Tom Lane. "	2415ad983174164ff30ce487c0e6b4b53321b83a
----------------------------
Add URL for: * Implement the SQL standard mechanism whereby REVOKE ROLE revokes only the privilege granted by the invoking role, and not those granted by other roles > >   http://archives.postgresql.org/pgsql-bugs/2007-05/msg00010.php 	3f186a203493f96802e4429c315ea509cefa4aba
----------------------------
Add, per Alvaro: > > * Implement the SQL standard mechanism whereby REVOKE ROLE revokes only >   the privilege granted by the invoking role, and not those granted >   by other roles 	347534e85a95df76b4434fdad65c103e189eaeff
----------------------------
Avoid emitting empty role names in the GRANTED BY clause of GRANT ROLE when the grantor has been dropped.  This is a workaround for the fact that we don't track the grantor as a shared dependency. 	d365ce1f5c90278c577ffe52a80adebee9cb3c33
----------------------------
"Add a note to the documentation to clarify that even when ""autovacuum = off"", the system may still periodically start autovacuum processes to prevent XID wraparound. Patch from David Fetter, with editorializing. "	513836c7aa9346e58cc44b44b0bb79b8258c3df4
----------------------------
Use configured pgport in MSVC config file. 	42a65e39a56898f468ff8c99a19b660f8c88ff30
----------------------------
Add: > * Have configure choose integer datetimes by default > >   http://archives.postgresql.org/pgsql-patches/2007-05/msg00046.php 	9083e91339898e87820c33e2cc4b258374ce9ef7
----------------------------
During WAL recovery, when reading a page that we intend to overwrite completely from the WAL data, don't bother to physically read it; just have bufmgr.c return a zeroed-out buffer instead.  This speeds recovery significantly, and also avoids unnecessary failures when a page-to-be-overwritten has corrupt page headers on disk.  This replaces a former kluge that accomplished the latter by pretending zero_damaged_pages was always ON during WAL recovery; which was OK when the kluge was put in, but is unsafe when restoring a WAL log that was written with full_page_writes off. Heikki Linnakangas 	8c3cc86e7b688b0efe5ec6ce4f4342c2883b1db5
----------------------------
"Fix failure to check for INVALID worker entry in the new autovacuum code, which could happen when a worker took to long to start and was thus ""aborted"" by the launcher.  Noticed by lionfish buildfarm member. "	a115bfe3b97c3168f169e757dfbc3bc0a4ddf416
----------------------------
Implement rate-limiting logic on how often backends will attempt to send messages to the stats collector.  This avoids the problem that enabling stats_row_level for autovacuum has a significant overhead for short read-only transactions, as noted by Arjen van der Meijden.  We can avoid an extra gettimeofday call by piggybacking on the one done for WAL-logging xact commit or abort (although that doesn't help read-only transactions, since they don't WAL-log anything). In my proposal for this, I noted that we could change the WAL log entries for commit/abort to record full TimestampTz precision, instead of only time_t as at present.  That's not done in this patch, but will be committed separately. 	957d08c81f9cc277725c83b9381c5154b6318a5e
----------------------------
Update to 8.4: < * Make standard_conforming_strings the default in 8.3? > * Make standard_conforming_strings the default in 8.4? 	b1a1ea49da183d521c2a3db676a6ec2b9c306626
----------------------------
Remove no-longer-true statement from the docs. Since the default config now enables row-level stats, the out of the box stats volume is no longer particularly low. 	a264671116ab9ba45fb20441c16fe0783e52857b
----------------------------
"Fix dynahash.c to suppress hash bucket splits while a hash_seq_search() scan is in progress on the same hashtable.  This seems the least invasive way to fix the recently-recognized problem that a split could cause the scan to visit entries twice or (with much lower probability) miss them entirely. The only field-reported problem caused by this is the ""failed to re-find shared lock object"" PANIC in COMMIT PREPARED reported by Michel Dorochevsky, which was caused by multiply visited entries.  However, it seems certain that mdsync() is vulnerable to missing required fsync's due to missed entries, and I am fearful that RelationCacheInitializePhase2() might be at risk as well.  Because of that and the generalized hazard presented by this bug, back-patch all the supported branches. Along the way, fix pg_prepared_statement() and pg_cursor() to not assume that the hashtables they are examining will stay static between calls. This is risky regardless of the newly noted dynahash problem, because hash_seq_search() has never promised to cope with deletion of table entries other than the just-returned one.  There may be no bug here because the only supported way to call these functions is via ExecMakeTableFunctionResult() which will cycle them to completion before doing anything very interesting, but it seems best to get rid of the assumption.  This affects 8.2 and HEAD only, since those functions weren't there earlier. "	a2e923a6525f4fc9742456aabca31458530283a2
----------------------------
"Generate ""fake configure output"" for pg_config, so that external builds like Slony can figure out which options were enabled in the build. "	2d7f4f2220f1f1feebd61b07be3c2063f67fb571
----------------------------
Make configuration parameters fall back to their default values when they are removed from the configuration file. Joachim Wieland 	b7edb568bdc246e3a07de4914b58648fe38c08b1
----------------------------
Contrib module uuid-ossp for generating UUID values using the OSSP UUID library.  New configure option --with-ossp-uuid to activate. 	74496bc298e099401a8b41c1c529bf9fb7aa9f3c
----------------------------
Support explicit placement of the temporary-table schema within search_path. This is needed to allow a security-definer function to set a truly secure value of search_path.  Without it, a malicious user can use temporary objects to execute code with the privileges of the security-definer function.  Even pushing the temp schema to the back of the search path is not quite good enough, because a function or operator at the back of the path might still capture control from one nearer the front due to having a more exact datatype match.  Hence, disable searching the temp schema altogether for functions and operators. Security: CVE-2007-2138 	aa27977fe21a7dfa4da4376ad66ae37cb8f0d0b5
----------------------------
Enable configurable log of autovacuum actions.  Initial patch from Simon Riggs, additional code and docs by me.  Per discussion. 	ef23a77441b94d1e2fde3f359d2e49703c70c9ca
----------------------------
Fix condition for whether end_heap_rewrite must fsync, per Heikki. 	836feeda9ca93e977224910cb79ec826b06e6e9e
----------------------------
"Add a multi-worker capability to autovacuum.  This allows multiple worker processes to be running simultaneously.  Also, now autovacuum processes do not count towards the max_connections limit; they are counted separately from regular processes, and are limited by the new GUC variable autovacuum_max_workers. The launcher now has intelligence to launch workers on each database every autovacuum_naptime seconds, limited only on the max amount of worker slots available. Also, the global worker I/O utilization is limited by the vacuum cost-based delay feature.  Workers are ""balanced"" so that the total I/O consumption does not exceed the established limit.  This part of the patch was contributed by ITAGAKI Takahiro. Per discussion. "	e2a186b03cc1a87cf26644db18f28a20f10bd739
----------------------------
Add --with-libxslt configure option 	f97d4a267a8d8b680960dfc32bd7111eb7ed8dca
----------------------------
Enable building contrib/xml2 if configured using --with-libxml. If this breaks things due to missing libxslt, then I'll have to revert it, but let's see if it breaks the buildfarm. Workarounds in case libxslt is missing include: . don't configure with libxml, or . don't build contrib modules from the contrib Makefile (use the individual module Makefiles instead), or . change the xml2 Makefile 	6506a584cc853d2c6dcac76e75c9e1c802586afe
----------------------------
Rearrange mdsync() looping logic to avoid the problem that a sufficiently fast flow of new fsync requests can prevent mdsync() from ever completing. This was an unforeseen consequence of a patch added in Mar 2006 to prevent the fsync request queue from overflowing.  Problem identified by Heikki Linnakangas and independently by ITAGAKI Takahiro; fix based on ideas from Takahiro-san, Heikki, and Tom. Back-patch as far as 8.1 because a previous back-patch introduced the problem into 8.1 ... 	995ba280c153aec43a01bd2f2e1f8a74203e04d9
----------------------------
Cancel pending fsync requests during WAL replay of DROP DATABASE, per bug report from David Darville.  Back-patch as far as 8.1, which may or may not have the problem but it seems a safe change anyway. 	ebb6bae539e124c34674ecf0d0f387e0a873c314
----------------------------
Fix caching of unsuccessful initialization of parser or configuration. Per report from Listmail <lists@peufeu.com> 	9477f12ea8ead7d66e80c01febeeb22560bc1709
----------------------------
pg_char_to_encoding() was redundant in initdb because pg_valid_server_encoding() returns the same result if the encoding is valid. ITAGAKI Takahiro 	452427d0fdc49aeb74711eabe0c6d9554d406089
----------------------------
Make ECPG regression tests use native threading instead of pthreads, now that ecpglib supports it. Change configure (patch from Bruce) and msvc build system to no longer require pthreads on win32, since all parts of postgresql can be thread-safe using the native platform functions. 	96b171903d5d52ca46b46bc3f73f13978705eae5
----------------------------
"Add the ""recheck"" logic to autovacuum worker code.  The worker first builds its table list and then rechecks pgstat before vacuuming each table to verify that no one has vacuumed the table in the meantime. In the current autovacuum world this only means that a worker will not vacuum a table that a user has vacuumed manually after the worker started. When support for multiple autovacuum workers is introduced, this will reduce the probability of simultaneous workers on the same database doing redundant work. "	7d4c9a5793b49633be0fae7653552f3fb4a812c0
----------------------------
Cosmetic changes: rename some struct fields, and move the fetching of pgstat table entries to a separate routine.  Don't pass the pgstat database entry to do_autovacuum; rather, have it fetch it by itself. 	f1a596bdfbeea0bcd8b6ac62f7dc8c7565fcf173
----------------------------
Add: > > * Allow configuration of backend priorities via the operating system > >   Though backend priorities make priority inversion during lock >   waits possible, research shows that this is not a huge problem. >   http://archives.postgresql.org/pgsql-general/2007-02/msg00493.php 	d3afd6805167b4a3f207205bae09fd7bfb44700a
----------------------------
Properly fix PORTNAME in configure. 	357be8c974fc0039cca0c88590358205b83ad77d
----------------------------
Remove assertion that constraint_exclusion risks wrong answers if table constraints are changed; this is no longer true now that we have a plan invalidation mechanism. 	287ed68dd2a8f0be6f10f6bd373e4c9c3887b821
----------------------------
Separate fetch of pg_autovacuum tuple into its own function. 	6287eb7adc7518bfeff06c94b9ef380bb99c2bea
----------------------------
"Fix plancache so that any required replanning is done with the same search_path that was active when the plan was first made.  To do this, improve namespace.c to support a stack of ""override"" search path settings (we must have a stack since nested replan events are entirely possible). This facility replaces the ""special namespace"" hack formerly used by CREATE SCHEMA, and should be able to support per-function search path settings as well. "	547b6e537aa8bbae83a8a4c4d0d7f216390bdb9c
----------------------------
Add define to exclude configured libraries, to be able to easily build a stripped down version of libpq. To be used by the installer. 	fb8155d0d224ae54050a4e2ab04adbeccda243cb
----------------------------
"Changes pg_trigger and extend pg_rewrite in order to allow triggers and rules to be defined with different, per session controllable, behaviors for replication purposes. This will allow replication systems like Slony-I and, as has been stated on pgsql-hackers, other products to control the firing mechanism of triggers and rewrite rules without modifying the system catalog directly. The firing mechanisms are controlled by a new superuser-only GUC variable, session_replication_role, together with a change to pg_trigger.tgenabled and a new column pg_rewrite.ev_enabled. Both columns are a single char data type now (tgenabled was a bool before). The possible values in these attributes are: 'O' - Trigger/Rule fires when session_replication_role is ""origin"" (default) or ""local"". This is the default behavior. 'D' - Trigger/Rule is disabled and fires never 'A' - Trigger/Rule fires always regardless of the setting of session_replication_role 'R' - Trigger/Rule fires when session_replication_role is ""replica"" The GUC variable can only be changed as long as the system does not have any cached query plans. This will prevent changing the session role and accidentally executing stored procedures or functions that have plans cached that expand to the wrong query set due to differences in the rule firing semantics. The SQL syntax for changing a triggers/rules firing semantics is ALTER TABLE <tabname> <when> TRIGGER|RULE <name>; <when> ::= ENABLE | ENABLE ALWAYS | ENABLE REPLICA | DISABLE psql's \d command as well as pg_dump are extended in a backward compatible fashion. Jan "	0fe16500d3ae68b8928a2b94dcab434e358480d5
----------------------------
Reverted waiting for further fixes: Make configuration parameters fall back to their default values when they are removed from the configuration file. Joachim Wieland 	f4ee82e3d397544a287da65dd54846aa80694610
----------------------------
First phase of plan-invalidation project: create a plan cache management module and teach PREPARE and protocol-level prepared statements to use it. In service of this, rearrange utility-statement processing so that parse analysis does not assume table schemas can't change before execution for utility statements (necessary because we don't attempt to re-acquire locks for utility statements when reusing a stored plan).  This requires some refactoring of the ProcessUtility API, but it ends up cleaner anyway, for instance we can get rid of the QueryContext global. Still to do: fix up SPI and related code to use the plan cache; I'm tempted to try to make SQL functions use it too.  Also, there are at least some aspects of system state that we want to ensure remain the same during a replan as in the original processing; search_path certainly ought to behave that way for instance, and perhaps there are others. 	b9527e984092e838790b543b014c0c2720ea4f11
----------------------------
Make configuration parameters fall back to their default values when they are removed from the configuration file. Joachim Wieland 	f84308f1958313f6cd1644d74b6a8ff49a871f8d
----------------------------
Revert temp_tablespaces because of coding problems, per Tom. 	a535cdf130167ca6a086805b35f59a6b669b73d7
----------------------------
Add GUC log_lock_waits to log long wait times. Simon Riggs 	e52c4a6e26f2c5d37cefe42c39b6233d9c0fbe25
----------------------------
Make log_min_error_statement put LOG level at the same priority as log_min_messages does; and arrange to suppress the duplicative output that would otherwise result from log_statement and log_duration messages. Bruce Momjian and Tom Lane. 	61c3e5b2486825ee65da322e1408286a8c0d5de6
----------------------------
Add configure --enable-profiling to enable GCC profiling.  Patches from Korry Douglas and Nikhil S 	6765df9174a45f3306b1e20f8472c6eedbf24341
----------------------------
Update wording: < * Consider allowing configuration of TOAST thresholds > * Allow user configuration of TOAST thresholds 	4acc4aa871e39bec4ea234a98c60b939a994a9ae
----------------------------
Add: > * Consider allowing configuration of TOAST thresholds > >   http://archives.postgresql.org/pgsql-hackers/2007-02/msg00213.php > 	bba9ec141f15c48600d061e5c92aa570b8ac348a
----------------------------
"SSL improvements: o read global SSL configuration file o add GUC ""ssl_ciphers"" to control allowed ciphers o add libpq environment variable PGSSLKEY to control SSL hardware keys Victor B. Wagner "	c7b08050d9a2b68b27045b36ff4c9a3db85a55e4
----------------------------
"Restructure code that is responsible for ensuring that clauseless joins are considered when it is necessary to do so because of a join-order restriction (that is, an outer-join or IN-subselect construct).  The former coding was a bit ad-hoc and inconsistent, and it missed some cases, as exposed by Mario Weilguni's recent bug report.  His specific problem was that an IN could be turned into a ""clauseless"" join due to constant-propagation removing the IN's joinclause, and if the IN's subselect involved more than one relation and there was more than one such IN linking to the same upper relation, then the only valid join orders involve ""bushy"" plans but we would fail to consider the specific paths needed to get there.  (See the example case added to the join regression test.)  On examining the code I wonder if there weren't some other problem cases too; in particular it seems that GEQO was defending against a different set of corner cases than the main planner was.  There was also an efficiency problem, in that when we did realize we needed a clauseless join because of an IN, we'd consider clauseless joins against every other relation whether this was sensible or not.  It seems a better design is to use the outer-join and in-clause lists as a backup heuristic, just as the rule of joining only where there are joinclauses is a heuristic: we'll join two relations if they have a usable joinclause *or* this might be necessary to satisfy an outer-join or IN-clause join order restriction.  I refactored the code to have just one place considering this instead of three, and made sure that it covered all the cases that any of them had been considering. Backpatch as far as 8.1 (which has only the IN-clause form of the disease). By rights 8.0 and 7.4 should have the bug too, but they accidentally fail to fail, because the joininfo structure used in those releases preserves some memory of there having once been a joinclause between the inner and outer sides of an IN, and so it leads the code in the right direction anyway. I'll be conservative and not touch them. "	6bef118b01ec541440fccf8ce3641fd025297de0
----------------------------
"Restructure autovacuum in two processes: a dummy process, which runs continuously, and requests vacuum runs of ""autovacuum workers"" to postmaster. The workers do the actual vacuum work.  This allows for future improvements, like allowing multiple autovacuum jobs running in parallel. For now, the code keeps the original behavior of having a single autovac process at any time by sleeping until the previous worker has finished. "	182065093420b667a850828c3241ffe940df1aa4
----------------------------
"Add: > > 	o Use LC_TIME for localized weekday/month names, rather than > 	  LC_MESSAGES > > 	  http://archives.postgresql.org/pgsql-hackers/2006-11/msg00390.php "	01191c7177dac743d621a7ab21897114e8247ad8
----------------------------
Move fsync method macro defines into /include/access/xlogdefs.h so they can be used by src/tools/fsync/test_fsync.c. 	a9eb53969abc27f17f13c9d19eeb2621ecd57961
----------------------------
Add URL for: * Update Bonjour to work with newer cross-platform SDK >   http://archives.postgresql.org/pgsql-patches/2006-10/msg00048.php 	e4f45d29be6d7cab4160eef58b93d6f01e1ec759
----------------------------
Add URL for: * Update Bonjour to work with newer cross-platform SDK > >   http://archives.postgresql.org/pgsql-hackers/2006-09/msg02238.php > 	b9c65aed82a487c51a7d3b8bdfb731141215ba5a
----------------------------
Repair bug in 8.2's new logic for planning outer joins: we have to allow joins that overlap an outer join's min_righthand but aren't fully contained in it, to support joining within the RHS after having performed an outer join that can commute with this one.  Aside from the direct fix in make_join_rel(), fix has_join_restriction() and GEQO's desirable_join() to consider this possibility.  Per report from Ian Harding. 	c17117649b9ae23d5290c9626090dcaae333ea59
----------------------------
This patch fixes shared_preload_libraries on Windows hosts.  It forces ach backend to re-load all shared_preload_libraries. Korry Douglas 	a37b006d89b85c4b8ca92ee53580a1c3ea385be7
----------------------------
Add /contrib/pg_standby: pg_standby is a production-ready program that can be used to create a Warm Standby server. Other configuration is required as well, all of which is described in the main server manual. Simon Riggs 	51be14e9280a94d16f784c86c977afeaa2f69ad2
----------------------------
Add /contrib/pg_standby: pg_standby is a production-ready program that can be used to create a Warm Standby server. Other configuration is required as well, all of which is described in the main server manual. Simon Riggs 	528779a2c6eff87abf1a067e459ad9e1e71f54bb
----------------------------
Check if the role exists before doing more complex ident and Kerberos authentication checks in the backend. Gavin Sherry 	fe03a5f4aee4cdc0ffa226c558ee4fb39fdd63f2
----------------------------
Document that wal_sync_method open_* methods use O_DIRECT, if available. Backpatch to 8.2.X. 	d78f76896b0f71184e6b1b5d1eeb0e9f82f7585f
----------------------------
Split apart entries, one done now: * -Move NAMEDATALEN from postgres_ext.h to pg_config_manual.h * Consider making NAMEDATALEN more configurable in future releases 	869585cc8f3e14b19479eafe38c9a231e2404af5
----------------------------
Move NAMEDATALEN definition from postgres_ext.h to pg_config_manual.h. It used to be part of libpq's exported interface many releases ago, but now it's no longer necessary to make it accessible to clients. 	037f8413fa42562a8b7a075a66faa8fd88247753
----------------------------
"Change vacuum lazy ""compacting"" warning message to: errhint(""Consider using VACUUM FULL on this relation or increasing the configuration parameter \""max_fsm_pages\"".""))); "	c29a0bd52c6361c65d8d5bbe0ce80f21adac7829
----------------------------
Implement XMLSERIALIZE for real.  Analogously, make the xml to text cast observe the xmloption. Reorganize the representation of the XML option in the parse tree and the API to make it easier to manage and understand. Add regression tests for parsing back XML expressions. 	ec020e1ceb94d0ceb3c0eee8c39cd197be7bb3cb
----------------------------
Fix configure detection code when --with-ldap and --enable-thread-safety are both used. Albe Laurenz 	25dc46334b99f3161d931a608fb49f6eced42065
----------------------------
This patch changes the installscript for vcbuild to actually parse the generated solution files for what to install, instead of blindly copying everything as it previously did. With the previous quick-n-dirty version, it would copy old DLLs if you reconfigured in a way that didn't include subprojects like a PL for example. Magnus Hagander. 	b587bafef13b24feb38ab6a6a744a6274beb11ed
----------------------------
Repair insufficiently careful type checking for SQL-language functions: we should check that the function code returns the claimed result datatype every time we parse the function for execution.  Formerly, for simple scalar result types we assumed the creation-time check was sufficient, but this fails if the function selects from a table that's been redefined since then, and even more obviously fails if check_function_bodies had been OFF. This is a significant security hole: not only can one trivially crash the backend, but with appropriate misuse of pass-by-reference datatypes it is possible to read out arbitrary locations in the server process's memory, which could allow retrieving database content the user should not be able to see.  Our thanks to Jeff Trout for the initial report. Security: CVE-2007-0555 	f8eb75b6737f00dc1d9b6ca9c50b0cacc576b998
----------------------------
Update documentation for backslashes to mention escape string syntax more, and standard_conforming_strings less, because in the future non-E strings will not treat backslashes specially. Also use E'' strings where backslashes are used in examples. (The existing examples would have drawn warnings.) Backpatch to 8.2.X. 	4ed9f1d9b776677ad26cd352dbc0810d7bed6a8f
----------------------------
On Windows, use pgwin32_waitforsinglesocket() instead of select() to wait for input in the stats collector.  Our select() emulation is apparently buggy for UDP sockets :-(.  This should resolve problems with stats collection (and hence autovacuum) failing under more than minimal load.  Diagnosis and patch by Magnus Hagander. Patch probably needs to be back-ported to 8.1 and 8.0, but first let's see if it makes the buildfarm happy... 	4355d214c248c959cfbcd974b5e9ba8a6bf81074
----------------------------
Correction:  temp_tablespaces was implemented by Albert Cervera Areny, with cleanup by Jaime Casanova. 	c8bdd8ce88afa5fb98879df822fe95aff040a463
----------------------------
Add GUC temp_tablespaces to provide a default location for temporary objects. Jaime Casanova 	148ea5cbeae1681ef06e7f3ccb554b8db728b45e
----------------------------
Add --tablespaces-only and --roles-only options to pg_dumpall. Dave Page 	5ce94b28ccb1f918920e648fb58158174d004627
----------------------------
Update docs for recent change to setseed() return value. 	726f0807ad0999ee2c9cb6cec425fe83df29a7cc
----------------------------
Make setseed() return void, rather than an int4 without any use. Per pgsql-patches discussion of September 20, 2006. Bump the catversion. 	aef0f53b62eeb1ce183add7bde53d9764915e05d
----------------------------
"Add support for converting binary values (i.e. bytea) into xml values, with new GUC parameter ""xmlbinary"" that controls the output encoding, as per SQL/XML standard. "	4b48ad4fb2edf897b87d04467f8eaaaba82a258f
----------------------------
Optionally use xml2-config to detect installation locations of libxml. 	16f372d940823d08bc7271cf1057f062390efe2b
----------------------------
Extend yesterday's patch so that the bgwriter is also told to forget pending fsyncs during DROP DATABASE.  Obviously necessary in hindsight :-( 	eddbf39756fb7d58f1bdc7582af7d6462410a3e1
----------------------------
"Mark TODO item ""autovacuum on by default"" as completed. "	3026e1765ff2298ba8d734f1baa3908a1c96ba03
----------------------------
"Revise bgwriter fsync-request mechanism to improve robustness when a table is deleted.  A backend about to unlink a file now sends a ""revoke fsync"" request to the bgwriter to make it clean out pending fsync requests.  There is still a race condition where the bgwriter may try to fsync after the unlink has happened, but we can resolve that by rechecking the fsync request queue to see if a revoke request arrived meanwhile.  This eliminates the former kluge of ""just assuming"" that an ENOENT failure is okay, and lets us handle the fact that on Windows it might be EACCES too without introducing any questionable assumptions.  After an idea of mine improved by Magnus. The HEAD patch doesn't apply cleanly to 8.2, but I'll see about a back-port later.  In the meantime this could do with some testing on Windows; I've been able to force it through the code path via ENOENT, but that doesn't prove that it actually fixes the Windows problem ... "	6d660587f631d5c23d72ed791e37f62844e65372
----------------------------
Enable autovacuum in the default configuration, per discussion. 	10a5e3348eabc651fe89e93ec37bdbaefeba7a12
----------------------------
Arrange for autovacuum to be killed when another operation wants to be alone accessing it, like DROP DATABASE.  This allows the regression tests to pass with autovacuum enabled, which open the gates for finally enabling autovacuum by default. 	eb63cc3da82cec03c54a9534a6c91d287078abd1
----------------------------
Correct a minor inaccuracy in the pg_dumpall reference page: -g dumps roles and tablespaces, no longer users and groups. Per Dave Page. Backport to 8.2 and 8.1. 	02609893da8cac7689ec5173bc7d815e6f27ad2e
----------------------------
"Remove completed items, and the last is unwanted: < 		o Fix memory leak from exceptions < < 		  http://archives.postgresql.org/pgsql-performance/2006-06/msg00305.php < < * Allow constraint_exclusion to work for UNIONs like it does for <   inheritance, allow it to work for UPDATE and DELETE statements, and allow <   it to be used for all statements with little performance impact < < * Add estimated_count(*) to return an estimate of COUNT(*) < <   This would use the planner ANALYZE statistics to return an estimated <   count. <   http://archives.postgresql.org/pgsql-hackers/2005-11/msg00943.php "	62c06186f55f7968f432bfc16ea2b6a7150698a6
----------------------------
Add: > * Move NAMEDATALEN from postgres_ext.h to pg_config_manual.h and >   consider making it more configurable in future releases 	cce09d62a5ac7ddd2515f52392d116f6f468a4cb
----------------------------
Have log_temp_files be in kilobytes, remove trace call. 	0764f41306aba91dbe962e49e92c09adcc529997
----------------------------
Remove trace macro call from new log_temp_files, until it gets more research. 	d64995aa8921823b8b3459e6e4ae4593cd9a6361
----------------------------
Add GUC log_temp_files to log the use of temporary files. Bill Moran 	be8a4318815640ff57afc775f118367c9a1241a8
----------------------------
Tweak joinlist creation to avoid generating useless one-element subproblems when collapsing of JOIN trees is stopped by join_collapse_limit.  For instance a list of 11 LEFT JOINs with limit 8 now produces something like ((1 2 3 4 5 6 7 8) 9 10 11 12) instead of (((1 2 3 4 5 6 7 8) (9)) 10 11 12) The latter structure is really only required for a FULL JOIN. Noted while studying an example from Shane Ambler. 	19f9376bf48216f421849ba3edf123de5df36364
----------------------------
Remove cost_hashjoin's very ancient hack to discourage (once, entirely forbid) hash joins with the estimated-larger relation on the inside.  There are several cases where doing that makes perfect sense, and in cases where it doesn't, the regular cost computation really ought to be able to figure that out.  Make some marginal tweaks in said computation to try to get results approximating reality a bit better.  Per an example from Shane Ambler. Also, fix an oversight in the original patch to add seq_page_cost: the costs of spilling a hash join to disk should be scaled by seq_page_cost. 	9a9a143a980c3a4c9c825ce44abf57718f9f66cb
----------------------------
Remove: < * %Allow the identifier length to be increased via a configure option 	324297dfbb38639e9d5bb377d1565769add8f225
----------------------------
Add: > > * Make consistent use of long/short command options --- pg_ctl needs >   long ones, pg_config doesn't have short ones, postgres doesn't have >   enough long ones, etc. 	94609f0068946ca09e31f564d4796b868c10fee6
----------------------------
Fix erroneous implementation of -s in postmaster.c (the switch doesn't take an optarg).  Add some comments noting that code in three different files has to be kept in sync.  Fix erroneous description of -S switch (it sets work_mem not silent_mode), and do some light copy-editing elsewhere in postgres-ref. 	eeb2189112fc2136bf697f2b7d20e436acc8880b
----------------------------
"Clean up smgr.c/md.c APIs as per discussion a couple months ago.  Instead of having md.c return a success/failure boolean to smgr.c, which was just going to elog anyway, let md.c issue the elog messages itself.  This allows better error reporting, particularly in cases such as ""short read"" or ""short write"" which Peter was complaining of.  Also, remove the kluge of allowing mdread() to return zeroes from a read-beyond-EOF: this is now an error condition except when InRecovery or zero_damaged_pages = true.  (Hash indexes used to require that behavior, but no more.)  Also, enforce that mdwrite() is to be used for rewriting existing blocks while mdextend() is to be used for extending the relation EOF.  This restriction lets us get rid of the old ad-hoc defense against creating huge files by an accidental reference to a bogus block number: we'll only create new segments in mdextend() not mdwrite() or mdread().  (Again, when InRecovery we allow it anyway, since we need to allow updates of blocks that were later truncated away.) Also, clean up the original makeshift patch for bug #2737: move the responsibility for padding relation segments to full length into md.c. "	ef07221997eee08bbe6e541934a9e0d5a62e13ff
----------------------------
Add n_live_tuples and n_dead_tuples to pg_stat_all_tables. The purpose is to allow autovacuum-esq conditional vacuuming and clustering using SQL to discover the required stats. No documentation updates required.  Catalog version updated. Glen Parker 	2955f1ebf4a9cfae7e8118180811f589b4cd74ff
----------------------------
Modify local buffer management to request memory for local buffers in blocks of increasing size, instead of one at a time.  This reduces the memory management overhead when num_temp_buffers is large: in the previous coding we would actually waste 50% of the space used for temp buffers, because aset.c would round the individual requests up to 16K.  Problem noted while studying a performance issue reported by Steven Flatt. Back-patch as far as 8.1 --- older versions used few enough local buffers that the issue isn't significant for them. 	72619f81916315658711cf35bcb2d3c993960bd4
----------------------------
Document that log_line_prefix %t does not print timezone on Win32. 	0afabecbfdcbcd79c13f150daf180334f6db4b27
----------------------------
Allow augmenting CPPFLAGS from the configure command line.  This generally works, but some platform templates overwrote it without asking. 	9cf2706742313c2c68984f2b9ef300f629a6975b
----------------------------
Stamp 8.2, except configure.in. 	f8660e309d7c5934c3aea31dc113752800a7730f
----------------------------
Mark to_char(timestamp without timezone) as stable, not immutable, since its result now depends on the lc_messages setting, as noted by Bruce. Also, mark to_number() and the numeric-type variants of to_char() as stable, because their results depend on lc_numeric; this is a longstanding oversight. Also, mark to_date() and to_char(interval) as stable; although these appear not to depend on any GUC variables as of CVS HEAD, that seems a property unlikely to survive future improvements.  It seems best to mark all the formatting functions stable and be done with it. catversion not bumped, because this does not seem critical enough to force a post-RC1 initdb, and anyway we cannot do so in the back branches. 	64353640e87b54250f1b8a1d2a708d270dff4bfd
----------------------------
Also install ecpg_config.h 	09309df9a22399cfc51931304ca74632493a6fe0
----------------------------
Copy fsync() defines into test_fsync.c, someday place them in an include. Propery align for O_DIRECT. Check for write()/fsync() failures. 	0d9e0d9dde6fe2e10ad25f80e7eaee03baabf6ba
----------------------------
"Document that to_char() ""TM"" is controlled by lc_messages. "	f14d43d2d32ded7eb400d1a1daa6d50163628f7c
----------------------------
Revert (too late in beta): Fix to_char() locale handling to honor LC_TIME, not LC_MESSAGES. Euler Taveira de Oliveira 	9b15b1401482f4354dd0205c607edddb48950ad0
----------------------------
Fix to_char() locale handling to honor LC_TIME, not LC_MESSAGES. Euler Taveira de Oliveira 	d2b694d825ce13bd87d6f76be040466de34f3787
----------------------------
Revert out: Update fsync test to match new O_DIRECT behavior. Greg Smith 	1120c61b29c2804f921b4302769e73924c0e2893
----------------------------
Update fsync test to match new O_DIRECT behavior. Greg Smith 	3455b0a5d57b8139b82b3e0f1cf4f7893173995d
----------------------------
"Add ""(assuming <varname>standard_conforming_strings</> is <literal>off</>)"" clauses for bytea. "	ab79444e7b3a2ea4239df8dbb16aee31a1acc7a8
----------------------------
Get rid of retail definitions of HAVE_STRDUP and HAVE_VSNPRINTF in some of the Windows-only makefiles; the correct place to assert these things is pg_config.h.win32.  Per bug #2677. 	617f123f06691d0391664464ed85e05e5523dcbd
----------------------------
Suppress timezone (%Z) part of timestamp display when running on Windows, because on that platform strftime produces localized zone names in varying encodings.  Even though it's only in a comment, this can cause encoding errors when reloading the dump script.  Per suggestion from Andreas Seltenreich.  Also, suppress %Z on Windows in the %s escape of log_line_prefix ... not sure why this one is different from the other two, but it shouldn't be. 	5fc2d7e45148b92ea082356b425562c3cb971954
----------------------------
"On systems that have setsid(2) (which should be just about everything except Windows), arrange for each postmaster child process to be its own process group leader, and deliver signals SIGINT, SIGTERM, SIGQUIT to the whole process group not only the direct child process.  This provides saner behavior for archive and recovery scripts; in particular, it's possible to shut down a warm-standby recovery server using ""pg_ctl stop -m immediate"", since delivery of SIGQUIT to the startup subprocess will result in killing the waiting recovery_command.  Also, this makes Query Cancel and statement_timeout apply to scripts being run from backends via system().  (There is no support in the core backend for that, but it's widely done using untrusted PLs.)  Per gripe from Stephen Harris and subsequent discussion. "	3ad0728c817bf8abd2c76bd11d856967509b307c
----------------------------
If SSL negotiation fails and SSLMODE is 'prefer', then retry without SSL. Negotiation failure is only likely to happen if one side or the other is misconfigured, eg. bad client certificate.  I'm not 100% convinced that a retry is really the best thing, hence not back-patching this fix for now. Per gripe from Sergio Cinos. 	bcd713a6189188927dec7abda6cdcd6719c990d1
----------------------------
Change the default setting for log_min_error_statement to ERROR.  Per recent discussion in which majority opinion was that this is a more widely useful setting than the previous default of PANIC. 	414c7a537e6c8a7916700dd22ef78e6ffea39e2a
----------------------------
More MSVC build fixes: * New versions of OpenSSL come with proper debug versions, and use suffixed names on the LIBs for that. Adapts library handling to deal with that. * Fixes error where it incorrectly enabled Kerberos based on NLS configuration instead of Kerberos configuration * Specifies path of perl in config, instead of using current one. Required when using a 64-bit perl normally, but want to build pl/perl against 32-bit one (required) * Fix so pgevent generates win32ver.rc automatically Magnus Hagander 	aaef29b377fef5b9e9948f857fce5e2816a655c5
----------------------------
Reconfigure failover/replication doc items to be varlist entries, rather than new sections, so they appear all on the same web page. 	a1e5b5c832db3afa0a10610b219cccc84e7e0a2a
----------------------------
Minor improvements to the description of archive_timeout. 	2b5fedc0d78daa73281fb37036e04735a295cbc0
----------------------------
Fix recently-understood problems with handling of XID freezing, particularly in PITR scenarios.  We now WAL-log the replacement of old XIDs with FrozenTransactionId, so that such replacement is guaranteed to propagate to PITR slave databases.  Also, rather than relying on hint-bit updates to be preserved, pg_clog is not truncated until all instances of an XID are known to have been replaced by FrozenTransactionId.  Add new GUC variables and pg_autovacuum columns to allow management of the freezing policy, so that users can trade off the size of pg_clog against the amount of freezing work done.  Revise the already-existing code that forces autovacuum of tables approaching the wraparound point to make it more bulletproof; also, revise the autovacuum logic so that anti-wraparound vacuuming is done per-table rather than per-database.  initdb forced because of changes in pg_class, pg_database, and pg_autovacuum catalogs.  Heikki Linnakangas, Simon Riggs, and Tom Lane. 	48188e1621bb6711e7d092bee48523b18cd80177
----------------------------
Code the unknown options check without using m4 diversions.  Otherwise this code relies on the checking macro actually being called at the end, or the automatic undiversion will produce garbage.  These sort of implicit side-effects undermine the modularity of the macros and happen to break the ODBC driver which makes use of them. Also put the warnings at the very end of configure, so there is an even better chance of seeing them. 	0b9f93e6b04d941d3428d6e709ab8c4b03554f2f
----------------------------
Fix list of environment variables for configure.  Remove some variables that are almost never used.  Put documentation-related variables into the documentation chapter. 	033cb9d30b21f5503f1747f0e5c73ee017e81791
----------------------------
Clarify note about interaction of log_statement logging with errors. Remove obsolete note about logging of statements generated by plpgsql function execution ... that doesn't happen anymore. 	0549ba82e32410892ef0d644212436551974aa2b
----------------------------
Make sure that debug_query_string contains the original query text, if available (which it usually should be), during processing of Bind and Execute protocol messages.  This improves usefulness of log_min_error_statement logging for extended query protocol. 	681892208fe41459acf89ade0d91a78e55f1089a
----------------------------
Punt when trying to build with threaded Python on FreeBSD. Also cut back on excessive use of *** to decorate configure error messages. If it's an error message, you are sure to see it without any decoration. 	6ab23dabf50de05767563c4b81aeed7949c4fdec
----------------------------
Fix test_fsync compile on MinGW(win32) Hiroshi Saito 	5777dca4f86b2f79bb7051ff33d22e800596bb49
----------------------------
"In the installation docs, add some links to the documentation on LDAP to the discussion of the ""--with-ldap"" configure option. Patch from Albe Laurenz. "	7055867a01e55dd375e42430f5c6f250267727c3
----------------------------
Updated config.guess and config.sub 	a64f20883346d384b6ce6ea73f146a570637c6b2
----------------------------
On platforms that have getrlimit(RLIMIT_STACK), use it to ensure that max_stack_depth is not set to an unsafe value. This commit also provides configure-time checking for <sys/resource.h>, and cleans up some perhaps-unportable code associated with use of that include file and getrlimit(). 	71a6f8b85b9f748dc7f33c1212c4474e8beb901a
----------------------------
Adjust HINT for stack depth limit to mention checking the underlying platform limit, rather than just blindly raising max_stack_depth. Also, tweak the code to work properly if someone sets max_stack_depth to more than 2Gb, which guc.c will allow on a 64-bit machine. 	1c160291ef61f46800616cb88d5a3a02156de4e3
----------------------------
Fix bcc32.mak to create and remove pg_config_os.h properly.  Apparently win32.mak got patched for this, but not bcc32.mak. 	11d4d424d4be8cccde845dd770e99ac03ce3306a
----------------------------
Second try at fixing libedit configuration for Bob Friesenhahn. Buildfarm results from 'gazelle' show that there are indeed libedit versions for which history.h is a needed header, even though it's apparently been dropped entirely in other versions.  Grumble. 	9e6c3582dda50fe1aa639203358864ca6cb2914b
----------------------------
Adjust configure's handling of libedit to not look for a history.h file. Per Bob Friesenhahn's report, this file is not supplied by some versions of libedit, and even when it is supplied it seems to be just a link to readline.h, so we don't need to include it anyway. Also, ensure that we won't try to use a too-old version of Bison. The previous coding would bleat but then use it anyway; better to invoke the 'missing' script if any grammar files need to be rebuilt. 	bdef2bf29682ec5c8dcb7bf6083a0c0a13f676c6
----------------------------
Fix initdb's logic for picking shared_buffers/max_fsm_pages, which had gotten rather thoroughly whacked out by careless recent changes: the intended ratio between the two was off by a lot, and the minimum number of shared buffers tried had increased by a lot.  Problem exposed by failures on buildfarm members with smaller SHMMAX values. 	ff40057116edc7a88d4d57c7bee9fa67b288e2d3
----------------------------
The attached patch changes units of the some default values in postgresql.conf. - shared_buffers = 32000kB => 32MB - temp_buffers = 8000kB => 8MB - wal_buffers = 8 => 64kB The code of initdb was a bit modified to write MB-unit values. Values greater than 8000kB are rounded out to MB. GUC_UNIT_XBLOCKS is added for wal_buffers. It is like GUC_UNIT_BLOCKS, but uses XLOG_BLCKSZ instead of BLCKSZ. Also, I cleaned up the test of GUC_UNIT_* flags in preparation to add more unit flags in less bits. ITAGAKI Takahiro 	5441a6416449fc0525e62ca38938285664ae6015
----------------------------
Mention in postgresql.conf that autovacuum also needs stats_start_collector and stats_row_level to also be on David Wheeler 	e3f1607cf89ba43d5c5c4a74a8e414aeaeb15800
----------------------------
Improve documentation of configure's readline/libedit switches. 	7ceec34a7302504fd7345c5615645386bd5be716
----------------------------
Remove accented characters in comments, to avoid failures when this file is read with an incompatible client_encoding setting.  Per report from Tim N. van der Leeuw. 	363c8cf21fa99f2430289aba3fe2fe4cad364f3e
----------------------------
Add: > * Allow more complex user/database default GUC settings >   Currently, ALTER USER and ALTER DATABASE support per-user and >   per-database defaults.  Consider adding per-user-and-database >   defaults so things like search_path can be defaulted for a >   specific user connecting to a specific database. > > 	6bb9fc9feef05ea7c4e2ead39096958aba0d89e5
----------------------------
Add URL for client_encoding being set by client: >   http://archives.postgresql.org/pgsql-hackers/2006-08/msg01696.php 	d3aa4a8e33bee5e5274615cfd461aac810d7bbc1
----------------------------
Added Joachim's changes for MinGW. Added SET DATESTYLE to one test so the output format is defined. 	9897e35c5666e5384ca0dc49456b55a014b15d96
----------------------------
Increase default value of effective_cache_size to 128MB, per discussion. 	0f8fc35a5a9824d4f50edef49ce000f104ca5e74
----------------------------
Improve usage of effective_cache_size parameter by assuming that all the tables in the query compete for cache space, not just the one we are currently costing an indexscan for.  This seems more realistic, and it definitely will help in examples recently exhibited by Stefan Kaltenbrunner.  To get the total size of all the tables involved, we must tweak the handling of 'append relations' a bit --- formerly we looked up information about the child tables on-the-fly during set_append_rel_pathlist, but it needs to be done before we start doing any cost estimation, so push it into the add_base_rels_to_query scan. 	b74c5436857cfd71a0f94736f19c9b070b053e24
----------------------------
"Remove completed TODO items: < * -Make postmater and postgres options distinct so the postmaster -o <   option is no longer needed < * -Allow pooled connections to list all prepared statements < <   This would allow an application inheriting a pooled connection to know <   the statements prepared in the current session. < < * -Re-enable the GUC full_page_writes in 8.2 when reliability issues have <   been addressed < 	o -Add ""include file"" functionality in postgresql.conf < 	o -Allow per-database permissions to be set via GRANT < < 	  Allow database connection checks based on GRANT rules in < 	  addition to the existing access checks in pg_hba.conf. < < 	o -Issue a warning if a change-on-restart-only postgresql.conf value > 	o Issue a warning if a change-on-restart-only postgresql.conf value < 	  o -Automatically force archiving of partially-filled WAL files when < 	    pg_stop_backup() is called or the server is stopped < 	  o -Add reporting of the current WAL file and offset, perhaps as < 	    part of partial log file archiving < * -Allow server logs to be remotely read and removed using SQL commands < * -Allow protocol-level BIND parameter values to be logged < * -Zero umasked bits in conversion from INET cast to CIDR < * -Prevent INET cast to CIDR from dropping netmask, SELECT '1.1.1.1'::inet::cidr < * -Allow INET + INT8 to increment the host part of the address or <   throw an error on overflow < * -Add 'tid != tid ' operator for use in corruption recovery < 	o -Allow customization of the known set of TZ names (generalize the < 	  present australian_timezones hack) < 	o -Allow timezone names in SQL strings, '2006-05-24 21:11 < 	   Americas/New_York'::timestamptz < 		o -Add support for day-time syntax, INTERVAL '1 2:03:04' DAY TO < 		  SECOND < 	o -Allow NULLs in arrays < * -Add transaction_timestamp(), statement_timestamp(), clock_timestamp() <   functionality < <   Current CURRENT_TIMESTAMP returns the start time of the current <   transaction, and gettimeofday() returns the wallclock time. This will <   make time reporting more consistent and will allow reporting of <   the statement start time. < < * -Allow to_char() to print localized month names < * -Add sleep() function, remove from regress.c < * -Allow user-defined functions retuning a domain value to enforce domain <   constraints < * -Allow TRUNCATE ... CASCADE/RESTRICT < <   This is like DELETE CASCADE, but truncates. < < * -Add COMMENT ON for all cluster global objects (roles, databases <   and tablespaces) < * -Make row-wise comparisons work per SQL spec < <   Right now, '(a, b) < (1, 2)' is processed as 'a < 1 and b < 2', but <   the SQL standard requires it to be processed as a column-by-column <   comparison, so the proper comparison is '(a < 1) OR (a = 1 AND b < 2)'. < < * -Enable escape_string_warning and standard_conforming_strings > * Enable standard_conforming_strings < 	o -Add ON COMMIT capability to CREATE TABLE AS ... SELECT < 	o -Allow an alias to be provided for the target table in < 	  UPDATE/DELETE (Neil) < 	o -Allow UPDATE tab SET ROW (col, ...) = (val, ...) for updating < 	  multiple columns < 	o -Add ALTER TABLE tab INHERIT / NO INHERIT  parent < 	o -Have COPY return the number of rows loaded/unloaded? < 	o -Allow COPY (SELECT ...) TO 'filename' < < 	o -Allow pooled connections to list all open WITH HOLD cursors < < 	  Because WITH HOLD cursors exist outside transactions, this allows < 	  them to be listed so they can be closed. < < 	o -Allow INSERT INTO tab (col1, ..) VALUES (val1, ..), (val2, ..) < 	o -Allow INSERT/UPDATE ... RETURNING new.col or old.col < 		o -Allow PL/python to return composite types and result sets < < * -Have initdb set the input DateStyle (MDY or DMY) based on locale < 	o -Improve psql's handling of multi-line statements < < 	  Currently, while \e saves a single statement as one entry, interactive < 	  statements are saved one line at a time.  Ideally all statements < 	  would be saved like \e does. < < 	o -Allow multi-line column values to align in the proper columns < < 	  If the second output column value is 'a\nb', the 'b' should appear < 	  in the second display column, rather than the first column as it < 	  does now. < < 	o -Display IN, INOUT, and OUT parameters in \df < 	o -Allow pg_dump to use multiple -t and -n switches, exclusion < 	   ability, and regular expression object matching < 	o -Update pg_dump and psql to use the new COPY libpq API (Christopher) < 	o -Add a function to support Parse/DescribeStatement capability < * -Add fillfactor to control reserved free space during index creation < * -Add system view to show free space map contents < * -Allow installing to directories containing spaces < <   This is possible if proper quoting is added to the makefiles for the <   install targets.  Because PostgreSQL supports relocatable installs, it <   is already possible to install into a directory that doesn't contain <   spaces and then copy the install to a directory with spaces. < < * -%Clean up compiler warnings (especially with gcc version 4) < * -Remove BeOS and QNX-specific code < 	o -Port contrib/xml2 "	aa3f396aca648134a90a5f899d960fafa3c433a8
----------------------------
Add built-in userlock manipulation functions to replace the former contrib functionality.  Along the way, remove the USER_LOCKS configuration symbol, since it no longer makes any sense to try to compile that out. No user documentation yet ... mmoncure has promised to write some. Thanks to Abhijit Menon-Sen for creating a first draft to work from. 	9b4cda0df674e0c7b70aa61d768471a97205113f
----------------------------
Add item: > > * Set client encoding based on the client operating system encoding > >   Currently client_encoding is set in postgresql.conf, which >   defaults to the server encoding. 	e8efd983126604ac25e968608ef099fcf904692d
----------------------------
Change ANALYZE to take ShareUpdateExclusiveLock not AccessShareLock on the table being analyzed.  This prevents two ANALYZEs from running concurrently on the same table and possibly suffering concurrent-update failures while trying to store their results into pg_statistic.  The downside is that a database-wide ANALYZE executed within a transaction block will hold ShareUpdateExclusiveLock on many tables simultaneously, which could lead to concurrency issues or even deadlock against another such ANALYZE.  However, this seems a corner case of less importance than getting unexpected errors from a foreground ANALYZE when autovacuum elects to analyze the same table concurrently.  Per discussion. 	da7540b9d17c09c3b2e49a7580e5f42dcc4a4bcd
----------------------------
Revise OpenLDAP configuration and linking to work on more platforms than before.  Albe Laurenz (but editorialized heavily by me, so if it doesn't work it's my fault). 	42c17a6bb07f7400a14dffce687f14cc748fa064
----------------------------
Tweak the behavior of log_duration as proposed by Guillaume Smet: rather than being equivalent to setting log_min_duration_statement to zero, this option now forces logging of all query durations, but doesn't force logging of query text.  Also, add duration logging coverage for fastpath function calls. 	b59d31c21571995ca717c29eabd4022f35c35169
----------------------------
Clean up logging for extended-query-protocol operations, as per my recent proposal.  Parameter logging works even for binary-format parameters, and logging overhead is avoided when disabled. log_statement = all output for the src/test/examples/testlibpq3.c example now looks like LOG:  statement: execute <unnamed>: SELECT * FROM test1 WHERE t = $1 DETAIL:  parameters: $1 = 'joe''s place' LOG:  statement: execute <unnamed>: SELECT * FROM test1 WHERE i = $1::int4 DETAIL:  parameters: $1 = '2' and log_min_duration_statement = 0 results in LOG:  duration: 2.431 ms  parse <unnamed>: SELECT * FROM test1 WHERE t = $1 LOG:  duration: 2.335 ms  bind <unnamed> to <unnamed>: SELECT * FROM test1 WHERE t = $1 DETAIL:  parameters: $1 = 'joe''s place' LOG:  duration: 0.394 ms  execute <unnamed>: SELECT * FROM test1 WHERE t = $1 DETAIL:  parameters: $1 = 'joe''s place' LOG:  duration: 1.251 ms  parse <unnamed>: SELECT * FROM test1 WHERE i = $1::int4 LOG:  duration: 0.566 ms  bind <unnamed> to <unnamed>: SELECT * FROM test1 WHERE i = $1::int4 DETAIL:  parameters: $1 = '2' LOG:  duration: 0.173 ms  execute <unnamed>: SELECT * FROM test1 WHERE i = $1::int4 DETAIL:  parameters: $1 = '2' (This example demonstrates the folly of ignoring parse/bind steps for duration logging purposes, BTW.) Along the way, create a less ad-hoc mechanism for determining which commands are logged by log_statement = mod and log_statement = ddl.  The former coding was actually missing quite a few things that look like ddl to me, and it did not handle EXECUTE or extended query protocol correctly at all. This commit does not do anything about the question of whether log_duration should be removed or made less redundant with log_min_duration_statement. 	893632be4e17ccd791cfda17d2e99bb2312f6ff8
----------------------------
Update setseed() documentation. 	7d03215f314039a400560cd459587ee99a5df73b
----------------------------
Fix non-improvement of description of archive_timeout.  archive_command is only invoked on completed WAL segments, period --- there's no 'by default' about it. 	7781916ab5b43d05b83aa2a7a65702dc54e0b796
----------------------------
Make autovacuum behavior more agressive, per discussion on hackers list --- was part of autovacuum default 'on' patch that was reverted, but we want this part. Peter Eisentraut 	e0938c3f5b03e48bca32fe903f057e5777d43df8
----------------------------
Update postgresql.conf line for default superuser_reserved_connections. 	946abc7c6875b64514f8528b590e97c35a99dee9
----------------------------
"Change ""superuser_reserved_connections"" default to 3, because of possible autovacuum use. "	1a84952670996340b61be88e2a21fe569ba72a26
----------------------------
"Add URL for autovacuum default: > > 	  http://archives.postgresql.org/pgsql-hackers/2006-08/msg01852.php "	1f57aac0246de16578615156ef9d7bc32b610241
----------------------------
Wording improvements for archive_timeout. 	4b636e35a51432743caf6a0c5250f312df95e3e3
----------------------------
"Remove GUC_REPORT for new ""server_version_num"" GUC variable.  Added overhead for every connection, per Tom. "	e35ea516a4d73f8fda85e90b8805464c11a5301f
----------------------------
"Add new variable ""server_version_num"", which is almost the same as ""server_version"" but uses the handy PG_VERSION_NUM which allows apps to do things like if ($version >= 80200) without having to parse apart the value of server_version themselves. Greg Sabino Mullane greg@turnstep.com "	04912899e792094ed00766b99b6c604cadf9edf7
----------------------------
"Add autovacuum item: > 	o Turn on by default "	5f6f70a04f875828f12ac27320ac8abb46051552
----------------------------
Revert change to turn autovacuum on by default. 	ba9f9bf1b103d72196d76646c6fcc71abbdd51f5
----------------------------
Turn autovacuum on by default.  (stats_row_level is also on by default.) Threshold and scale factor are cut in half for more aggressive behavior. 	88b811044322845aabe8362d7f442a04b1c4dbc7
----------------------------
Need more defines in ecpg_config.h, patch sent by Rocco Altier <RoccoA@Routescape.com> 	b7d5a88dbba79bc09d58f547b7a4518fd23537d2
----------------------------
Replaced double-quote-fix with a hopefully better version. Use initializer string length as size for character strings. Added ecpg_config.h file that is created via configure. 	9bade3ff84f4538472fc5e2448969e94a873ee45
----------------------------
"Add hint for ""invalid byte sequence for encoding"" error message, suggesting review of client_encoding. "	e11cab650c45f40b6f8a6b1874d149ca69b6cdc6
----------------------------
Implement archive_timeout feature to force xlog file switches to occur no more than N seconds apart.  This allows a simple, if not very high performance, means of guaranteeing that a PITR archive is no more than N seconds behind real time.  Also make pg_current_xlog_location return the WAL Write pointer, add pg_current_xlog_insert_location to return the Insert pointer, and fix pg_xlogfile_name_offset to return its results as a two-element record instead of a smashed-together string, as per recent discussion. Simon Riggs 	e8ea9e9587f096fdfbd4e451e2e88afee9009902
----------------------------
Produce a clean failure in configure when dtrace is selected but cannot be found.  Besides stopping those early who have no dtrace installed whatsoever, this will also alert those who have dtrace in /usr/sbin, which might not be in the path, which would produce confusing failures much later in the build process. Add documentation about pointing configure to find dtrace. 	bb764e94ce98c01924879288bd14e76e7c913128
----------------------------
"Add server support for ""plugin"" libraries that can be used for add-on tasks such as debugging and performance measurement.  This consists of two features: a table of ""rendezvous variables"" that allows separately-loaded shared libraries to communicate, and a new GUC setting ""local_preload_libraries"" that allows libraries to be loaded into specific sessions without explicit cooperation from the client application.  To make local_preload_libraries as flexible as possible, we do not restrict its use to superusers; instead, it is restricted to load only libraries stored in $libdir/plugins/.  The existing LOAD command has also been modified to allow non-superusers to LOAD libraries stored in this directory. This patch also renames the existing GUC variable preload_libraries to shared_preload_libraries (after a suggestion by Simon Riggs) and does some code refactoring in dfmgr.c to improve clarity. Korry Douglas, with a little help from Tom Lane. "	abc3120e9b2055f0934f60ad3e3040db548df8d3
----------------------------
Extend 'guc' regression test to check manipulations of datestyle as well as vacuum_cost_delay.  Since datestyle is a string variable, this exercises memory allocation issues that might not appear when modifying an integer GUC variable.  Also, we can observe the side effects of changing datestyle to check that assign hooks are called at the right times. 	a1dad99c63c0e68937c2c51cdf98a1076b189ef5
----------------------------
Refactor GUC set_config_option function: The main reason for refactoring was that set_config_option() was too overloaded function and its behavior did not consistent. Old version of set_config_function hides some messages. For example if you type: tcp_port = 5432.1 then old implementation ignore this error without any message to log file in the signal context (configuration reload). Main problem was that semantic analysis of postgresql.conf is not perform in the ProcessConfigFile function, but in the set_config_options *after* context check. This skipped check for variables with PG_POSTMASTER context. There was request from Joachim Wieland to add more messages about ignored changes in the config file as well. Zdenek Kotala 	f91ddb768b9d29bec1b7c2e039a5d2e55a25dd2c
----------------------------
Fix statement_timeout on Win32 so that it properly treats micro-seconds as micro-seconds, rather than as 100 microseconds, as it does now.  This actually fixes all setitimer calls on Win32, but statement_timeout is the most visible fix. Backpatch to 8.1.X.  8.0 works as documented. 	8f73c88c7cc048fb2873109e8d8ff813759102c4
----------------------------
Fix win32.mak for config cleanup. Hiroshi Saito 	9d5d87a5db1a36e6c87ea46a6175c44d056cb429
----------------------------
For protocol-level prepare/bind/execute: o  print user name for all o  print portal name if defined for all o  print query for all o  reduce log_statement header to single keyword o  print bind parameters as DETAIL if text mode 	3716f90c39150ccc97d4ebd8615fcb6141663b8e
----------------------------
Extend relation_excluded_by_constraints() to check for mutually contradictory WHERE-clauses applied to a relation.  This makes the GUC variable constraint_exclusion rather inappropriately named, but I've refrained for the moment from renaming it. Per example from Martin Lesser. 	5f789c5ead32d6a6ee1a59ef66cf71b46d6d1f3f
----------------------------
Fix documentation error: GRANT/REVOKE for roles only accept role names as grantees, not PUBLIC ... and you can't say GROUP either.  Noted by Brian Hurt. 	9649b182a1548ea6fbbdb0ebab4e9e5e2bfe815b
----------------------------
Add: > * Consider compressed annealing to search for query plans > >   This might replace GEQO, http://sixdemonbag.org/Djinni. 	ffb62be07ad763dad34d683ec595e7c800a54baf
----------------------------
Adjust initialization sequence for timezone_abbreviations so that it's handled just about like timezone; in particular, don't try to read anything during InitializeGUCOptions.  Should solve current startup failure on Windows, and avoid wasted cycles if a nondefault setting is specified in postgresql.conf too.  Possibly we need to think about a more general solution for handling 'expensive to set' GUC options. 	033a477e9e268ee75a30cd825281448d9b10b53d
----------------------------
Allow units to be specified with configuration settings. 	b517e653489f733893d61e7a84c118325394471c
----------------------------
Convert effective_cache_size to an integer, for better integration with upcoming units feature. 	79bc99a46703dc07636f4c9f09067f87b324c6b4
----------------------------
Add missing @OVERRIDE to 'India' config file, per Michael Fuhr. Add $PostgreSQL$ lines for CVS identity, too. 	bd112776cdacbe60f7e09fdbcba5061b90618e5e
----------------------------
Remove hard-wired lists of timezone abbreviations in favor of providing configuration files that can be altered by a DBA.  The australian_timezones GUC setting disappears, replaced by a timezone_abbreviations setting (set this to 'Australia' to get the effect of australian_timezones).  The list of zone names defined by default has undergone a bit of cleanup, too.  Documentation still needs some work --- in particular, should we fix Table B-4, or just get rid of it?  Joachim Wieland, with some editorializing by moi. 	d8b5c95ca8a2ce7cd4062d4a12710ca977bac87c
----------------------------
Make pg_config location overridable for pgxs builds. 	679de5e57356d24d54493f1acbd3d6c7430ba2aa
----------------------------
Make pg_regress.c get paths from pg_config_paths.h, instead of -D switches passed from the Makefile.  This looks like it will fix problem with virtual vs real paths under msys. 	5652ea703b20d92837d735f2253570eb96f2be91
----------------------------
Update WIN32 quoting roles documentation. 	87c3129e2e07ea649942e54de602bca6e5e259e8
----------------------------
Make pg_regress a tad simpler and more general-purpose by removing its code to forcibly drop regressuser[1-4] and regressgroup[1-2].  Instead, let the privileges.sql test do that for itself (this is made easy by the recent addition of DROP ROLE IF EXISTS).  Per a recent patch proposed by Joachim Wieland --- the rest of his patch is superseded by the rewrite into C, but this is a good idea we should adopt. 	84e60427259bed6357a6d4559eabeaae11e29a9f
----------------------------
GIN improvements - Replace sorted array of entries in maintenance_work_mem to binary tree, this should improve create performance. - More precisely calculate allocated memory, eliminate leaks with user-defined extractValue() - Improve wordings in tsearch2 	234163649e4eb7eb348e2a00192fec4a30cf0e33
----------------------------
Remove no-longer-needed configure test for krb5_encrypt(), per Jim Gates. 	c469aed1cb4b745bdebd2fed7b87db64bb5310d7
----------------------------
Improve vacuum code to track minimum Xids per table instead of per database. To this end, add a couple of columns to pg_class, relminxid and relvacuumxid, based on which we calculate the pg_database columns after each vacuum. We now force all databases to be vacuumed, even template ones.  A backend noticing too old a database (meaning pg_database.datminxid is in danger of falling behind Xid wraparound) will signal the postmaster, which in turn will start an autovacuum iteration to process the offending database.  In principle this is only there to cope with frozen (non-connectable) databases without forcing users to set them to connectable, but it could force regular user database to go through a database-wide vacuum at any time.  Maybe we should warn users about this somehow.  Of course the real solution will be to use autovacuum all the time ;-) There are some additional improvements we could have in this area: for example the vacuum code could be smarter about not updating pg_database for each table when called by autovacuum, and do it only once the whole autovacuum iteration is done. I updated the system catalogs documentation, but I didn't modify the maintenance section.  Also having some regression tests for this would be nice but it's not really a very straightforward thing to do. Catalog version bumped due to system catalog changes. 	d4cef0aa2a55fafbd9ce2783c1eb9e0157c6781e
----------------------------
Add GUC update_process_title to control whether 'ps' display is updated for every command, default to on. 	370a709c75becffba230a3fa14747a134b7d55b4
----------------------------
Add comment about the use of pg_config_paths.h. 	ecae3a96894eee409858e97ba31ab76b18de6a23
----------------------------
Increase timeout in statement_timeout test from 1 second to 2 seconds. We have once or twice seen failures suggesting that control didn't get to the exception block before the timeout elapsed, which is unlikely but not impossible in a parallel regression test (with a dozen other backends competing for cycles).  This change doesn't completely prevent the problem of course, but it should reduce the probability enough that we don't see it anymore.  Per buildfarm results. 	f1e671a0b4859341888448e78d4eb36f5b734bbb
----------------------------
"Remove, already in back branches: < < 	o Add new version of PQescapeString() that doesn't double backslashes < 	  that are part of a client-only multibyte sequence < < 	  Single-quote is not a valid byte in any supported client-only < 	  encoding.  This requires using mblen() to determine if the < 	  backslash is inside or outside a multi-byte sequence. < < 	o Add new version of PQescapeString() that doesn't double < 	  backslashes when standard_conforming_strings is true and < 	  non-E strings are used "	ca3d2c31f9bea6a6a16a7bcd592e094f5129d973
----------------------------
Make the planner estimate costs for nestloop inner indexscans on the basis that the Mackert-Lohmann formula applies across all the repetitions of the nestloop, not just each scan independently.  We use the M-L formula to estimate the number of pages fetched from the index as well as from the table; that isn't what it was designed for, but it seems reasonably applicable anyway.  This makes large numbers of repetitions look much cheaper than before, which accords with many reports we've received of overestimation of the cost of a nestloop.  Also, change the index access cost model to charge random_page_cost per index leaf page touched, while explicitly not counting anything for access to metapage or upper tree pages.  This may all need tweaking after we get some field experience, but in simple tests it seems to be giving saner results than before.  The main thing is to get the infrastructure in place to let cost_index() and amcostestimate functions take repeated scans into account at all.  Per my recent proposal. Note: this patch changes pg_proc.h, but I did not force initdb because the changes are basically cosmetic --- the system does not look into pg_proc to decide how to call an index amcostestimate function, and there's no way to call such a function from SQL at all. 	8a30cc212745681e5328c030f8fc5d210d733b92
----------------------------
While making the seq_page_cost changes, I was struck by the fact that cost_nonsequential_access() is really totally inappropriate for its only remaining use, namely estimating I/O costs in cost_sort().  The routine was designed on the assumption that disk caching might eliminate the need for some re-reads on a random basis, but there's nothing very random in that sense about sort's access pattern --- it'll always be picking up the oldest outputs.  If we had a good fix on the effective cache size we might consider charging zero for I/O unless the sort temp file size exceeds it, but that's probably putting much too much faith in the parameter.  Instead just drop the logic in favor of a fixed compromise between seq_page_cost and random_page_cost per page of sort I/O. 	7868590c61fff0def9e46a59cad0890ecbecfe7f
----------------------------
Increase the default value of cpu_index_tuple_cost from 0.001 to 0.005. This shouldn't affect simple indexscans much, while for bitmap scans that are touching a lot of index rows, this seems to bring the estimates more in line with reality.  Per recent discussion. 	e4de635a2ba10dcc6fdb972f87fb25953d8d3001
----------------------------
Add a GUC parameter seq_page_cost, and use that everywhere we formerly assumed that a sequential page fetch has cost 1.0.  This patch doesn't in itself change the system's behavior at all, but it opens the door to people adopting other units of measurement for EXPLAIN costs.  Also, if we ever decide it's worth inventing per-tablespace access cost settings, this change provides a workable intellectual framework for that. 	eed6c9ed7e243948e440ed1388591b7fa28f5827
----------------------------
Don't choke during startup if the environment offers an invalid value for LC_MESSAGES; instead, just press forward, leaving the effective setting at 'C'.  There is not any very good reason to complain when we are going to replace the value soon with whatever postgresql.conf says.  This change should solve the occasionally-reported problem of initdb failing with 'failed to initialize lc_messages'; the current theory is that that is a reflection of either wrong LANG/LC_MESSAGES or completely broken locale support. 	f2de12e50eb2816c07828bc205ce6601d0bf9d24
----------------------------
Add more strict check of stop and non-recognized words, allow only recognized words in thezaurus configuration file. 	c7faf451608a08e1aa65951bb02fac7f524f1d7c
----------------------------
Fix up hack to suppress escape_string_warning so that it actually works and there's only one place that's a kluge, ie, appendStringLiteralConn. Note that pg_dump itself doesn't use appendStringLiteralConn, so its behavior is not affected; only the other utility programs care. 	6178762fcf02f5f07099ff2277f8cdd82151cd0e
----------------------------
Escape processing patch: o  turns off escape_string_warning in pg_dumpall.c o  optionally use E'' for \password (undocumented option?) o  honor standard_conforming-strings for \copy (but not support literal E'' strings) o  optionally use E'' for \d commands o  turn off escape_string_warning for createdb, createuser, droplang 	eaca1175e98e937d6b2a9204a53a464fa00d1d56
----------------------------
Add pgmagic header block to store compile-time constants: It now only checks four things: Major version number (7.4 or 8.1 for example) NAMEDATALEN FUNC_MAX_ARGS INDEX_MAX_KEYS The three constants were chosen because: 1. We document them in the config page in the docs 2. We mark them as changable in pg_config_manual.h 3. Changing any of these will break some of the more popular modules: FUNC_MAX_ARGS changes fmgr interface, every module uses this NAMEDATALEN changes syscache interface, every PL as well as tsearch uses this INDEX_MAX_KEYS breaks tsearch and anything using GiST. Martijn van Oosterhout 	01b2168c90f121b5be7da72786c051588c43c128
----------------------------
Emit warnings for unknown configure options. Martijn van Oosterhout 	382808612cb15bd90b53b665602c85bcdd3ab9e6
----------------------------
Fix up pg_dump to do string escaping fully correctly for client encoding and standard_conforming_strings; likewise for the other client programs that need it.  As per previous discussion, a pg_dump dump now conforms to the standard_conforming_strings setting of the source database. We don't use E'' syntax in the dump, thereby improving portability of the SQL.  I added a SET escape_strings_warning = off command to keep the dumps from getting a lot of back-chatter from that. 	134b463f027d1113df6f983c3348f165b1ac1ffa
----------------------------
Revert ill-considered change to plpgsql: it should not rely on the current setting of standard_conforming_strings to decide how to quote strings that will be used later.  There is much more to do here but this particular change breaks the build on Windows, so fix it now. 	4627a8f41975886ddfe4e482d1453cec797415bb
----------------------------
Use E'' strings internally only when standard_conforming_strings = 'off'. This allows pg_dump output with standard_conforming_strings = 'on' to generate proper strings that can be loaded into other databases without the backslash doubling we typically do.  I have added the dumping of the standard_conforming_strings value to pg_dump. I also added standard backslash handling for plpgsql. 	7a846ecc00b13a81adbf78b66dcf927077a802f8
----------------------------
Rename in release notes: Mac -> OS/X, Intel to x86: Fix for OS/X Bonjour on x86 systems (Ashley Clark) 	a2b6c896e53a435e5677934a27f7fc40b8234549
----------------------------
Avoid duplicate definition of LOCALEDIR in pg_config.h, already defined in port/pg_config_paths.h. 	5d9062f939784167027b8b3cb75f098750987cfe
----------------------------
Fix errors in fortuna PRNG reseeding logic that could cause a predictable session key to be selected by pgp_sym_encrypt() in some cases.  This only affects non-OpenSSL-using builds.  Marko Kreen 	5cf07901c5118a55c9d8e1c704283cfc744bb68b
----------------------------
Modify libpq's string-escaping routines to be aware of encoding considerations and standard_conforming_strings.  The encoding changes are needed for proper escaping in multibyte encodings, as per the SQL-injection vulnerabilities noted in CVE-2006-2313 and CVE-2006-2314.  Concurrent fixes are being applied to the server to ensure that it rejects queries that may have been corrupted by attempted SQL injection, but this merely guarantees that unpatched clients will fail rather than allow injection.  An actual fix requires changing the client-side code.  While at it we have also fixed these routines to understand about standard_conforming_strings, so that the upcoming changeover to SQL-spec string syntax can be somewhat transparent to client code. Since the existing API of PQescapeString and PQescapeBytea provides no way to inform them which settings are in use, these functions are now deprecated in favor of new functions PQescapeStringConn and PQescapeByteaConn.  The new functions take the PGconn to which the string will be sent as an additional parameter, and look inside the connection structure to determine what to do. So as to provide some functionality for clients using the old functions, libpq stores the latest encoding and standard_conforming_strings values received from the backend in static variables, and the old functions consult these variables.  This will work reliably in clients using only one Postgres connection at a time, or even multiple connections if they all use the same encoding and string syntax settings; which should cover many practical scenarios. Clients that use homebrew escaping methods, such as PHP's addslashes() function or even hardwired regexp substitution, will require extra effort to fix :-(.  It is strongly recommended that such code be replaced by use of PQescapeStringConn/PQescapeByteaConn if at all feasible. 	515112f9d4874aaedd0c093f41c0ba3e0bf7f660
----------------------------
"Add a new GUC parameter backslash_quote, which determines whether the SQL parser will allow ""\'"" to be used to represent a literal quote mark.  The ""\'"" representation has been deprecated for some time in favor of the SQL-standard representation ""''"" (two single quote marks), but it has been used often enough that just disallowing it immediately won't do.  Hence backslash_quote allows the settings ""on"", ""off"", and ""safe_encoding"", the last meaning to allow ""\'"" only if client_encoding is a valid server encoding.  That is now the default, and the reason is that in encodings such as SJIS that allow 0x5c (ASCII backslash) to be the last byte of a multibyte character, accepting ""\'"" allows SQL-injection attacks as per CVE-2006-2314 (further details will be published after release).  The ""on"" setting is available for backward compatibility, but it must not be used with clients that are exposed to untrusted input. Thanks to Akio Ishida and Yasuo Ohgaki for identifying this security issue. "	b3eb4ea5d8c35ba9ec890b0f51d04c0b62d53a03
----------------------------
Add last-vacuum/analyze-time columns to the stats collector, both manual and issued by autovacuum.  Add accessor functions to them, and use those in the pg_stat_*_tables system views. Catalog version bumped due to changes in the pgstat views and the pgstat file. Patch from Larry Rosenman, minor improvements by me. 	1f219cf433e792d61040246c24b136b0e6a2c930
----------------------------
Have autovacuum report its activities to the stat collector. 	49b3462abb2cd5ff0866e28a4c3de49bfb423902
----------------------------
Mention packager bumps configure.in/configure. 	7d866ffad703ebf50b4e8ec55ed54d1892ab89b3
----------------------------
Stamp 8.1.4, except configure/configure.in. 	411a64ba73ff920aa8fcc242030fd2fd8aafd35f
----------------------------
Code review for standard_conforming_strings patch.  Fix it so it does not throw warnings for 100%-SQL-standard constructs, clean up some minor infelicities, try to un-break ecpg to the best of my ability.  (It's not clear how ecpg is going to find out the setting of standard_conforming_strings, though.)  I think pg_dump still needs work, too. 	637028afe17b9616d279d13d9fc5d6df1ecf369b
----------------------------
Rearrange some configure.in comments for better readability. Commit configure and pg_config.h.in, missed in last configure.in update. 	f0df09678531530835deceb6df652d23549bfc4e
----------------------------
Add to item log_min_error_messages item: >   Another idea is to allow separate configuration files for each module, >   or allow arbitrary SET commands to be passed to them. 	87f00a4694e3b0a0f4619f79f88e065fae970d5e
----------------------------
Remove equals sign from environment variable with not defaults for configure. 	ff49a020caef4100719807ae641ed29b85968a93
----------------------------
Make configure environment variable options without defaults not have an equals sign. 	1bd8f4f54fbddd4e6f193e63946b9c2b7fbb77d8
----------------------------
Add documentation about configure environment variabbles used. David Wheeler 	67248f72906a15e13abd996de6e6c2b954b41cdd
----------------------------
"Call SET varaiables ""configuration_parameter""s in the documentation. "	706cbfd632ff3eb106821996824e695ffda17c95
----------------------------
"Change ""parameter"" to ""varname"" in the alter role and alter user documentation sections.  Also update SET/RESET to be consistent. Nicolas Barbier "	e72fd16fa88f04fbb5c4dcf1f9523a5a8a8ba6a1
----------------------------
Add statement_timestamp(), clock_timestamp(), and transaction_timestamp() (just like now()). Also update statement_timeout() to mention it is statement arrival time that is measured. Catalog version updated. 	e6004f01518bb7c9c2c1fdf7e5fa4fa4a3e572f3
----------------------------
Add: < * -Eventually enable escape_string_warning and standard_conforming_strings > * -Enable escape_string_warning and standard_conforming_strings > * Make standard_conforming_strings the default in 8.3? > >   When this is done, backslash-quote should be prohibited in non-E'' >   strings because of possible confusion over how such strings treat >   backslashes.  Basically, '' is always safe for a literal single >   quote, while \' might or might not be based on the backslash >   handling rules. > 	109d0aeb115dfb00c2e5ebe468a54cfc8f0f56e9
----------------------------
"Add: > > 	o Add new version of PQescapeString() that doesn't double backslashes > 	  that are part of a client-only multibyte sequence > > 	  Single-quote is not a valid byte in any supported client-only > 	  encoding. > > 	o Add new version of PQescapeString() that doesn't double > 	  backslashes when standard_conforming_strings is true and > 	  non-E strings are used "	ce8c6aa76c4804ade36ead5c2f5d008117b9267d
----------------------------
"Mention ""syntax"" error as not logged by log_statement. Backpatch. "	f57b2f09a81e0ee51d59fda7bf72e44efdb69be9
----------------------------
"Document that errors are not output by log_statement (was they were in 8.0), and add as suggestion to use log_min_error_statement for this purpose.  I also fixed the code so the first EXECUTE has it's prepare, rather than the last which is what was in the current code.  Also remove ""protocol"" prefix for SQL EXECUTE output because it is not accurate. Backpatch to 8.1.X. "	5bd59b9c0afd81e5ec636b7b475ef55ad16b12fb
----------------------------
Fix the torn-page hazard for PITR base backups by forcing full page writes to occur between pg_start_backup() and pg_stop_backup(), even if the GUC setting full_page_writes is OFF.  Per discussion, doing this in combination with the already-existing checkpoint during pg_start_backup() should ensure safety against partial page updates being included in the backup.  We do not have to force full page writes to occur during normal PITR operation, as I had first feared. 	0a8739495664d02af82a08960cfd17fad2cb9508
----------------------------
Done: > * -Re-enable the GUC full_page_writes in 8.2 when reliability issues have 	ebd5257d493ac8a6f20eea667409cf9b06ac3202
----------------------------
Make the world safe for full_page_writes.  Allow XLOG records that try to update no-longer-existing pages to fall through as no-ops, but make a note of each page number referenced by such records.  If we don't see a later XLOG entry dropping the table or truncating away the page, complain at the end of XLOG replay.  Since this fixes the known failure mode for full_page_writes = off, revert my previous band-aid patch that disabled that GUC variable. 	defe93463c69f8e0bb717294a34d67c34ac0b03f
----------------------------
Fix an ancient oversight in btree xlog replay.  When trying to determine if an upper-level insertion completes a previously-seen split, we cannot simply grab the downlink block number out of the buffer, because the buffer could contain a later state of the page --- or perhaps the page doesn't even exist at all any more, due to relation truncation.  These possibilities have been masked up to now because the use of full_page_writes effectively ensured that no xlog replay routine ever actually saw a page state newer than its own change. Since we're deprecating full_page_writes in 8.1.*, there's no need to fix this in existing release branches, but we need a fix in HEAD if we want to have any hope of re-allowing full_page_writes.  Accordingly, adjust the contents of btree WAL records so that we can always get the downlink block number from the WAL record rather than having to depend on buffer contents.  Per report from Kevin Grittner and Peter Brant. Improve a few comments in related code while at it. 	49a7610c36ee158301f858ab127a9195da549fbf
----------------------------
Add: * Re-enable the GUC full_page_writes in 8.2 when reliability issues have been addressed 	857b0cd1276e987b62f4edc16e75efb6e7f1802d
----------------------------
Add: > * Allow log_min_messages to be specified on a per-module basis > >   This would allow administrators to see more detailed information from >   specific sections of the backend, e.g. checkpoints, autovacuum, etc. 	e7101b6b822a3f82b0d344c2be61103ac3f99f29
----------------------------
Revert getaddrinfo configure changes until we get a solution that is properly tested on Tru64 - pre recent discussion (or lack thereof) on -hackers. 	39ec43a27130a971954425b8037b2e889d288540
----------------------------
Add a field to the first page of each WAL file to indicate the XLOG_BLCKSZ.  This ought to help in preventing configuration mismatch problems if anyone tries to ship PITR files between servers compiled with different XLOG_BLCKSZ settings.  Simon Riggs 	09b5271ebdfe0e2acb03f96edca39dda2ff42362
----------------------------
Define a separately configurable XLOG_BLCKSZ symbol for the page size used within WAL files.  Historically this was the same as the data file BLCKSZ, but there's no necessary connection, and it's possible that performance gains might ensue from reducing XLOG_BLCKSZ.  In any case distinguishing two symbols should improve code clarity.  This commit does not actually change the page size, only provide the infrastructure to make it possible to do so.  initdb forced because of addition of a field to pg_control. Mark Wong, with some help from Simon Riggs and Tom Lane. 	eaef111396ef7e70c88979c7a82f6a8f918d9651
----------------------------
Disable full_page_writes, because turning it off risks causing crash-recovery failures even when the hardware and OS did nothing wrong.  Per recent analysis of a problem report from Alex Bahdushka. For the moment I've just diked out the test of the parameter, rather than removing the GUC infrastructure and documentation, in case we conclude that there's something salvageable there.  There seems no chance of it being resurrected in the 8.1 branch though. 	0a971e2f2059a23ad6f03ef23a0f48f3d2b2146b
----------------------------
Recent changes in memory management in tuplesort.c had a problem: the case where we run low on array slots before we run low on memory is much more probable than I had thought, and so it's important to treat each tape fairly in that case.  To fix this, track per-tape slot allocations just like we track per-tape space allocation.  Also, in the FINALMERGE code path avoid scanning all the input tapes when we really only need to read from one.  This should fix poor behavior with very large work_mem as exhibited by Stefan Kaltenbrunner. I didn't do anything about putting an upper bound on the number of tapes, but maybe we should still consider that. 	c65ab0bfa97b71bceae6402498910f4074996279
----------------------------
Tweak trace_sort code to show the merge order (number of active input tapes) for each merge step.  This will give us some idea of how effective the merge distribution algorithm is. 	c8cd76de2800cb35bb870e3975c16083648779bf
----------------------------
Adjust plpython for escape_string_warning. 	c574106a665c9364a95d6d2ddfc2033b8914824b
----------------------------
Adjust PL regression tests for escape_string_warning. 	bc0be355c808120264108192f6695bc75beaeb43
----------------------------
Update /contrib regression tests for escape_string_warning. 	daab4a101fc1198c20992c036157dd2a4b588a68
----------------------------
Further examination of ltsReleaseBlock usage shows that it's got a performance issue during regular merge passes not only the 'final merge' case.  The original design contemplated that there would never be more than about one free block per 'tape', hence no need for an efficient method of keeping the free blocks sorted.  But given the later addition of merge preread behavior in tuplesort.c, there is likely to be about work_mem worth of free blocks, which is not so small ... and for that matter the number of tapes isn't necessarily small anymore either.  So we'd better get rid of the assumption entirely.  Instead, I'm assuming that the usage pattern will involve alternation between merge preread and writing of a new run.  This makes it reasonable to just add blocks to the list without sorting during successive ltsReleaseBlock calls, and then do a qsort() when we start getting ltsGetFreeBlock() calls. Experimentation seems to confirm that there aren't many qsort calls relative to the number of ltsReleaseBlock/ltsGetFreeBlock calls. 	43ceb3d4493dc7bcd9a32302b04bd31f1f0edffc
----------------------------
Turn off zero_damaged_pages in the right place (ie, in the autovac process not in the postmaster) and with the right GucSource (needs to be a nontransactional source since we've not started an xact yet). 	e6107da53c93dc188e257d72c3412510d2584093
----------------------------
"Use SetConfigOption() to turn off ""zero_damaged_pages"" in autovacuum. "	8d51c276ca8003ee973ba88d4fc4ffcc75bcec52
----------------------------
"Properly set ""escape_string_warning"" to default to true. "	ce1106d2fa3dacb2f31c778a310be5ab648aeb8a
----------------------------
Default to ON for 8.2, as announced in the release notes: escape_string_warning = on 	d694bd812aa1e8f5d0c99995cf57f417d03656c7
----------------------------
Done though the second is default so off in 8.2: > * -Eventually enable escape_string_warning and standard_conforming_strings 	1c021447315cd7dc9899488f4120f2e5bc856f71
----------------------------
Enable standard_conforming_strings to be turned on. Kevin Grittner 	19c21d115d221d9738afad142f2886dfd3cc40de
----------------------------
Prevent autovacuum from zeroing damaged pages. 	4c63b1f88efc172515fa65e15e4c5f60e695b61f
----------------------------
Incorporate a couple of recent tuplesort.c improvements into tuplestore.c. In particular, ensure that enlargement of the memtuples[] array doesn't fall foul of MaxAllocSize when work_mem is very large, and don't bother enlarging it if that would force an immediate switch into 'tape' mode anyway. 	2689abf07849d1ed69dfe57e3a999b1c6bb5e603
----------------------------
Add workaround so MSVC doesn't try to load strings.h, which it doesn't have.  This happens when MSVC uses pg_config.h generated by MinGW. Per report from Charles F. I. Savage 	28edbdb7be4faf23211074e0567f9926c51459a0
----------------------------
Appended is a small documentation patch that adds a note to the CREATE ROLE page, based on what Tom Lane told me here: http://archives.postgresql.org/pgsql-general/2005-11/msg00998.php Joachim Wieland 	b35440eae8a3dddf6e0dcff6879941d5995f084a
----------------------------
Arrange to call AbsorbFsyncRequests every so often while performing a checkpoint in the bgwriter.  This forestalls overflow of the fsync request queue, which is not fatal but causes considerable performance degradation when it occurs (because backends then have to do their own fsyncs).  Per patch from Itagaki Takahiro, modified a little bit by me. 	9a506a6257f3874d07cd185bec981f2ad335fc54
----------------------------
Fix bug that allowed any logged-in user to SET ROLE to any other database user id (CVE-2006-0553).  Also fix related bug in SET SESSION AUTHORIZATION that allows unprivileged users to crash the server, if it has been compiled with Asserts enabled.  The escalation-of-privilege risk exists only in 8.1.0-8.1.2. However, the Assert-crash risk exists in all releases back to 7.3. Thanks to Akio Ishida for reporting this problem. 	226a980bb0dfaaa4cee3650889218483aa9ec632
----------------------------
Remove LEFT part of JOIN to pg_roles because of optimizer limitation: > True, but they're not being used where you'd expect. This seems to be > something to do with the fact that it's not pg_authid which is being > accessed, but rather the view pg_roles. I looked into this and it seems the problem is that the view doesn't get flattened into the main query because of the has_nullable_targetlist limitation in prepjointree.c.  That's triggered because pg_roles has '********'::text AS rolpassword which isn't nullable, meaning it would produce wrong behavior if referenced above the outer join. Ultimately, the reason this is a problem is that the planner deals only in simple Vars while processing joins; it doesn't want to think about expressions.  I'm starting to think that it may be time to fix this, because I've run into several related restrictions lately, but it seems like a nontrivial project. In the meantime, reducing the LEFT JOIN to pg_roles to a JOIN as per Peter's suggestion seems like the best short-term workaround. 	05e27a9c20d4cd9f605e8601ca6b04be9056113e
----------------------------
When performing a parallel build (make -j N) with ./configure --enable-depend it often tries to create the .deps directory twice and bails out when it already exists due to a race condition of if doesn't exist, then create.  This patch prevents mkdir from returning an error. Kris Jurka 	a7dc90d9f680055c72d5ec7d1db4f6df7f8552e4
----------------------------
Done: > * -Add COMMENT ON for all cluster global objects (roles, databases 	20b508308a60b44170c2b47151d6572255f5615f
----------------------------
I've created a new shared catalog table pg_shdescription to store comments on cluster global objects like databases, tablespaces, and roles. It touches a lot of places, but not much in the way of big changes.  The only design decision I made was to duplicate the query and manipulation functions rather than to try and have them handle both shared and local comments.  I believe this is simpler for the code and not an issue for callers because they know what type of object they are dealing with. This has resulted in a shobj_description function analagous to obj_description and backend functions [Create/Delete]SharedComments mirroring the existing [Create/Delete]Comments functions. pg_shdescription.h goes into src/include/catalog/ Kris Jurka 	f9a726aa883e1690f66bec535d85b34e1f9ed7e7
----------------------------
Fix typo in configuration docs. Devrim GUNDUZ 	db5e39b2f0c6e0b1035b1d39d1cbfb8f324348fd
----------------------------
Fix constraint exclusion to work in inherited UPDATE/DELETE queries ... in fact, it will be applied now in any query whatsoever.  I'm still a bit concerned about the cycles that might be expended in failed proof attempts, but given that CE is turned off by default, it's the user's choice whether to expend those cycles or not.  (Possibly we should change the simple bool constraint_exclusion parameter to something more fine-grained?) 	3893127431b41a3341ac5ff9611c7ea0215b9110
----------------------------
DROP IF EXISTS for ROLE/USER/GROUP 	f8b54fe6ed7a2eae575d365091d136b4a4068316
----------------------------
Issue a warning if a change-on-restart-only postgresql.conf value is modified  and the server config files are reloaded 	3fa9c416ed14f1d46567fdcf99c8d639034dbeec
----------------------------
Move thread_test directory from /tools to /test so source-only tarballs have the directory for the configure test. 	9e66c3e6fe4f36e061a4d265f8e514c80ec11ef8
----------------------------
Set progname early in the postmaster/postgres binary, rather than doing it later.  This fixes a problem where EXEC_BACKEND didn't have progname set, causing a segfault if log_min_messages was set below debug2 and our own snprintf.c was being used. Also alway strdup() progname. Backpatch to 8.1.X and 8.0.X. 	62a142036ba59c8167ab4539a414e56ba4c39faa
----------------------------
Fix unportable usage of socklen_t: should use ACCEPT_TYPE_ARG3 macro provided by configure, instead.  Per bug #2205. 	7a9d197fdabdddf2a3e8f2548e247247c2b7f702
----------------------------
Minor improvements to GEQO documentation. 	57a84ca48e8901e77583f0c415f288430f5d66af
----------------------------
Marginal improvements in the wording of the autovacuum documentation: be consistent about whether it's called a daemon or a subprocess, and don't describe the autovacuum setting in exactly the same way as the stats_start_collector setting, because that leaves people thinking (if they aren't paying close attention) that autovacuum can't be changed on the fly. 	b42f307340fe41b9b33d9b7138abcf89c5778f65
----------------------------
Update EXPLAIN wording for GEQO usage. 	138fdf32bb306e0783c2d383d552d2dc65cd1f07
----------------------------
Fix thinko in autovacuum's test to skip temp tables: want to skip any temp table not only our own process' tables.  It's not real important since vacuum.c will skip temp tables anyway, but might as well make the code do what it claims to do. 	413d492d32ed2cd824f8e26804de5ff54a7a2e98
----------------------------
Modify pgstats code to reduce performance penalties from oversized stats data files: avoid creating stats hashtable entries for tables that aren't being touched except by vacuum/analyze, ensure that entries for dropped tables are removed promptly, and tweak the data layout to avoid storing useless struct padding.  Also improve the performance of pgstat_vacuum_tabstat(), and make sure that autovacuum invokes it exactly once per autovac cycle rather than multiple times or not at all.  This should cure recent complaints about 8.1 showing much higher stats I/O volume than was seen in 8.0.  It'd still be a good idea to revisit the design with an eye to not re-writing the entire stats dataset every half second ... but that would be too much to backpatch, I fear. 	d5db3abfb6154a2106e83d9db93150097ec83785
----------------------------
Fix fsync code to test whether F_FULLFSYNC is available, instead of assuming it always is on Darwin.  Per report from Neil Brandt. 	558bc2584d7e79801acb8344b79838cd3511915b
----------------------------
Update comment about outer joins in description of geqo_threshold. 	445144b8c25c37cbd321f8395216d5c5eeb82db2
----------------------------
Change allow_system_table_mods to PGC_POSTMASTER, restoring previous behavior. 	894829a32ce25fb1a23e665fafb310c8c65d5db6
----------------------------
Add: > > * Allow control over which tables are WAL-logged > >   Allow tables to bypass WAL writes and just fsync() dirty pages on >   commit.  To do this, only a single writer can modify the table, and >   writes must happen only on new pages.  Readers can continue accessing >   the table. Another option is to avoid transaction logging entirely >   and truncate or drop the table on crash recovery.  These should be >   implemented using ALTER TABLE, e.g. ALTER TABLE PERSISTENCE [ DROP | >   TRUNCATE | STABLE | DEFAULT ].  [wallog] 	1b736817d0761db12d370ab7a366eb3735eff571
----------------------------
Fix another case in which autovacuum would fail while analyzing expressional indexes.  Per report from Brian Hirt. 	e0078ea22ddb229e9050d17f8e3fa847f66f6768
----------------------------
Don't assume that LC_MESSAGES is always available on WIN32.  Per Magnus. 	fd924b29885b325125e43842a1f094586028aab9
----------------------------
Rewrite ProcessConfigFile() to avoid misbehavior at EOF, as per report from Andrus Moor.  The former state-machine-style coding wasn't actually doing much except obscuring the control flow, and it didn't extend readily to fix this case, so I just took it out.  Also, add a YY_FLUSH_BUFFER call to ensure the lexer is reset correctly if the previous scan failed partway through the file. 	fc6da31ae1f0a3f5e420eac398a4c076965c3ab6
----------------------------
Clean up initdb's code for selecting max_connections and shared_buffers a little bit, and set the minimum buffers-per-connection ratio to 10 not 5.  I folded the two test routines into one to counteract the illusion that the tests can be twiddled independently, and added some documentation pointing out the necessary connection between the sets of values tested. Fixes strange choices of parameters that I noticed CVS tip making on Darwin with Apple's undersized default SHMMAX. 	bcb26d74cb5cec962a612bf8f385981b3a928217
----------------------------
Move declaration of check_function_bodies to where the perl headers haven't had a chance to mangle the definition of DLLIMPORT (thanks again, perl guys). 	eb29d89ffdcead29ab243acb523404e580fe9666
----------------------------
Fix plperl validator to honor check_function_bodies: when that is OFF, we want it to check the argument/result data types and no more.  In particular, libperl shouldn't get initialized in this case. 	c104cd2038da109a190f4e58d42a54ed6dc8c538
----------------------------
Move plpgsql's fetchArgInfo() into funcapi.c, and rename to get_func_arg_info() for consistency with other names there. This code will probably be useful to other PLs when they start to support OUT parameters, so better to have it in the main backend. Also, fix plpgsql validator to detect bogus OUT parameters even when check_function_bodies is off. 	15093bf2d8cd80199e2a63361e4541ebe24b0a33
----------------------------
Our code had: if (c == '\\' && cstate->line_buf.len == 0) The problem with that is the because of the input and _output_ buffering, cstate->line_buf.len could be zero even if we are not on the first character of a line.  In fact, for a typical line, it is zero for all characters on the line.  The proper solution is to introduce a boolean, first_char_in_line, that we set as we enter the loop and clear once we process a character. I have restructured the line-reading code in copy.c by: o  merging the CSV/non-CSV functions into a single function o  used macros to centralize and clarify the buffering code o  updated comments o  renamed client_encoding_only to encoding_embeds_ascii o  added a high-bit test to the encoding_embeds_ascii test for performance o  in CSV mode, allow a backslash followed by a non-period to continue being processed as a data value There should be no performance impact from this patch because it is functionally equivalent.  If you apply the patch you will see copy.c is much clearer in this area now and might suggest additional optimizations. I have also attached a 8.1-only patch to fix the CSV \. handling bug with no code restructuring. 	a598385f3b2f88205d2e79470daefe38374acb1f
----------------------------
Allow CREATE/ALTER ROLE PASSWORD NULL to allow restoring the default state of having no password. 	98b3c3c450b9c3133f28375dc15c9c9b9bedd820
----------------------------
"Add quotes around search_path ""$user"" so that SHOW output can be used in SET. "	e80f9dfa8095656c0d671d89663439c66b806288
----------------------------
Add new psql command \password for changing role password with client-side password encryption.  Also alter createuser command to the same effect. 	b16566d77168540730d7ca26f8fe1832f15d450e
----------------------------
Completed: * -Have initdb set the input DateStyle (MDY or DMY) based on locale 	07044f5d6fc49306caf5d721784efb3ebaa085a7
----------------------------
Let initdb detect the date order of the lc_time locale and initialize the datestyle parameter of the new cluster accordingly. 	625d4b38e0311fa5d281624d05f6cf7db46c98bb
----------------------------
"Add for autovacuum: > 	o Consider logging activity either to the logs or a system view "	49bbff0f8da411a34da5f70fb8681033ec0c93c8
----------------------------
Add configure flag to allow libedit to be preferred over GNU readline: --with-libedit-preferred  prefer BSD Libedit over GNU Readline 	10e3d224e06cfe2bea634016a0786352c06b801f
----------------------------
Implement DROP OWNED and REASSIGN OWNED.  These new commands facilitate the process of dropping roles by dropping objects owned by them and privileges granted to them, or giving the owned objects to someone else, through the use of the data stored in the new pg_shdepend catalog. Some refactoring of the GRANT/REVOKE code was needed, as well as ALTER OWNER code.  Further cleanup of code duplication in the GRANT code seems necessary. Implemented by me after an idea from Tom Lane, who also provided various kind of implementation advice. Regression tests pass.  Some tests for the new functionality are also added, as well as rudimentary documentation. 	cec3b0a9e63fd94b05dac894cca8bfa51358afec
----------------------------
Update error message and documentation for fsync test. 	558c4367e713871b92e2dc459aab8657bd539601
----------------------------
Have test_fsync honor -f filename argument. 	46117e4f2a8cd73ee684b7662828867091c8b56b
----------------------------
add missing quote mark to ident_file sample line - per Hiroshi Saito 	f9db22e88e02e59bbf355e6e0468df6c6360d815
----------------------------
Fix misspelling of 'listen_addresses', per Devrim. 	0dd92d56b58b6b80d2c0b34aa25e8fa8cd922c5d
----------------------------
"Repair an error introduced by log_line_prefix patch: it is not acceptable to assume that the string pointer passed to set_ps_display is good forever. There's no need to anyway since ps_status.c itself saves the string, and we already had an API (get_ps_display) to return it. I believe this explains Jim Nasby's report of intermittent crashes in elog.c when %i format code is in use in log_line_prefix. While at it, repair a previously unnoticed problem: on some platforms such as Darwin, the string returned by get_ps_display was blank-padded to the maximum length, meaning that lock.c's attempt to append "" waiting"" to it never worked. "	48052de722a502408275fa3b7aee7de430265fc0
----------------------------
Improve description of constraint_exclusion variable. 	58d6316d508501a99951aa98d99f484411559a5e
----------------------------
Disregard superuserness when checking to see if a role GRANT would create circularity of role memberships.  This is a minimum-impact fix for the problem reported by Florian Pflug.  I thought about removing the superuser_arg test from is_member_of_role() altogether, as it seems redundant for many of the callers --- but not all, and it's way too late in the 8.1 cycle to be making large changes.  Perhaps reconsider this later. 	c3d8de0907b53e3ce8988c71181edb6bcecd5aa6
----------------------------
Rename config section headings. Simon Riggs 	7d9ff58b2285e46bead8e218666a2c25711d6347
----------------------------
Change trace_sort to output to the log, rather than the user's terminal. 	9ee8b9fd38bd420bdf17d9e4be1259dc6ca87330
----------------------------
update configure and bugtemplate for beta 4 ... 	106388fbe83bcb7ae91d5d46e7d81e3b663a8d57
----------------------------
Copy-editing for recent documentation changes relevant to WAL, full_page_writes, etc. 	f72a342fb7c714cf40491b5d2b5e34d835178744
----------------------------
Clean up autovacuum documentation, which was a bit out of sync with what the code actually does, and needed copy-editing anyway.  Also take the opportunity to expand the section on routine reindexing. 	fdff883aca7f13660d01e708f38bfb105c3c7872
----------------------------
Document the behavior of GRANT/REVOKE in cases where the privilege is held by means of role membership, rather than directly.  Per discussion and bug fix of a couple weeks ago. 	c9de6b922e4f8c2647c64a67e86d4a95e3fca2cc
----------------------------
Improve trace_sort code to also show the total memory or disk space used. Per request from Marc. 	b33a73226487ac1ea045c6e52b4a22d1451d0895
----------------------------
Add an entry to the discussion of regression test failures about the possibility of a failure due to stack overflow when max_stack_depth is not set properly for the platform. 	a33fadfd6df1296fa0d3709926e2ba8c33cdeee4
----------------------------
Fix syslog bug: if any messages are emitted to write_syslog before the facility has been set, the facility gets set to LOCAL0 and cannot be changed later.  This seems reasonably plausible to happen, particularly at higher debug log levels, though I am not certain it explains Han Holl's recent report.  Easiest fix is to teach the code how to change the value on-the-fly, which is nicer anyway.  I made the settings PGC_SIGHUP to conform with log_destination. 	abd3f43b4c6fb298fa1eb12fe8d78c6c3e6e0532
----------------------------
Improve documentation about CREATEROLE privilege. 	412734767a7bf7faf8b777c157f0b7c2bb37f179
----------------------------
"The patch updates the documentation to reflect the fact that higher values of client_min_messages (fatal + panic) are valid and also fixes a slight issue with how psql tried to display error messages that aren't sent to the client. We often tell people to ignore errors in response to requests for things like ""drop if exists"", but there's no good way to completely hide this without upping client_min_messages past ERROR.  When running a file like SET client_min_messages TO 'FATAL'; DROP TABLE doesntexist; with ""psql -f filename"" you get an error prefix of ""psql:/home/username/filename:3"" even though there is no error message to prefix because it isn't sent to the client. Kris Jurka "	8ac386226d76b29a9f54c26b157e04e9b8368606
----------------------------
Some additional doc changes based around compression of page images in WAL and the interaction of the new full_page_writes parameter with PITR. The too-small WAL first sect1 has been merged with the one following sect1 for clarity. Some minor comments have been made in the WAL config section also. Passes SGML make and proofread for typos. Files changed: patching file doc/src/sgml/backup.sgml patching file doc/src/sgml/config.sgml patching file doc/src/sgml/wal.sgml Simon Riggs 	165565cd946086c82682a9b4afa94b6fad751a45
----------------------------
"Done: < 	o %Replace crude DELETE FROM method of pg_dumpall --clean for <           cleaning of roles with separate DROP commands 608a607 > "	d5310ca9201461d19f85aefe1872c5d7936d842c
----------------------------
"Add: < > 	o Allow pg_dump --clean to drop roles that own objects or have > 	  privileges "	87a67d186b7084eeb731fc8f15c2aa090932329e
----------------------------
Remove the DELETEs from pg_shadow and pg_group that pg_dumpall used to emit when given the --clean option, in favor of individual DROP ROLE commands.  The old technique could not possibly work in 8.1, and was never a very good idea anyway IMHO.  The DROP ROLE approach has the defect that the DROPs will fail for roles that own objects or have privileges, but perhaps we can improve that later. 	c6b9924bec6f621f9bbceb38d7839a83c148c6ce
----------------------------
"Fix the problem of GRANTs creating ""dangling"" privileges not directly traceable to grant options.  As per my earlier proposal, a GRANT made by a role member has to be recorded as being granted by the role that actually holds the grant option, and not the member. "	91783061517b740e07f7dbf24f980e4641ba7d83
----------------------------
Fix Kerberos authentication in wake of virtual-hosts changes --- need to call krb5_sname_to_principal() always.  Also, use krb_srvname rather than the hardwired string 'postgres' as the appl_version string in the krb5_sendauth/recvauth calls, to avoid breaking compatibility with PG 8.0.  Magnus Hagander 	18d0ca2d1bf48f4b62cab4df4625b7f230b7c0c1
----------------------------
pg_config should print an error message to stderr and exit if an information item is not available. 	e9f11c6b648a2237690cf6f7773112d6706232a2
----------------------------
Code cleanup for log_disconnections(). Patch from Qingqing Zhou, fixes by Neil Conway. 	b5aad11a1b253bbd45405dc926f1ebef90f8f28c
----------------------------
Add a trace_sort option to help with measuring resource usage of external sort operations.  Per recent discussion.  Simon Riggs and Tom Lane. 	53e47cdd799963951c371ea8158996be3b6e603a
----------------------------
Done: < * +Add options to pg_config to show the share_dir, sysconfdir, <   pkgincludedir, and localedir 	455f48ddc5bfbb376f508f5a42b8bab9532256e3
----------------------------
Fix problems with PGXS builds against an installation tree that was relocated after installation.  We can't trust the installation paths inserted into Makefile.global by configure, so instead we must get the paths from pg_config.  This requires extending pg_config to support all the separately-configurable path names, but that was on TODO anyway. 	4fc935a5d47d40aac5b1ecf51aa5beaab03e8f76
----------------------------
PGXS should be set with := not =, as specified in the documentation, to avoid useless multiple executions of pg_config. 	0b36cb83dc53b2455ae4a5d6d10587ad0a3c53fa
----------------------------
Novice: < * Add options to pg_config to show the share_dir, sysconfdir, > * +Add options to pg_config to show the share_dir, sysconfdir, 	240c8e7e4300c7ea2b6ef803b3ba661a7066d47d
----------------------------
Cleanups for recent addition to log_connections documentation. 	d3419467bb90cc10438493bf6b6f513a34252dca
----------------------------
Add comments explaining clauses used by CREATE ROLE but not ALTER. 	9f53cfd9dbe4b537e01cc2f2c1d862897706eecd
----------------------------
Add: > * Simplify dropping roles that have objects in several databases 	86044a9d712eb3ed71c53633224ff6311e82bd75
----------------------------
Add: > * Add options to pg_config to show the share_dir, sysconfdir, >   pkgincludedir, and localedir > 	6e85717a77f2b9eedbac8433bab4f80945ffc131
----------------------------
Clarify autovacuum wording. 	e885554c8dd8c91a216baf9d5f1c00cdfdfba1d2
----------------------------
Please find attached a patch which tells about what the spiffy, integrated autovacuum now does :) David Fetter 	01ead29b0cd542d3a4d9add326fed9eca0b7cddb
----------------------------
Mention that autovacuum also needs stats. 	9822c73a9d8e568efd0be70415d56a0adb144e8d
----------------------------
Attached patch takes a swing at improving the autovacuum wording in maintenance.sgml. Robert Treat [ Also fix create domain markup.] 	18ea8ae53106aa0f98714b2c3c7cd43fc3b342d0
----------------------------
"Fix interaction between psql \set AUTOCOMMIT and ""ON_ERROR_ROLLBACK"" by properly updating transaction state after AUTOCOMMIT. "	99bb9c551ee0e4967619d3fc4b3970d84bc387a7
----------------------------
autovacuum setting false -> off, for consistency 	408c14026657c5cb5613cb557f5a9273e44454da
----------------------------
Add: < > * Update Bonjour to work with newer cross-platform SDK 	d64084daa5ce833e6379b680b7e9e151d19ae3bf
----------------------------
Add note about pg_autovacuum settings not being saved on a dump, per Robert Treat. 	3e579cf3c09d98e7d78d8621520592a6c201b582
----------------------------
Document the new autovacuum daemon. 	c93912b7110acb6cdc9640e910c0b7f1659da1c6
----------------------------
Update listen_addresses description. Darcy Buskermolen 	4506ec95cff283a6ad5cb50d9cab726289248ceb
----------------------------
Add: > * Eventually enable escape_string_warning and standard_conforming_strings 	bc0650660a4f71b53c076622467e6894e1f2cf68
----------------------------
Mention max_prepared_transactions in PREPARE TRANSACTION reference page, per Bruce's suggestion. 	cc367951a924855b910d0007934e0ef0cc27940a
----------------------------
Reduce default value of max_prepared_transactions from 50 to 5.  This saves nearly 700kB in the default shared memory segment size, which seems worthwhile, and it is a feature that many users won't use anyway.  Per Heikki's argument, there is no point in a compromise value --- those who are using 2PC at all will probably want it at least equal to max_connections. But we can't set it to zero by default without breaking the prepared_xacts regression test. 	037709e0b3da1f7ac3d794c60216365cf3e23de1
----------------------------
dumpUserConfig failed (in a pretty harmless way, but failed nonetheless) to cope with a group name when dumping from a pre-8.1 installation. Per report from Stefan Kaltenbrunner. 	0845538f3aeeadbf32a04131222cb4bd447543f8
----------------------------
"Add: > 	o Issue a warning if a change-on-restart-only postgresql.conf value > 	  is modified  and the server config files are reloaded > 	o Mark change-on-restart-only values in postgresql.conf 205a209 > 	o Fix SELECT '0.01 years'::interval, '0.01 months'::interval "	f9244df78f647de52f7280bcfb62449b27348fa3
----------------------------
Update constraint_exclusion items: <   inheritance, and allow it to work for UPDATE and DELETE queries >   inheritance, allow it to work for UPDATE and DELETE queries, and allow >   it to be used for all queries with little performance impact < * Allow constraint_elimination to be automatically performed < <   This requires additional code to reduce the performance loss caused by <   constraint elimination. 	bdfa8e5e71e4deb80f8f04779178b921919b69ed
----------------------------
"Remove completed items: < * -Allow limits on per-db/role connections 43d41 < * -Prevent dropping user that still owns objects, or auto-drop the objects 49d46 < * -Add the client IP address and port to pg_stat_activity < * -Add session start time and last statement time to pg_stat_activity < * -Add a function that returns the start time of the postmaster 230d224 < 	o -Allow MIN()/MAX() on arrays < 	o -Modify array literal representation to handle array index lower bound < 	  of other than one 253d244 < * -Add function to return compressed length of TOAST data values < * -Prevent to_char() on interval from returning meaningless values < <   For example, to_char('1 month', 'mon') is meaningless.  Basically, <   most date-related parameters to to_char() are meaningless for <   intervals because interval is not anchored to a date. < < * -Have views on temporary tables exist in the temporary namespace < * -Allow temporary views on non-temporary tables 329d311 < * -Add BETWEEN SYMMETRIC/ASYMMETRIC < * -Add E'' escape string marker so eventually ordinary strings can treat <   backslashes literally, for portability < < * -Allow additional tables to be specified in DELETE for joins < <   UPDATE already allows this (UPDATE...FROM) but we need similar <   functionality in DELETE.  It's been agreed that the keyword should <   be USING, to avoid anything as confusing as DELETE FROM a FROM b. < 341d313 < * -Allow REINDEX to rebuild all database indexes < * -Add an option to automatically use savepoints for each statement in a <   multi-statement transaction. < <   When enabled, this would allow errors in multi-statement transactions <   to be automatically ignored. < 426d391 < 	o -Allow FOR UPDATE queries to do NOWAIT locks 473d437 < 	o -Allow COPY to understand \x as a hex byte < 	o -Allow COPY to optionally include column headings in the first line < 	o -Allow COPY FROM ... CSV to interpret newlines and carriage < 	  returns in data 525d485 < 	o -Have SHOW ALL show descriptions for server-side variables < 	o -Allow PL/PgSQL's RAISE function to take expressions < < 	  Currently only constants are supported. < < 	o -Change PL/PgSQL to use palloc() instead of malloc() 545d499 < 	o -Allow PL/pgSQL EXECUTE query_var INTO record_var; 550d503 < 	o -Pass arrays natively instead of as text between plperl and postgres 598d550 < 	o -Add dumping and restoring of LOB comments 638d589 < * -Implement shared row locks and use them in RI triggers 642d592 < * -Allow triggers to be disabled < * -Add two-phase commit < < < * -Prevent inherited tables from expanding temporary subtables of other <   sessions < * -Use indexes for MIN() and MAX() < <   MIN/MAX queries can already be rewritten as SELECT col FROM tab ORDER <   BY col {DESC} LIMIT 1. Completing this item involves doing this <   transformation automatically. < < * -Use index to restrict rows returned by multi-key index when used with <   non-consecutive keys to reduce heap accesses < <   For an index on col1,col2,col3, and a WHERE clause of col1 = 5 and <   col3 = 9, spin though the index checking for col1 and col3 matches, <   rather than just col1; also called skip-scanning. < < * -Fetch heap pages matching index entries in sequential order < <   Rather than randomly accessing heap pages based on index entries, mark <   heap pages needing access in a bitmap and do the lookups in sequential <   order. Another method would be to sort heap ctids matching the index <   before accessing the heap rows. < < * -Allow non-bitmap indexes to be combined by creating bitmaps in memory < <   This feature allows separate indexes to be ANDed or ORed together.  This <   is particularly useful for data warehousing applications that need to <   query the database in an many permutations.  This feature scans an index <   and creates an in-memory bitmap, and allows that bitmap to be combined <   with other bitmap created in a similar way.  The bitmap can either index <   all TIDs, or be lossy, meaning it records just page numbers and each <   page tuple has to be checked for validity in a separate pass. < < * -Fix incorrect rtree results due to wrong assumptions about ""over"" <   operator semantics 782d694 < 	o -Add concurrency to GIST 813d724 < * -Allow multiple blocks to be written to WAL with one write() < * -Consider use of open/fcntl(O_DIRECT) to minimize OS caching, <   for WAL writes < <   O_DIRECT doesn't have the same media write guarantees as fsync, so it <   is in addition to the fsync method, not in place of it. < < * -Cache last known per-tuple offsets to speed long tuple access < * -Allow the size of the buffer cache used by temporary objects to be <   specified as a GUC variable < <   Larger local buffer cache sizes requires more efficient handling of <   local cache lookups. < < * -Improve the background writer < <   Allow the background writer to more efficiently write dirty buffers <   from the end of the LRU cache and use a clock sweep algorithm to <   write other dirty buffers to reduced checkpoint I/O < 897d788 < * -Add a warning when the free space map is too small 917d807 < 	o -Move into the backend code < * -Make locking of shared data structures more fine-grained < <   This requires that more locks be acquired but this would reduce lock <   contention, improving concurrency. < < * -Improve SMP performance on i386 machines < <   i386-based SMP machines can generate excessive context switching <   caused by lock failure in high concurrency situations. This may be <   caused by CPU cache line invalidation inefficiencies. < 979d857 < 	o  -Add ability to turn off full page writes < * -Eliminate WAL logging for CREATE TABLE AS when not doing WAL archiving < * -Change WAL to use 32-bit CRC, for performance reasons < < * -Use CHECK constraints to influence optimizer decisions < <   CHECK constraints contain information about the distribution of values <   within the table. This is also useful for implementing subtables where <   a tables content is distributed across several subtables. < 1045d913 < * -ANALYZE should record a pg_statistic entry for an all-NULL column 1099d966 < * -Remove kerberos4 from source tree 1103d969 < * -Make src/port/snprintf.c thread-safe 1118d983 < * -Add C code on Unix to copy directories for use in creating new databases 1133d997 < 	o -Improve dlerror() reporting string "	88d7b711a01683da6efe76d01c238c0befd18e4b
----------------------------
"Great TODO updates from Tom: <   Currently SIGTERM of a backend can lead to lock table corruption. >   Lock table corruption following SIGTERM of an individual backend >   has been reported in 8.0.  A possible cause was fixed in 8.1, but >   it is unknown whether other problems exist.  This item mostly >   requires additional testing rather than of writing any new code. < 	o Allow postgresql.conf values to be set so they can not be changed < 	  by the user 166c167,171 < * %Remove Money type, add money formatting for decimal type > * Improve the MONEY data type > >   Change the MONEY data type to use DECIMAL internally, with special >   locale-aware output formatting. > 225c230 < 	o %Allow MIN()/MAX() on arrays > 	o -Allow MIN()/MAX() on arrays 228c233 < 	o Modify array literal representation to handle array index lower bound > 	o -Modify array literal representation to handle array index lower bound 235a241 > 	o Auto-delete large objects when referencing row is deleted < 	  Currently large objects entries do not have owners. Permissions can < 	  only be set at the pg_largeobject table level. >           /contrib/lo offers this functionality. 240d244 < 	o Auto-delete large objects when referencing row is deleted < * %Have views on temporary tables exist in the temporary namespace < * Allow temporary views on non-temporary tables < * %Allow RULE recompilation > * -Have views on temporary tables exist in the temporary namespace > * -Allow temporary views on non-temporary tables > * Allow VIEW/RULE recompilation when the underlying tables change 340a345,347 > >   This is like DELETE CASCADE, but truncates. > 381c388 < * Make row-wise comparisons work per SQL spec > * %Make row-wise comparisons work per SQL spec < 	o Currently the system uses the operating system COPY command to < 	  create a new database. Add ON COMMIT capability to CREATE TABLE AS < 	  SELECT > 	o Add ON COMMIT capability to CREATE TABLE AS ... SELECT 427c432 < 	o %Add ALTER DOMAIN TYPE > 	o Add ALTER DOMAIN to modify the underlying data type < 	o %Disallow dropping of an inherited constraint < 	o -Allow objects to be moved to different schemas > 	o Add missing object types for ALTER ... SET SCHEMA < 	o %Prevent child tables from altering constraints like CHECK that were < 	  inherited from the parent table > 	o %Disallow dropping of an inherited constraint > 	o %Prevent child tables from altering or dropping constraints >           like CHECK that were inherited from the parent table < 	o Handle references to temporary tables that are created, destroyed, < 	  then recreated during a session, and EXECUTE is not used < < 	  This requires the cached PL/PgSQL byte code to be invalidated when < 	  an object referenced in the function is changed. < < 	o Add table function support to pltcl, plperl, plpython? < 	o Allow PL/pgSQL to name columns by ordinal position, e.g. rec.(3) > 	o Add table function support to pltcl, plpython 549a548 > 	o Allow function argument names to be queries from PL/PgSQL < 	o Pass arrays natively instead of as text between plperl and postgres < 	o Add support for polymorphic arguments and return types to plperl > 	o -Pass arrays natively instead of as text between plperl and postgres > 	o Add support for polymorphic arguments and return types to > 	  languages other than PL/PgSQL > 	o Add support for OUT and INOUT parameters to languages other > 	  than PL/PgSQL < * Allow libpq to access SQLSTATE so pg_ctl can test for connection failure < <   This would be used for checking if the server is up. < 565c563 < * Have initdb set DateStyle based on locale? > * Have initdb set the input DateStyle (MDY or DMY) based on locale? 567d564 < * Add a schema option to createlang < 	o Add pg_dumpall custom format dumps. < < 	  This is probably best done by combining pg_dump and pg_dumpall < 	  into a single binary. < > 	o Add pg_dumpall custom format dumps? 612c605,606 < 	o Remove unnecessary abstractions in pg_dump source code > 	o Remove unnecessary function pointer abstractions in pg_dump source > 	  code < * %Remove CREATE CONSTRAINT TRIGGER < <   This was used in older releases to dump referential integrity <   constraints. < 682a672,675 >   This is particularly important for references to temporary tables >   in PL/PgSQL because PL/PgSQL caches query plans.  The only workaround >   in PL/PgSQL is to use EXECUTE. > 748c741 < * Fetch heap pages matching index entries in sequential order > * -Fetch heap pages matching index entries in sequential order 797c790 < 	  Currently no only one hash bucket can be stored on a page. Ideally > 	  Currently only one hash bucket can be stored on a page. Ideally 806a800,802 > 	o Add WAL logging for crash recovery > 	o Allow multi-column hash indexes > 812a809,812 > >   Ideally this requires a separate test program that can be run >   at initdb time or optionally later. > 867c867 < * Improve the background writer > * -Improve the background writer <   For large table adjustements during vacuum, it is faster to reindex <   rather than update the index. >   For large table adjustements during VACUUM FULL, it is faster to >   reindex rather than update the index. < * Reduce lock time by moving tuples with read lock, then write <   lock and truncate table > * Reduce lock time during VACUUM FULL by moving tuples with read lock, >   then write lock and truncate table 919c919,920 < 	o %Suggest VACUUM FULL if a table is nearly empty > 	o %Issue log message to suggest VACUUM FULL if a table is nearly > 	  empty? 995d995 < * Add WAL index reliability improvement to non-btree indexes 1045c1045 < * ANALYZE should record a pg_statistic entry for an all-NULL column > * -ANALYZE should record a pg_statistic entry for an all-NULL column 1047a1048,1051 > * Allow constraint_elimination to be automatically performed > >   This requires additional code to reduce the performance loss caused by >   constraint elimination. 1090c1094 < * Remove memory/file descriptor freeing before ereport(ERROR) > * %Remove memory/file descriptor freeing before ereport(ERROR) < * Promote debug_query_string into a server-side function current_query() < * Allow the identifier length to be increased via a configure option > * %Promote debug_query_string into a server-side function current_query() > * %Allow the identifier length to be increased via a configure option 1113d1116 < * Fix cross-compiling of time zone database via 'zic' 1130c1133 < 	o Improve dlerror() reporting string > 	o -Improve dlerror() reporting string 1132c1135 <         o Add support for Unicode >         o %Add support for Unicode "	9f604687973eafa1476b454d50bc1dceb5b47ccb
----------------------------
Arrange for indexes and toast tables to inherit their ownership from the parent table, even if the command that creates them is executed by someone else (such as a superuser or a member of the owning role). Per gripe from Michael Fuhr. 	f26b91761bd25f9da2f97d818f60ae68588888c2
----------------------------
The attached patch updates the thread test program to run stand-alone on Windows. The test itself is bypassed in configure as discussed, and libpq has been updated appropriately to allow it to build in thread-safe mode. Dave Page 	43bf3a6bc658d634e073dcb4ea3580dd9053a3b1
----------------------------
enable_constraint_exclusion => constraint_exclusion Also improve wording. 	a7f49252d2476cc5996b1e9dbb253cdc521fbb7f
----------------------------
Minor GUC cleanups: document krb_server_hostname and custom_variable_classes in postgresql.conf.sample, mark custom_variable_classes as SIGHUP not POSTMASTER to agree with the documentation (I can't see a reason it has to be POSTMASTER so I think the docs are right). 	6fcaaf29dad233ceca67f31115dc75342a433e79
----------------------------
Convert the arithmetic for shared memory size calculation from 'int' to 'Size' (that is, size_t), and install overflow detection checks in it. This allows us to remove the former arbitrary restrictions on NBuffers etc.  It won't make any difference in a 32-bit machine, but in a 64-bit machine you could theoretically have terabytes of shared buffers. (How efficiently we could manage 'em remains to be seen.)  Similarly, num_temp_buffers, work_mem, and maintenance_work_mem can be set above 2Gb on a 64-bit machine.  Original patch from Koichi Suzuki, additional work by moi. 	0007490e0964d194a606ba79bb11ae1642da3372
----------------------------
Remove unnecessary configure test for inet_ntop(), per Andrew Dunstan. 	cb6a08c9b38990d9f65d2aa50463d88b3423ef44
----------------------------
Make createlang and droplang proof against weird search_path settings by forcing search_path to be just pg_catalog. 	9a9328003d65f2b5f1a9598ea423db37952976ca
----------------------------
"Allow the pgstat views to show toast tables as well as regular tables (the stats system has always collected this info, but the views were filtering it out).  Modify autovacuum so that over-threshold activity in a toast table can trigger a VACUUM of the parent table, even if the parent didn't appear to need vacuuming itself.  Per discussion a month or so back about ""short, wide tables"". "	87808aef05c91bdd26cb4447489db8a35c0d6fb2
----------------------------
Change pg_dump to use pg_roles instead of pg_user on 8.1 and up, so that it will correctly dump owners of objects owned by non-login roles. 	f590ed12f67620ac018491739c8bc5b13de9495c
----------------------------
Update administrator's guide chapters for ROLEs patch. 	840b7f5205ff48f260e5be09921a26c9f83a786f
----------------------------
Change standard_compliant_strings to standard_conforming_strings. 	bf86bacb2cc5af7dfe84e8d716b3d271956d8b14
----------------------------
Update the createuser utility for the ROLEs world.  Alvaro Herrera 	8ae0d476a9d5667645c5200d8c6831b2fb7a9a36
----------------------------
Fix psql's \d commands to use pg_roles instead of pg_user, so that they don't miss owners that are NOLOGIN. 	e36de181912fdec0b80a942fef83c2b57225e879
----------------------------
Fix up tab completion for ROLEs and add some more completion logic for other stuff; change \du and \dg to be role-aware (Stefan Kaltenbrunner). Also make tab completion fetch the list of GUC variables from pg_settings instead of having a hard-wired copy of the list (Tom Lane). 	84ccf7212cbc3d655dbe79a3ecd602d3dc39feba
----------------------------
Fix this: $ ./configure --without-docdir .. $ cd contrib/pgstattuple/ $ make install mkdir -p -- /contrib mkdir: cannot create directory `/contrib': Permission denied make: *** [installdirs] Error 1 ISHIDA Akio 	9cc5caea6c61285bd9c9172beaf2fc76c0a5cd71
----------------------------
Autovacuum loose end mop-up.  Provide autovacuum-specific vacuum cost delay and limit, both as global GUCs and as table-specific entries in pg_autovacuum.  stats_reset_on_server_start is now OFF by default, but a reset is forced if we did WAL replay.  XID-wrap vacuums do not ANALYZE, but do FREEZE if it's a template database.  Alvaro Herrera 	d90c531188196cd4ea6683c7f4395151b42028a2
----------------------------
Extend pg_config to be able to report the build-time values of CC, CPPFLAGS, CFLAGS, CFLAGS_SL, LDFLAGS, LDFLAGS_SL, and LIBS.  Change it so that invoking pg_config with no arguments reports all available information, rather than just giving an error message.  Per discussion. 	cbd015d71829e825cefde48bf71786d5eb177b94
----------------------------
Combine entries: <   inheritance < * Allow enable_constraint_exclusion to work for UPDATE and DELETE queries >   inheritance, and allow it to work for UPDATE and DELETE queries 	f80cf69031fae2b46d262bad02f67489d47f17a4
----------------------------
Update postgresql.conf to show default ordering for wal_sync_method. 	1c695470151b9c853ea938577b588f9699d8fbf5
----------------------------
Clarify wal_sync_method options in documentation. 	487b757b7a0b560cbb612164a66888cd5421e124
----------------------------
Fix count_usable_fds() to stop trying to open files once it reaches max_files_per_process.  Going further than that is just a waste of cycles, and it seems that current Cygwin does not cope gracefully with deliberately running the system out of FDs.  Per Andrew Dunstan. 	5337ad464ef91d811ecafbebf4698eab6b3d8e8d
----------------------------
"Clean up CREATE DATABASE processing to make it more robust and get rid of special case for Windows port.  Put a PG_TRY around most of createdb() to ensure that we remove copied subdirectories on failure, even if the failure happens while creating the pg_database row.  (I think this explains Oliver Siegmar's recent report.)  Having done that, there's no need for the fragile assumption that copydir() mustn't ereport(ERROR), so simplify its API.  Eliminate the old code that used system(""cp ..."") to copy subdirectories, in favor of using copydir() on all platforms.  This not only should allow much better error reporting, but allows us to fsync the created files before trusting that the copy has succeeded. "	558730ac6bbc668a75c7a7619beae5a1b34d965f
----------------------------
Done: > * -Allow limits on per-db/role connections 	614b6e25810ef1baf2e6f2e34f47fc35cfaa894c
----------------------------
Add per-user and per-database connection limit options. This patch also includes preliminary update of pg_dumpall for roles. Petr Jelinek, with review by Bruce Momjian and Tom Lane. 	d42cf5a42a42689f68bc1ee1200aca75f954b1fd
----------------------------
Add constraint exclusion items: < > * Allow EXPLAIN to identify tables that were skipped because of >   enable_constraint_exclusion > * Allow EXPLAIN output to be more easily processed by scripts 760a763 > * Allow enable_constraint_exclusion to work for UPDATE and DELETE queries 	90524998c0ad134983345c01cb02fffffd6f72fb
----------------------------
Add: < > * Allow enable_constraint_exclusion to work for UNIONs like it does for >   inheritance 	326816295e5b7ca48116fcad0f070b2e7d4353e6
----------------------------
Remove contrib version of pg_autovacuum --- superseded by integrated version. 	80f6c35833508a793b5b488fb56f52118259eba5
----------------------------
Clean up a number of autovacuum loose ends.  Make the stats collector track shared relations in a separate hashtable, so that operations done from different databases are counted correctly.  Add proper support for anti-XID-wraparound vacuuming, even in databases that are never connected to and so have no stats entries.  Miscellaneous other bug fixes. Alvaro Herrera, some additional fixes by Tom Lane. 	5d5f1a79e674d5501f70f08bbb9b83d9bbaed319
----------------------------
Use O_DIRECT if available when using O_SYNC for wal_sync_method. Also, write multiple WAL buffers out in one write() operation. ITAGAKI Takahiro --------------------------------------------------------------------------- > If we disable writeback-cache and use open_sync, the per-page writing > behavior in WAL module will show up as bad result. O_DIRECT is similar > to O_DSYNC (at least on linux), so that the benefit of it will disappear > behind the slow disk revolution. > > In the current source, WAL is written as: >     for (i = 0; i < N; i++) { write(&buffers[i], BLCKSZ); } > Is this intentional? Can we rewrite it as follows? >    write(&buffers[0], N * BLCKSZ); > > In order to achieve it, I wrote a 'gather-write' patch (xlog.gw.diff). > Aside from this, I'll also send the fixed direct io patch (xlog.dio.diff). > These two patches are independent, so they can be applied either or both. > > > I tested them on my machine and the results as follows. It shows that > direct-io and gather-write is the best choice when writeback-cache is off. > Are these two patches worth trying if they are used together? > > >             | writeback | fsync= | fdata | open_ | fsync_ | open_ > patch       | cache     |  false |  sync |  sync | direct | direct > ------------+-----------+--------+-------+-------+--------+--------- > direct io   | off       |  124.2 | 105.7 |  48.3 |   48.3 |  48.2 > direct io   | on        |  129.1 | 112.3 | 114.1 |  142.9 | 144.5 > gather-write| off       |  124.3 | 108.7 | 105.4 |  (N/A) | (N/A) > both        | off       |  131.5 | 115.5 | 114.4 |  145.4 | 145.2 > > - 20runs * pgbench -s 100 -c 50 -t 200 >    - with tuning (wal_buffers=64, commit_delay=500, checkpoint_segments=8) > - using 2 ATA disks: >    - hda(reiserfs) includes system and wal. >    - hdc(jfs) includes database files. writeback-cache is always on. > > --- > ITAGAKI Takahiro 	c34bb00581487e9fac9f8524bc6986d305fcfe3a
----------------------------
Basic documentation for ROLEs.  The user-manag chapter still needs to be rewritten, but at least the reference pages are reasonably sane. 	58d214e51fe50b10b4439da6ec263d54c155afbf
----------------------------
Minor correction: cause ALTER ROLE role ROLE rolenames to behave sensibly, even though we don't document it. 	0c2d7e39f9089dc1c65d87e656f792f4910460bf
----------------------------
Add a role property 'rolinherit' which, when false, denotes that the role doesn't automatically inherit the privileges of roles it is a member of; for such a role, membership in another role can be exploited only by doing explicit SET ROLE.  The default inherit setting is TRUE, so by default the behavior doesn't change, but creating a user with NOINHERIT gives closer adherence to our current reading of SQL99.  Documentation still lacking, and I think the information schema needs another look. 	af019fb9aec0274875a10a89c68c8fecb949349f
----------------------------
Add pg_has_role() family of privilege inquiry functions modeled after the existing ones for object privileges.  Update the information_schema for roles --- pg_has_role() makes this a whole lot easier, removing the need for most of the explicit joins with pg_user.  The views should be a tad faster now, too.  Stephen Frost and Tom Lane. 	f9fd1764615ed5d85fab703b0ffb0c323fe7dfd5
----------------------------
Add SET ROLE.  This is a partial commit of Stephen Frost's recent patch; I'm still working on the has_role function and information_schema changes. 	e5d6b91220d69c87f44e1ce0095516946abc6d6c
----------------------------
Fix some failures to initialize table entries induced by recent autovacuum integration.  Not clear this explains recent stats problems, but it's definitely wrong. 	eaa5d52bfef2eb9e1bd4950432d99abd2cf5ea4f
----------------------------
Make pg_regress accept a command-line option for the temporary installation's port number, and use a default value for it that is dependent on the configuration-time DEF_PGPORT.  Should make the world safe for running parallel 'make check' in different branches.  Back-patch as far as 7.4 so that this actually is useful. 	d0f312ebfe09692f7d213da6c7c6277b438d3d10
----------------------------
Adjust permissions checking for ALTER OWNER commands: instead of requiring superuserness always, allow an owner to reassign ownership to any role he is a member of, if that role would have the right to create a similar object.  These three requirements essentially state that the would-be alterer has enough privilege to DROP the existing object and then re-CREATE it as the new role; so we might as well let him do it in one step.  The ALTER TABLESPACE case is a bit squirrely, but the whole concept of non-superuser tablespace owners is pretty dubious anyway.  Stephen Frost, code review by Tom Lane. 	aa1110624c08298393dfce996f7b21809d98d3fd
----------------------------
Integrate autovacuum functionality into the backend.  There's still a few loose ends to be dealt with, but it seems to work.  Alvaro Herrera, based on the contrib code by Matthew O'Connor. 	29094193f526bf90671d71b59a2e007aad1fcae5
----------------------------
Add --encoding to pg_dump. The Problem:  Occassionally a DBA needs to dump a database to a new encoding.   In instances where the current encoding, (or lack of an encoding, like SQL_ASCII) is poorly supported on the target  database server, it can be useful to dump into a particular  encoding.  But, currently the only way to set the encoding of  a pg_dump file is to change  client_encoding in postgresql.conf and restart postmaster. This is more  than a little awkward for production systems. Magnus Hagander 	d1cffe2f779d95ddb9f0607f284e2c6c3a71d566
----------------------------
- Add Fortuna PRNG to pgcrypto. - Move openssl random provider to openssl.c and builtin provider to internal.c - Make px_random_bytes use Fortuna, instead of giving error. - Retarget random.c to aquiring system randomness, for initial seeding of Fortuna.  There is ATM 2 functions for Windows, reader from /dev/urandom and the regular time()/getpid() silliness. Marko Kreen 	4fcf8b11ff4561b7479b80396a0d697bda0e5115
----------------------------
Fix config file lexer to not barf if postgresql.conf ends with a comment that has no terminating newline.  Per report from maps.on at gmx.net. 	40d091b818722cbde7ed907893e110b2a820ad58
----------------------------
Try connecting to both postgres and template1 databases to do the initial inspection of shared catalogs.  This allows pg_dumpall to continue to work with pre-8.1 servers that likely won't have a database named postgres. Also, suppress output of SYSID options for users and groups, since server no longer does anything with these except emit a rude message. There is much more to be done to update pg_dumpall for the roles feature, but this at least makes it usable again.  Per gripe from Chris K-L. 	0ed5f90d736cc12b02c1adffcf1f3438e178834b
----------------------------
Even though I'd like to see full_page_writes go away before 8.1, a minimum requirement is that it not completely break the system meanwhile.  Put the test in the right place. 	d7207cfc6bc070660a2e51d2c892dd4d93f5b636
----------------------------
Track dependencies on shared objects (which is to say, roles; we already have adequate mechanisms for tracking the contents of databases and tablespaces).  This solves the longstanding problem that you can drop a user who still owns objects and/or has access permissions. Alvaro Herrera, with some kibitzing from Tom Lane. 	59d1b3d99e690734fa2a2bd0fae12b0cb1084294
----------------------------
Update description of GUC full_page_writes. Michael Paesold 	0bf8b273484006d03c55e86b3d26dec3811f984d
----------------------------
Add GUC full_page_writes to control writing full pages to WAL. 	326a7a0788b4e3c18d4e7008e3943bdb81a21769
----------------------------
Fix contrib/pgcrypto to autoconfigure for OpenSSL when --with-openssl is used in the toplevel configure.  Per Marko Kreen. 	c19aa704c84e660c73fb45e0d3f38d0840f17823
----------------------------
Remove, now have GUC: < * Turn off full page writes if fsync is disabled < <   If fsync is off, there is no purpose in writing full pages to WAL < 	d22a3727a5f8bd19f4443713b19908367e4181b8
----------------------------
Update wording: <   Currently, to protect against partial disk page writes, we write the >   Currently, to protect against partial disk page writes, we write 877c877 < * Turn off after-change writes if fsync is disabled > * Turn off full page writes if fsync is disabled 	3848532c7976f28bba546024afb7f94e8de1ece0
----------------------------
"Clarify: < 	o Replace crude DELETE FROM method of pg_dumpall for cleaning of < 	  roles with separate DROP commands > 	o Replace crude DELETE FROM method of pg_dumpall --clean for >           cleaning of roles with separate DROP commands "	f009248af18848b54b08f2dc087c1189bdde5914
----------------------------
"Update for roles: < * Allow limits on per-db/user connections > * Allow limits on per-db/role connections < * Prevent default re-use of sysids for dropped users and roles < <   Currently, if a user is removed while he still owns objects, a new <   user given might be given their user id and inherit the <   previous users objects. < 450c444 < * Add COMMENT ON for all cluster global objects (users, roles, databases > * Add COMMENT ON for all cluster global objects (roles, databases 609c603 < 	  users and roles with separate DROP commands > 	  roles with separate DROP commands "	fee590c8b110c9f761526595b1b10ce8b8778ee6
----------------------------
"Update for roles: < * Prevent default re-use of sysids for dropped users and groups > * Prevent default re-use of sysids for dropped users and roles 450c450 < * Add COMMENT ON for all cluster global objects (users, groups, databases > * Add COMMENT ON for all cluster global objects (users, roles, databases 609c609 < 	  users and groups with separate DROP commands > 	  users and roles with separate DROP commands "	b00f557dd17906b358f811fb939dde66403e134a
----------------------------
Item superceeded now that groups exist: < * Add group object ownership, so groups can rename/drop/grant on objects, <   so we can implement roles 	8ab306e4eaae6e73d77433e0848a76ee2c901fe8
----------------------------
Clarify documentation about log_min_duration_statement. 	8f6e8e8fed372a592f645d8900b6f456db82cc59
----------------------------
More cleanup on roles patch.  Allow admin option to be inherited through role memberships; make superuser/createrole distinction do something useful; fix some locking and CommandCounterIncrement issues; prevent creation of loops in the membership graph. 	c33d575899593a46a5b9a76e4e0ef6f9d81e55dd
----------------------------
Bring syntax of role-related commands into SQL compliance.  To avoid syntactic conflicts, both privilege and role GRANT/REVOKE commands have to use the same production for scanning the list of tokens that might eventually turn out to be privileges or role names.  So, change the existing GRANT/REVOKE code to expect a list of strings not pre-reduced AclMode values.  Fix a couple other minor issues while at it, such as InitializeAcl function name conflicting with a Windows system function. 	0eaa36a16a89029f1b2eb9a38c90e3a0a0e2641e
----------------------------
Replace pg_shadow and pg_group by new role-capable catalogs pg_authid and pg_auth_members.  There are still many loose ends to finish in this patch (no documentation, no regression tests, no pg_dump support for instance).  But I'm going to commit it now anyway so that Alvaro can make some progress on shared dependencies.  The catalog changes should be pretty much done. 	7762619e95272974f90a38d8d85aafbe0e94add5
----------------------------
"Add E'' syntax so eventually normal strings can treat backslashes literally. Add GUC variables: ""escape_string_warning"" - warn about backslashes in non-E strings ""escape_string_syntax"" - supports E'' syntax? ""standard_compliant_strings"" - treats backslashes literally in '' Update code to use E'' when escapes are used. "	bb3cce4ec9cc157a8dfc80b5b1770c2beac0a57e
----------------------------
Add: > * Add program to test if fsync has a delay compared to non-fsync 	ebb399570ddda50ac2cfce18139babf54540d68a
----------------------------
"Fix pg_dumpall to do the right thing with ""postgres"" database, per Dave Page.  Also, cause it to emit rather than ignore any ACL and datconfig options that may be set for these two databases. "	b49d871f6ac58ff63a3147575494fb8fe9c6a5eb
----------------------------
Avoid WAL-logging individual tuple insertions during CREATE TABLE AS (a/k/a SELECT INTO).  Instead, flush and fsync the whole relation before committing.  We do still need the WAL log when PITR is active, however. Simon Riggs and Tom Lane. 	b95ae32b4178959e8880bd716fb33ec163f61713
----------------------------
Arrange to fsync two-phase-commit state files only during checkpoints; given reasonably short lifespans for prepared transactions, this should mean that only a small minority of state files ever need to be fsynced at all.  Per discussion with Heikki Linnakangas. 	e26b0abda3919448d5ccbcaac0415010022864b7
----------------------------
Add fsync() define for Win32 to cover cases other than wal_sync_method where we need fsync(). 	26cbccd52ced1bd4489d9f0713b4fc0c55bea1e4
----------------------------
Fix display of database name during autovacuum. Cosimo Streppone 	1f01d59e06b8865838ceb06f34e9dc66c20ed5a1
----------------------------
Attached is a makefile I hacked up to build pg_config under MSVC - the reason is that it's required (more or less) in order to build the latest DBD::Pg code and I was testing that out under MSVC. Andrew Dunstan 	f04c39402a5a0332924e893ff8d8c27cb32dbec2
----------------------------
The random selection in function linear() could deliver a value equal to max if geqo_rand() returns exactly 1.0, resulting in failure due to indexing off the end of the pool array.  Also, since this is using inexact float math, it seems wise to guard against roundoff error producing values slightly outside the expected range.  Per report from bug@zedware.org. 	1265724ff5abb1dcf468cb33153ae1326426d7a6
----------------------------
Document the --enable-integer-datetimes configure option where the other configure options are documented.  Per Michael Glaesemann. 	f52a34229b868249409e73365d42cab097a923e9
----------------------------
Restructure log_line_prefix options to be clearer: #log_line_prefix = ''   # %u = user name # %d = database name # %r = remote host and port # %h = remote host # %p = PID # %t = timestamp # %m = timestamp with milliseconds # %i = command tag # %c = session id # %l = session line number # %s = session start timestamp # %x = transaction id # %q = stop here in non-session processes # %% = '%' # e.g. '<%u%%%d> ' 	4778c33106309a033da91b8a5330d63578b0229f
----------------------------
This patch against 8.0.0beta1 source adds log_line_prefix options for millisecond timestamps (%m) and remote host (%h). The milliseconds are useful for QPS measurements. Ed L. 	6c2ba14d8d1e20251680de3972991c574a9dcfaa
----------------------------
Fix assign_datestyle() so that it doesn't misleadingly complain about 'conflicting datestyle specifications' for input that's actually only redundant, such as SET DATESTYLE = MDY, MDY.  Per recent gripe. 	8714d9c56bdf86817d37375fa31ee0aa9de224bf
----------------------------
Add example for pg_config --configure. 	65d27324c3fbc17dafdfd54c9d3ff3d4ad90ca36
----------------------------
"Allow kerberos name and username case sensitivity to be specified from postgresql.conf. --------------------------------------------------------------------------- Here's an updated version of the patch, with the following changes: 1) No longer uses ""service name"" as ""application version"". It's instead hardcoded as ""postgres"". It could be argued that this part should be backpatched to 8.0, but it doesn't make a big difference until you can start changing it with GUC / connection parameters. This change only affects kerberos 5, not 4. 2) Now downcases kerberos usernames when the client is running on win32. 3) Adds guc option for ""krb_caseins_users"" to make the server ignore case mismatch which is required by some KDCs such as Active Directory. Off by default, per discussion with Tom. This change only affects kerberos 5, not 4. 4) Updated so it doesn't conflict with the rendevouz/bonjour patch already in ;-) Magnus Hagander "	72c53ac3a7faaf825752843fbb77b059a1c5f565
----------------------------
"At 2005-05-21 20:18:50 +0530, ams@oryx.com wrote: > > > The second issue is where plperl returns a large result set. I have attached the following seven patches to address this problem: 1. Trivial. Replaces some errant spaces with tabs. 2. Trivial. Fixes the spelling of Jan's name, and gets rid of many inane, useless, annoying, and often misleading comments. Here's a sample: ""plperl_init_all() - Initialize all"". (I have tried to add some useful comments here and there, and will continue to do so now and again.) 3. Trivial. Splits up some long lines. 4. Converts SRFs in PL/Perl to use a Tuplestore and SFRM_Materialize to return the result set, based on the PL/PgSQL model. There are two major consequences: result sets will spill to disk when they can no longer fit in work_mem; and ""select foo_srf()"" no longer works. (I didn't lose sleep over the latter, since that form is not valid in PL/PgSQL, and it's not documented in PL/Perl.) 5. Trivial, but important. Fixes use of ""undef"" instead of undef. This would cause empty functions to fail in bizarre ways. I suspect that there's still another (old) bug here. I'll investigate further. 6. Moves the majority of (4) out into a new plperl_return_next() function, to make it possible to expose the functionality to Perl; cleans up some of the code besides. 7. Add an spi_return_next function for use in Perl code. If you want to apply the patches and try them out, 8-composite.diff is what you should use. (Note: my patches depend upon Andrew's use-strict and %_SHARED patches being applied.) Here's something to try: create or replace function foo() returns setof record as $$ $i = 0; for (""World"", ""PostgreSQL"", ""PL/Perl"") { spi_return_next({f1=>++$i, f2=>'Hello', f3=>$_}); } return; $$ language plperl; select * from foo() as (f1 integer, f2 text, f3 text); (Many thanks to Andrews Dunstan and Supernews for their help.) Abhijit Menon-Sen "	d995014fac604b256e7123c472cbfd4dde91d411
----------------------------
Improve readability of config location params by adding newline. 	00750f3f30893eba7e330d195439ceef846f59a8
----------------------------
Add: > * Allow pg_ctl to work properly with configuration files located outside >   the PGDATA directory > >   pg_ctl can not read the pid file because it isn't located in the >   config directory but in the PGDATA directory.  The solution is to >   allow pg_ctl to read and understand postgresql.conf to find the >   data_directory value. > 	3360bc13519dc33ea911a157c9e46f2344eb3e44
----------------------------
Add description: > >   O_DIRECT doesn't have the same media write guarantees as fsync, so it >   is in addition to the fsync method, not in place of it. > 	487990e1f17e7898f595e4ab7589c51e7d61da1b
----------------------------
Fix log_statement to properly recognize SELECT INTO and CREATE TABLE AS and DDL statements. Backpatch fix to 8.0.X. Per report from Murthy Kambhampaty 	b6e5c4ad0a815380c6c509b4c8193850334ddb1b
----------------------------
Bgwriter should PANIC if it runs out of memory for pending-fsyncs hash table.  This is a pretty unlikely scenario, since the table should be tiny, but we can't guarantee continued correct operation if it does occur.  Spotted by Qingqing Zhou. 	f8a051604fcf4fe718e84c51704bf9e3d14628fe
----------------------------
Add support for wal_fsync_writethrough for Darwin, and restructure the code to better handle writethrough. Chris Campbell 	6dc7760ac3c3aeb766f489121f39d26d6f9b8c46
----------------------------
Rename Rendezvous to Bonjour to match OS/X renaming. 	c9a382b2ed8ce181bad14de429ed102abada63cd
----------------------------
Fix pg_autovacuum -s flag to handle values > 2000 by using sleep() instead of pg_usleep. Backpatch to 8.0.X. 	be1cc6955c80b790dc1054239ce0d92bf1ca8108
----------------------------
The issue has been raised in the past that our build system links each executable against the maximal set of libraries it might need. So for example, if one executable requires `libreadline', all executables are linked against it. The easiest fix is to make use of GNU ld's --as-needed flag, which ignores linker arguments that are not actually needed by the specified object files. The attached patch modifies configure to check for this flag (when using GNU ld), and if ld supports it, adds the flag to LDFLAGS (we need to do the check since only relatively recent versions of GNU ld support this capability). Currently only GNU ld is supported; I'm not aware of any other linkers that support this functionality. 	d445b413c6e2a7afeb77b9e30a1c9241edb1af53
----------------------------
Rethink original decision to use AND/OR Expr nodes to represent bitmap logic operations during planning.  Seems cleaner to create two new Path node types, instead --- this avoids duplication of cost-estimation code. Also, create an enable_bitmapscan GUC parameter to control use of bitmap plans. 	14c7fba3f7d0769d8a063dea2854693f35535f6a
----------------------------
The following patch should allow UPDATE_INTERVAL to be specified on the command line. We find this useful because we frequently deal with thousands of tables in an environment where neither the databases nor the tables are updated frequently. This helps allow us to cut down on the overhead of updating the list for every other primary loop of pg_autovacuum. I chose -i as the command-line argument and documented it briefly in the README. The patch was applied to the 7.4.7 version of pg_autovacuum in contrib. Thomas F.O'Connell 	7cce39c7ce8bf9188996bb7483e8a41fd6dfab8e
----------------------------
Modify MoveOfflineLogs/InstallXLogFileSegment to avoid O(N^2) behavior when recycling a large number of xlog segments during checkpoint. The former behavior searched from the same start point each time, requiring O(checkpoint_segments^2) stat() calls to relocate all the segments.  Instead keep track of where we stopped last time through. 	61b861421b0b849a0dffe36238b8e504624831c1
----------------------------
Flush any remaining statistics counts out to the collector at process exit.  Without this, operations triggered during backend exit (such as temp table deletions) won't be counted ... which given heavy usage of temp tables can lead to pg_autovacuum falling way behind on the need to vacuum pg_class and pg_attribute.  Per reports from Steve Crawford and others. 	9336d636e29a75be5c9a80b5a3bd455ff59468e5
----------------------------
"Document that the ""-P"" option to pg_autovacuum is insecure on many platforms, and suggest using ~/.pgpass instead. "	8962b6106b4d6672675f83be11a5e0effcdd36fc
----------------------------
Change Win32 O_SYNC method to O_DSYNC because that is what the method currently does.  This is now the default Win32 wal sync method because we perfer o_datasync to fsync. Also, change Win32 fsync to a new wal sync method called fsync_writethrough because that is the behavior of _commit, which is what is used for fsync on Win32. Backpatch to 8.0.X. 	b1f57d88f56e0fbb49e4e5c8839cd3fb3a580a14
----------------------------
"Remove: < < 	o Prevent conflicting SET options from being set < < 	  This requires a checking function to be called after the server < 	  configuration file is read. "	4201ba24597814e663158617bb5056d7e71720ac
----------------------------
pgcrypto update: Reserve px_get_random_bytes() for strong randomness, add new function px_get_pseudo_random_bytes() for weak randomness and use it in gen_salt(). On openssl case, use RAND_pseudo_bytes() for px_get_pseudo_random_bytes(). Final result is that is user has not configured random souce but kept the 'silly' one, gen_salt() keeps working, but pgp_encrypt() will throw error. Marko Kreen 	19b676869a1d9c1bf25a2332bdbe04bb9027c340
----------------------------
Add temp_buffers GUC variable to allow users to determine the size of the local buffer arena for temporary table access. 	91728fa26cabac4b34055ab8e23d0751f0b16753
----------------------------
Add missing include for new lc_ctype_is_c() function. Per Neil. 	83e87e6f2e1a6ec294d4448e0681661cb711405d
----------------------------
Make default_with_oids default to false -- user-created tables will now no longer include OIDs, unless WITH OIDS is specified or the default_with_oids configuration parameter is enabled. Update the docs accordingly. 	ff02d0a05280e96e0b91b97ec50e98611f9c7598
----------------------------
Revise hash join code so that we can increase the number of batches on-the-fly, and thereby avoid blowing out memory when the planner has underestimated the hash table size.  Hash join will now obey the work_mem limit with some faithfulness.  Per my recent proposal (hash aggregate part isn't done yet though). 	849074f9ae422c64501bb1d53ef840de870bf65c
----------------------------
Allow Trace_lock_oidmin to be set to zero; this is a reasonable representation of not wanting tracing to be limited by object OID. 	ccba1d0c9c5a614771820c74f51e7a602e637995
----------------------------
Un-break configure snprintf tests (partly my fault, partly Bruce's). 	5c4a91c2958638ce9ec5f08c28dcddb88f4c0bd9
----------------------------
Allow Win32 to support the O_SYNC open flag as an wal_sync_method method. Magnus Hagander 	afbc30e5d4e305a577006582dd3650cf8f9c371f
----------------------------
Add support to port/snprintf.c for position parameter specification: + # Determine if printf supports %1$ argument selection, e.g. %5$ selects + # the fifth argument after the printf print string. + # This is not in the C99 standard, but in the Single Unix Specification (SUS). + # It is used in our langauge translation strings. Nicolai Tufar with configure changes by Bruce. 	b4feafb6ffdc8417abb167f5d3297428dc465b03
----------------------------
Clarify item: < * Allow server configuration parameters to be remotely modified > * Allow pg_hba.conf settings to be controlled via SQL > >   This would require a new global table that is dumped to flat file for >   use by the postmaster.  We do a similar thing for pg_shadow currently. > 	ac1cbc80794ba4c24a482fa474f98e19d477562c
----------------------------
Flat file cleanup phase 2: make it work for pg_group.  The flat group file now identifies group members by usesysid not name; this avoids needing to depend on SearchSysCache which we can't use during startup. (The old representation was entirely broken anyway, since we did not regenerate the file following RENAME USER.)  It's only a 95% solution because if the group membership list is big enough to be toasted out of line, we cannot read it during startup.  I think this will do for the moment, until we have time to implement the planned pg_role replacement for pg_group. 	3f9aec50e7e31ab8acd596a016e0dd0a1dd5e29c
----------------------------
Add a regression test to verify that the stack depth checker actually works (and max_stack_depth is not set too high for the platform). Inspired by trouble report from Brian Betts. 	e9d693411ca5a0a5386a5b337f5f879cd5563243
----------------------------
Improvements to documentation of shared memory configuration under FreeBSD. From Mark Kirkwood, editorializing by Neil Conway. 	cf1f6f98f221ea8adf1bd74e70249e39165c0b26
----------------------------
Remove GEQO and Rtree FAQ items. 	bfc536217db70399a9ee8bfebdbd667390fecc9a
----------------------------
Adjust Windows autovacuum service to retry for up to 5 minutes waiting for the postmaster to start.  Dave Page 	b0e3dd7e61a3af1ba23ed9e11bed452331cf50bf
----------------------------
On Windows, set the postmaster executable's stack size to 4MB, so that it agrees with the default value of max_stack_depth. 	bf7737a938827608ce79586efe55c642c1a4a7d3
----------------------------
pg_autovacuum fixes from Dave Page: - Dependency services may not be correctly registered when installing as a Windows Service. - The sleep time is changed from milliseconds to seconds as it should be. - Error messages during service installation/removal are logged to stderr. 	e02e0564f186e96985ee5f1f603740cfdf46e3bc
----------------------------
"This patch updates the regression tests to allow ""make installcheck"" to pass if ""default_with_oids"" is set to false. I took the approach of explicitly adding WITH OIDS to the CREATE TABLEs where necessary, rather than tweaking the default_with_oids GUC var. "	5df3fc67a7d3cf7f24bbe71807c11611b5851633
----------------------------
Stamp 8.1 in configure. 	4b2b6930ade5939d187cce6b011a79c6917b7079
----------------------------
postgres -boot would print the wrong program name in event of a failure in SelectConfigFiles().  Cosmetic issue, but ... 	9fa1843454c150011e1fc509ced738cb9e6be80e
----------------------------
Change Win32 client configuration files from *.txt to *.conf. 	29e58330a60d6ba1823152ac0bbea18e0d2e9572
----------------------------
Adjust src/tutorial Makefile so that it can use pgxs.  This allows the tutorial to be used without necessarily having a configured source tree. 	3810c23fe496b4dfdfc52efafcffb82d9a8d3714
----------------------------
Ensure that the test postmaster started by 'make check' listens to as few 'listen_addresses' as possible --- on most systems, none at all, just the Unix socket.  This avoids spurious check failures due to bogus DNS setups, and is probably a good idea from a security standpoint anyway. Per trouble report from Jean-GÅrard Pailloncy. 	6bb51348b00c81243cf3532cf4ca97f728e3ffe8
----------------------------
interval_out failed to mention 'ago' for negative intervals in SQL and GERMAN datestyles.  Ancient bug reported by Terry Lee Tucker. 	d3d00715e21c6ced9fc833d791250a251bc455e1
----------------------------
Improve comments in sample config files. 	3b5152cac61610b0333057482f0f88c9d8d7d67d
----------------------------
Make pg_dump --oids work when default_with_oids = off.  Per report from Michael Fuhr. 	d877de9e6bd1fb6f9b1590ca0e6ce35b61077d6e
----------------------------
forgot to autoconf after tag'ng configure.in with rc3 	5e05d2bcdb2ccf5e3e48589c72f4565e0665613f
----------------------------
Remove 'optimization' to skip resolve_symlinks() when the found executable file isn't itself a symlink.  We still need to run the algorithm so that any directory symlinks in the path to the executable are replaced by a true path.  Noticed this on seeing pg_config give me a completely wrong answer for --pkglibdir when I called it through a symlink to the installation bindir. 	f0c08ae7c95bf71cabcae351825b58e528a68b77
----------------------------
Remove direct inclusions of <com_err.h> as well as configure test for its presence.  This amounts to desupporting Kerberos 5 releases 1.0.*, which is small loss, and simplifies use of our Kerberos code on platforms with Red-Hat-style include file layouts.  Per gripe from John Gray and followup discussion. 	da59a70c094d6a39a19ca75ade38ef06a71b6c64
----------------------------
Fix is-it-time-for-a-checkpoint logic so that checkpoint_segments can usefully be larger than 255.  Per gripe from Simon Riggs. 	ff5a354ece8ca67b2f3f0e3c67da56735e18ddf0
----------------------------
Update release changes list to mention pg_config.h.win32. 	ccac38ffb4e683a717ef6db7dbd356c05d06447b
----------------------------
Cause configure --with-tcl to check for presence of <tcl.h>, as per gripe from John Gray.  Also fix thinko in pltcl Makefile: if a special Tcl include directory is specified, that ought to be searched first. 	8ec96083260ddba4b0f84d2a81e08b2baad18200
----------------------------
Allow AIX to use --enable-thread-safety by passing PTHREAD_LIBS to binary compiles, and adjust configure tests for AIX. 	b5498167d7569875cb91ae0cf06a649d3f9f41a6
----------------------------
"Remove: < 	o Allow the shared memory address to be configured via GUC "	3ff0418293fac7ed6eff21fe032dbb71e70c8d6b
----------------------------
"Done: < 	o Remove per-backend parameter file and move into shared memory Add for Win32: > 	o Allow the shared memory address to be configured via GUC "	cc4f22c167f261dd20c53911b09f2b0cc069404d
----------------------------
tag configure for rc1 .. 	f51964fa76763f61f022512bdc044e9c9a4346bf
----------------------------
> > 8.0beta3 has pg_autovacuum included, when I want to run this as a > > Windows service, it says you can use the -I and -R options. > > > > When I do that and I specify a password with '-P' > (uppercase) then in > > the registry it's saved as '-p' (lowercase) in the > service-commandline > > (ImagePath). This was fixed in v1.21 of pg_autovacuum.c, That rev is tagged for beta3, so you should not be seeing this issue unless you actually have an older version for some reason. http://developer.postgresql.org/cvsweb.cgi/pgsql/contrib/pg_autovacuum/p g_autovacuum.c.diff?r1=1.20;r2=1.21;f=h > > Also it removes the quotes I added and I'm not so sure it > would work > > the way it's supposed to, without it. It's not so much that it strips them (that happens automagically), more that it doesn't re-add them when it writes the command line in the registry. The attached patch fixes that by simply quoting all options that may need it. > > If you add DependOnService (a REG_MULTI_SZ an > array-like-thingie) and > > have the name (in this case: pgsql-8.0-beta2-dev3) of a service it > > depends on, it will not fail to start (it will not even try, as > > PostgreSQL is not running), when PostgreSQL already failed. > > > > Maybe it's an idea to specify it on the commandline (what > service to > > depend on). A -E <service> option is added in the attached patch. Dave Page 	9269699b9d232f26765274d2dc99807307cbcf70
----------------------------
Prevent pg_autovacuum -D from needing an argument. Kenneth Marshall 	e8d46bcd449b3a689e42721b4f75bc187d68401a
----------------------------
Don't bother adding to cflags/cppflags, just set them because configure handles that, and make solaris debug use no optimization. 	f7bae20d675786790725f77ddc3486f7c5a047ea
----------------------------
Removed: < * Make log_min_duration_statement output when the duration is reached rather <   than when the statement completes < <   This prints long queries while they are running, making trouble shooting <   easier.  Also, it eliminates the need for log_statement because it <   would now be the same as a log_min_duration_statement of zero. 	8b9a9c9a68436066c3f7c88bd0000854dd093e26
----------------------------
Add: > * Make log_min_duration_statement output when the duration is reached rather >   than when the statement completes > >   This prints long queries while they are running, making trouble shooting >   easier.  Also, it eliminates the need for log_statement because it >   would now be the same as a log_min_duration_statement of zero. 	ff5b6c98bf85b8784eb4c124e1cac82aa18a251f
----------------------------
A client_encoding specification coming from the connection request has to be processed by GUC before InitPostgres, because any required lookup of the encoding conversion function has to be done during InitializeClientEncoding. So, I broke this last week by moving GUC processing to after InitPostgres :-(. What we can do as a compromise is process non-SUSET variables during command line scanning (the same as before), and postpone the processing of only SUSET variables.  None of the SUSET variables need to be set before InitPostgres. 	cf796cc702a879947fd6d1290e25250fe0b37d69
----------------------------
Fix up makefile dependencies for pg_config_paths.h. 	a34d76ef65b39bd18353a2c07ae8d4651cdb5403
----------------------------
Move pgstat_report_tabstat() call so that stats are not reported to the collector until the transaction commits.  Per recent discussion, this should avoid confusing autovacuum when an updating transaction runs for a long time. 	8a7025f0bb9a9ad15c6dc27979a3c9f4116bca2a
----------------------------
Rename vacuum_cost_limit switch from -N to -l to avoid conflict with existing Windows-only switch. 	c87ddbafe434479c48e368e530b34560324d2520
----------------------------
Add options to pg_autovacuum to support setting the cost-based-vacuum parameters differently from their default values.  Matthew T. O'Connor 	c47fc6d0506ed14a278596c5756e0d0e29f1ca7c
----------------------------
Don't allow pg_start_backup() to be invoked if archive_command has not been defined. Patch from Gavin Sherry, editorializing by Neil Conway. 	b25d23e1e60429f960d4e0ca951d87c1ffe737cb
----------------------------
Add index entries for all GUC configuration parameters. 	23185085b979263449ad903c62e382e532d2d593
----------------------------
Un-break custom_variable_classes kluge ... mea culpa. 	664f93ce18c43d116d698e58683bcce9e96f006b
----------------------------
"Cleaups: < * Allow GRANT/REVOKE permissions to be given to all schema objects with one > * Allow GRANT/REVOKE permissions to be applied to all schema objects with one 60c60 <   specifications.  This is because new databases are created by copying >   specifications.  This is because new databases are created by copying 63c63 <   directory would create a new database with tables that had incorrect >   directory would create a new database with tables that had incorrect 72c72 < > 85c85 <   By not showing commented-out variables, we discourage people from >   By not showing commented-out variables, we discourage people from 91c91 < * Allow point-in-time recovery to archive partially filled write-ahead > * Allow point-in-time recovery to archive partially filled write-ahead 102c102 <   Currently all schemas are owned by the super-user because they are >   Currently all schemas are owned by the super-user because they are 128c128 < * Allow INET subnet tests with non-constants to be indexed > * Allow INET subnet tests using non-constants to be indexed 143,144c143,144 < * Allow to_char to print localized month names < * Allow functions to have a search path specified at creation time > * Allow to_char() to print localized month names > * Allow functions to have a schema search path specified at creation time 146c146 < * Add GUC variable to allow output of interval values in ISO8601 format > * Add a GUC variable to allow output of interval values in ISO8601 format 154,155c154,155 < * Prevent inet cast to cidr if the unmasked bits are not zero, or <   zero bits > * Prevent INET cast to CIDR if the unmasked bits are not zero, or >   zero the bits 158c158 < 	o Allow nulls in arrays > 	o Allow NULLs in arrays 160,161c160,161 < 	o Delay resolution of array expression type so assignment coercion < 	  can be performed on empty array expressions > 	o Delay resolution of array expression's data type so assignment > 	  coercion can be performed on empty array expressions 218,219c218,219 <   key, foreign key  [inheritance] < * UNIQUE INDEX on base column not honored on inserts/updates from >   key, foreign key > * UNIQUE INDEX on base column not honored on INSERTs/UPDATEs from 221c221 <   (dup) should fail [inheritance] >   (dup) should fail 246c246 < * Fetch heap pages matching index entries in sequential order [performance] > * Fetch heap pages matching index entries in sequential order 307c307 <   functionality in DELETE.  It's been agreed that the keyword should >   functionality in DELETE.  It's been agreed that the keyword should 318c318 < * Allow PREPARE to automatically determine parameter types based on the SQL > * Allow PREPARE to automatically determine parameter types based on the SQL 340,342d339 < * Allow CREATE TABLE foo (f1 INT CHECK (f1 > 0) CHECK (f1 < 10)) to work <   by searching for non-conflicting constraint names, and prefix with <   table name? 347c344 <   new database. >   a new database. 350,351d346 < * Ignore temporary tables from other sessions when processing <   inheritance? 354,355c349,351 < * Add a session mode to warn about non-standard SQL usage in queries < * Add MERGE command that does UPDATE/DELETE, or on failure, INSERT (rules, triggers?) > * Add a GUC variable to warn about non-standard SQL usage in queries > * Add MERGE command that does UPDATE/DELETE, or on failure, INSERT (rules, >   triggers?) 357,359c353,356 < * Add NOVICE output level for helpful messages like automatic sequence/index creation < * Add COMMENT ON for all cluster global objects (users, groups, <   databases and tablespaces) > * Add NOVICE output level for helpful messages like automatic sequence/index >   creation > * Add COMMENT ON for all cluster global objects (users, groups, databases >   and tablespaces) 363c360 <   When enabled, this would allow errors in multi-statement transactions >   When enabled, this would allow errors in multi-statement transactions 417c414 < 	o Allow COPY to optionally include column headings as the first line > 	o Allow COPY to optionally include column headings in the first line 450c447 < > 462c459 < 	o Handle references to temporary tables that are created, destroyed, > 	o Handle references to temporary tables that are created, destroyed, 464c461 < > 469d465 < 	o Improve PL/PgSQL exception handling using savepoints 488c484 < > 503d498 < 518c513 < 	o Add pg_dumpall custom format dumps. > 	o Add pg_dumpall custom format dumps. 520c515 < 	  This is probably best done by combining pg_dump and pg_dumpall > 	  This is probably best done by combining pg_dump and pg_dumpall 532d526 < 	o Improve error handling (?) 555c549 <   Adding shared locks requires recording the table/rows numbers in a >   Adding shared locks requires recording the table/rows numbers in a 643c637 <   Posix_fadvise() can control both sequential/random file caching and >   Posix_fadvise() can control both sequential/random file caching and 703c697 <   from distributted.net, http://www1.distributed.net/source, >   from distributted.net, http://www1.distributed.net/source, 729c723 < * Add connection pooling [pool] > * Add connection pooling 755d748 < 759c752 < > 768c761 <   so an abrupt operating system restart might lose a few seconds of >   so an abrupt operating system restart might lose a few seconds of 785c778 < * Add utility to compute accurate random_page_cost value > * Create utility to compute accurate random_page_cost value 787,789d779 < * Allow sorting, temp files, temp tables to use multiple work directories < <   This allows the I/O load to be spread across multiple disk drives. 795a786 > 808,809c799,800 < < * Use mmap() rather than SYSV shared memory or to write WAL files (?) [mmap] > > * Use mmap() rather than SYSV shared memory or to write WAL files (?) 812,813c803,804 <   portability issues. Anonymous mmap (or mmap to /dev/zero) is required <   to prevent I/O overhead. >   portability issues. Anonymous mmap (or mmap to /dev/zero) is required >   to prevent I/O overhead. 817,819c808,810 <   Doing I/O to large tables would consume a lot of address space or <   require frequent mapping/unmapping.  Extending the file also causes <   mapping problems that might require mapping only individual pages, >   Doing I/O to large tables would consume a lot of address space or >   require frequent mapping/unmapping.  Extending the file also causes >   mapping problems that might require mapping only individual pages, 821c812 <   way to _prevent_ I/O to disk from the dirty shared buffers so changes >   way to _prevent_ I/O to disk from the dirty shared buffers so changes 826c817 <   tuple overhead >   per-tuple overhead 829,831c820,822 <   This would involve using multiple threads or processes to do optimization, <   sorting, or execution of single query.  The major advantage of such a <   feature would be to allow multiple CPUs to work together to process a >   This would involve using multiple threads or processes to do optimization, >   sorting, or execution of single query.  The major advantage of such a >   feature would be to allow multiple CPUs to work together to process a 834c825 < * Research the use of larger pages sizes > * Research the use of larger page sizes 842a834 > * Move some /contrib modules out to their own project sites 845d836 < * Improve access-permissions check on data directory in Cygwin (Tom) 847,848c838 < * Clarify use of 'application' and 'command' tags in SGML docs < * Better document ability to build only certain interfaces (Marc) > * Improve documentation to build only interfaces (Marc) 852,853d841 < * Research interaction of setitimer() and sleep() used by statement_timeout < * Rename /scripts directory because they are all C programs now 856,857d843 < * Allow binaries to be statically linked so they are more easily relocated < * Move some /contrib modules out to their own project sites 862c848 < 	o Remove per-backend parameter file and move into shared memory? > 	o Remove per-backend parameter file and move into shared memory 877,878c863,864 < 	o Update clients to use data types, typmod, schema.table.column names of < 	  result sets using new query protocol > 	o Update clients to use data types, typmod, schema.table.column names > 	  of result sets using new query protocol 900d885 < * Kris is Kris Jurka 910c895 < * Simon is Simon Riggs > * Simon is Simon Riggs <simon@2ndquadrant.com> 913d897 < * Teodor is "	6cd67c931a5cdd1a058031c0d02fc3199fafe2a9
----------------------------
Recommend that archive_command be coded to not overwrite existing files. Add explicit documentation of the recovery configuration settings.  Other minor improvements in the PITR docs.  Simon Riggs, some editorialization by Tom Lane. 	cd6ecf6829e813c91dd38eeafefb647775cb2314
----------------------------
Update pg_dump to use SET DEFAULT_TABLESPACE instead of explicit tablespace clauses; this should improve compatibility of dump files. Philip Warner, some rework by Tom Lane. 	04baa0ebf95652d8fa4a7cc62b621ade0aa6d5f4
----------------------------
Create 'default_tablespace' GUC variable that supplies a TABLESPACE clause implicitly whenever one is not given explicitly.  Remove concept of a schema having an associated tablespace, and simplify the rules for selecting a default tablespace for a table or index.  It's now just (a) explicit TABLESPACE clause; (b) default_tablespace if that's not an empty string; (c) database's default.  This will allow pg_dump to use SET commands instead of tablespace clauses to determine object locations (but I didn't actually make it do so).  All per recent discussions. 	98e8b4805324d8ba0b196b8ffaafd5ddd3051ea1
----------------------------
Contrib build fixes: - add some additional files to the dbmirror install (approved by ssinger) - add a makefile for contrib/mysql, and add mysql to the list of contribs build by default - use xml2-config to pickup -I flags for libxml2 in contrib/xml and contrib/xml2 Original work from Martin Pitt of Debian, minor cleanups by Neil Conway. 	8f012ac89b227dc5b966d81bbbcb59adda76b367
----------------------------
make sure we tag configure.in as beta4 as well ... 	346aff04be3311cefc0570022f86d43622d85f5e
----------------------------
Write config files as text not binary, per Magnus Hagander. 	85b2facdd846917c2b15e396c7056ffead58bbff
----------------------------
Avoid overflow in cost_sort when work_mem exceeds 1Gb. 	529db99c6e561bcd1cda2da95e838af30bad03b8
----------------------------
Don't use LC_MESSAGES value on WIN32, since it doesn't work. Magnus Hagander 	521408a56f29d3331ca4b29660be339a5135044e
----------------------------
Add a GUC_SUPERUSER_ONLY flag to mark GUC variables that should not be examinable by non-superusers, and use it to protect the recently-added GUC variables for data directory and config files.  For now I have only flagged those variables that could be used to deduce something about the server's filesystem layout, but possibly we should also mark vars related to logging settings and other admin-only information? 	9e83d73b6cf1e4280d438fb172b8b9c9233a656b
----------------------------
New swedish translation of pg_config 	f4eb44027910da50541a44a7231354f8c97e199c
----------------------------
"Prevent pg_ctl from being run as root.  Since it uses configuration files owned by postgres, doing ""pg_ctl start"" as root could allow a privilege escalation attack, as pointed out by iDEFENSE.  Of course the postmaster would fail, but we ought to fail a little sooner to protect sysadmins unfamiliar with Postgres.  The chosen fix is to disable root use of pg_ctl in all cases, just to be confident there are no other holes. "	c58675b42886f7aa1d8871d4917d512c477ca402
----------------------------
"Improve indentation of sublists: < 	The proper solution to this will probably the use of a master/slave < 	replication solution like Sloney and a connection pooling tool like < 	pgpool. > 	  The proper solution to this will probably the use of a master/slave > 	  replication solution like Sloney and a connection pooling tool like > 	  pgpool. 114,116c114,116 < 	You can use any of the master/slave replication servers to use a < 	standby server for data warehousing. To allow read/write queries to < 	multiple servers, you need multi-master replication like pgcluster. > 	  You can use any of the master/slave replication servers to use a > 	  standby server for data warehousing. To allow read/write queries to > 	  multiple servers, you need multi-master replication like pgcluster. 166,167c166,167 < 	Currently large objects entries do not have owners. Permissions can < 	only be set at the pg_largeobject table level. > 	  Currently large objects entries do not have owners. Permissions can > 	  only be set at the pg_largeobject table level. 173c173 < 	This requires the TOAST column to be stored EXTERNAL. > 	  This requires the TOAST column to be stored EXTERNAL. 359,360c359,360 < 	One complexity is whether moving a schema should move all existing < 	schema objects or just define the location for future object creation. > 	  One complexity is whether moving a schema should move all existing > 	  schema objects or just define the location for future object creation. 364,365c364,365 < 	Currently non-global system tables must be in the default database < 	schema. Global system tables can never be moved. > 	  Currently non-global system tables must be in the default database > 	  schema. Global system tables can never be moved. 371,375c371,375 < 	This might require some background daemon to maintain clustering < 	during periods of low usage. It might also require tables to be only < 	paritally filled for easier reorganization.  Another idea would <         be to create a merged heap/index data file so an index lookup would < 	automatically access the heap data too. > 	  This might require some background daemon to maintain clustering > 	  during periods of low usage. It might also require tables to be only > 	  paritally filled for easier reorganization.  Another idea would >           be to create a merged heap/index data file so an index lookup would > 	  automatically access the heap data too. 379,380c379,380 < 	To do this, determine the ideal cluster index for each system < 	table and set the cluster setting during initdb. > 	  To do this, determine the ideal cluster index for each system > 	  table and set the cluster setting during initdb. 385,386c385,386 < 	This requires the use of a savepoint before each COPY line is < 	processed, with ROLLBACK on COPY failure. > 	  This requires the use of a savepoint before each COPY line is > 	  processed, with ROLLBACK on COPY failure. 395,398c395,398 < 	This requires using the row ctid to map cursor rows back to the < 	original heap row. This become more complicated if WITH HOLD cursors < 	are to be supported because WITH HOLD cursors have a copy of the row < 	and no FOR UPDATE lock. > 	  This requires using the row ctid to map cursor rows back to the > 	  original heap row. This become more complicated if WITH HOLD cursors > 	  are to be supported because WITH HOLD cursors have a copy of the row > 	  and no FOR UPDATE lock. 405,406c405,406 < 	Because WITH HOLD cursors exist outside transactions, this allows < 	them to be listed so they can be closed. > 	  Because WITH HOLD cursors exist outside transactions, this allows > 	  them to be listed so they can be closed. 413,415c413,415 < 	This is useful for returning the auto-generated key for an INSERT. < 	One complication is how to handle rules that run as part of < 	the insert. > 	  This is useful for returning the auto-generated key for an INSERT. > 	  One complication is how to handle rules that run as part of > 	  the insert. 422c422 < 	This is basically the same as SET search_path. > 	  This is basically the same as SET search_path. 426,427c426,427 < 	This requires a checking function to be called after the server < 	configuration file is read. > 	  This requires a checking function to be called after the server > 	  configuration file is read. 432c432 < 	Currently only constants are supported. > 	  Currently only constants are supported. 438,439c438,439 < 	This requires the cached PL/PgSQL byte code to be invalidated when < 	an object referenced in the function is changed. > 	  This requires the cached PL/PgSQL byte code to be invalidated when > 	  an object referenced in the function is changed. 512,513c512,513 < 	Document differences between ecpg and the SQL standard and < 	information about the Informix-compatibility module. > 	  Document differences between ecpg and the SQL standard and > 	  information about the Informix-compatibility module. "	e444d9a9661db075953ed966215c5edd66140e81
----------------------------
Allow background writing to be shut down by setting limit values to zero. This does not disable the bgwriter process: it still has to wake up often enough to collect fsync requests from backends in a timely fashion.  But it responds to the recent gripe about not being able to prevent the disk from being spun up constantly. 	4347cc2392a75dec1d5e83f8b60911597fc602d9
----------------------------
"Make locale_messages_assign() really work on Windows; the prior hack only covered the case of assigning """", and failed to recognize that actually setlocale(LC_MESSAGES,...) does not work at all on this platform. Magnus Hagander, some code prettification by Tom Lane. "	fae7ce83fefdb5de44ca7f364e3258aea8699edc
----------------------------
Include dllist.c directly instead of assuming that libpq will provide it. Whack some semblance of project-conventions-conformance into pg_autovacuum.h. 	b3d58ea7ec6df499a46baa4327ea400746199fc5
----------------------------
Have log_duration only output when log_statement has printed the query. This handles the new multiple log_statement values. Ed L. 	a1ce88a59c05ac63c92f36c219f714e5552e9ba3
----------------------------
> This lets you do something like: > >    ./configure LDFLAGS=-static-libgcc LDFLAGS_SL=-static-libgcc > > to produce binaries that do not depend on libgcc_s.so at all. Oliver Jowett 	4d94e99b90c2353718b74beaebf5c852dcef9e09
----------------------------
"psql code cleanup: - refactor a bunch of code to call a separate function print_msg() which checks whether ""silent mode"" is enabled before printing an error message. - rename ""silence_mode"" to ""silent_mode"", which IMHO makes more sense - make the error messages we emit in ""waiting"" mode more consistent; I believe this fixes a recent error message regression "	8ff374ce91f386e61460866d8e51d996daaceccc
----------------------------
Add some pg_config_path.h dependencies for places that include pg_config_paths.h outside of /src/port. 	29e7dc420a693e8fc0a0b80bbf97cf738eac735e
----------------------------
Another try at making plpython autoconfiguration work correctly.  Use a -L spec rather than assuming libpython is in the standard search path (this returns to the way 7.4 did it).  But check the distutils output to see if it looks like Python has built a shared library, and if so link with that instead of the probably-not-shared library found in configdir. 	669ca7af831fb1bba21fdcb037b8e8a365534230
----------------------------
Adjust configuration-files GUC behavior as per my recent proposal. The vars are renamed to data_directory, config_file, hba_file, and ident_file, and are guaranteed to be set to accurate absolute paths during postmaster startup. This commit does not yet do anything about hiding path values from non-superusers. 	337ffcddbae15a3bde25b17dbb8a0832c597003f
----------------------------
Add win32 version information for pg_config Makefile. 	6c77feed3ac872cf7c32db23231efa11ede5e791
----------------------------
"Add: > 811a813,814 > 	o Re-enable timezone output on log_line_prefix '%t' when a > 	  shorter timezone string is available "	b3723aeb1fe8b08db91568c6bddaafaf90e58688
----------------------------
Suppress timezone output on log_line_prefix %t on Win32, because it is too long. 	abc1d28ba74cb0fcc75ab73a8b748c2e11f15d46
----------------------------
"Move Win32 TODO items to main TODO list: < > * Win32 > 	o Remove per-backend parameter file and move into shared memory? > 	o Remove configure.in check for link failure when cause is found > 	o Remove readdir() errno patch when runtime/mingwex/dirent.c rev > 	  1.4 is released > 	o Remove psql newline patch when we find out why mingw outputs an > 	  extra newline > 	o Allow psql to use readline once non-US code pages work with > 	  backslashes "	1c24bf9096cb086946d71ec13197420268ba3d26
----------------------------
Whack some sense into the configuration-file-location patch. Refactor code into something reasonably understandable, cause use of the feature to not fail in standalone backends or in EXEC_BACKEND case, fix sloppy guc.c table entries, make the documentation minimally usable. 	7ca3a0f3e28e9d89d390214f6be59d7c8e88d367
----------------------------
XOR process PID into a backend's initial random seed, to ensure that different backends get a reasonably wide set of initial seeds even if gettimeofday returns tv_usec values with only a few bits of precision. Per recent discussion. 	52a45818a13bc32156ada02554eef76e1124b618
----------------------------
This simple patch fixes a typo, ensure pg_config is removed in win32 and correct some splitted message mistake. Euler Taveira de Oliveira 	d7b7a4a648f591e39f528b83241ce18f1efd913b
----------------------------
"Fix error in setseed() docs: ""int32"" is not a (SQL) type, but ""integer"" is. "	3da69bd18c48f298068405be0748bb2ae7cd6359
----------------------------
"Remove completed items: < Last updated:		Sat Sep 25 21:33:44 EDT 2004 > Last updated:		Mon Sep 27 10:15:31 EDT 2004 13,19d12 < Remove items before beta? < < Urgent < ====== < < * -Point-in-time data recovery using backup and write-ahead log < * -Create native Win32 port 25d17 < * -Incremental backups 28d19 < * -Allow configuration files to be specified in a different directory 32,34d22 < * -Add the concept of dataspaces/tablespaces (Gavin) < * -Allow logging of only data definition(DDL), or DDL and modification statements < * -Allow log lines to include session-level information, like database and user 54d41 < * -Allow external interfaces to extend the GUC variable set 126d112 < * -Change factorial to return a numeric (Gavin) 141,142d126 < * -Allow pg_dump to dump sequences using NO_MAXVALUE and NO_MINVALUE < * -Prevent whole-row references from leaking memory, e.g. SELECT COUNT(tab.*) 147d130 < * -Make LENGTH() of CHAR() not count trailing spaces 150d132 < * -Support composite types as table columns 198,200d179 < * -Prevent mismatch of frontend/backend encodings from converting bytea <   data from being interpreted as encoded strings < * -Fix upper()/lower() to work for multibyte encodings 217d195 < * -Order duplicate index entries on creation by ctid for faster heap lookups 242d219 < * -Be smarter about insertion of already-ordered data into btree index 265,266d241 < * -Allow SELECT * FROM tab WHERE int2col = 4 to use int2col index, int8, <   float4, numeric/decimal too 282d256 < * -Allow command blocks to ignore certain types of errors 302,303d275 < * -Allow savepoints / nested transactions (Alvaro) < * -Use nested transactions to prevent syntax errors from aborting a transaction 306,307d277 < * -Prevent COMMENT ON DATABASE from using a database name < * -Add NO WAIT LOCKs 325,326d294 < * -COMMENT ON [ CAST | CONVERSION | OPERATOR CLASS | LARGE OBJECT | LANGUAGE ] <   (Christopher) 334d301 < * -Allow more ISOLATION LEVELS to be accepted 347d313 < * -Add GUC setting to make created tables default to WITHOUT OIDS 365,369d330 < 	o -ALTER TABLE ADD COLUMN does not honor DEFAULT and non-CHECK CONSTRAINT < 	o -ALTER TABLE ADD COLUMN column DEFAULT should fill existing < 	  rows with DEFAULT value < 	o -ALTER TABLE ADD COLUMN column SERIAL doesn't create sequence because <           of the item above 371,373d331 < 	o -Allow ALTER TABLE to modify column lengths and change to binary < 	  compatible types < 	o -Add ALTER DATABASE ... OWNER TO newowner 390,393d347 < 	o -Add ALTER DOMAIN, AGGREGATE, CONVERSION ... OWNER TO < 	o -Add ALTER SEQUENCE ... OWNER TO < 	o -Add ALTER INDEX that works just like ALTER TABLE already does < 	  on an index 404d357 < 	o -Add ALTER TABLE table SET WITHOUT CLUSTER (Christopher) 411d363 < 	o -Allow dump/load of CSV format 464d415 < 	o -Allow Java server-side programming 473d423 < 	o -Allow PL/pgSQL parameters to be specified by name and type during definition 493,495d442 < * -Allow psql \du to show users, and add \dg for groups < * -Have psql \dn show only visible temp schemas using current_schemas() < * -Have psql '\i ~/<tab><tab>' actually load files it displays from home dir 509,511d455 < 	o -Allow pg_dump to dump CREATE CONVERSION (Christopher) < 	o -Make pg_restore continue after errors, so it acts more like pg_dump < 	  scripts 545d488 < 	o -Implement SET DESCRIPTOR 592,596d534 < * -Have AFTER triggers execute after the appropriate SQL statement in a <   function, not at the end of the function < * -Print table names with constraint names in error messages, or make constraint <   names unique within a schema < * -Issue NOTICE if foreign key data requires costly test to match primary key 614,615d551 < * -Use dependency information to dump data in proper order < * -Have pg_dump -c clear the database using dependency information 694,695d629 < * -Provide automatic running of vacuum in the background in backend <   rather than in /contrib (Matthew) 828d761 < * -Use background process to write dirty shared buffers to disk 843d775 < * -Change representation of whole-tuple parameters to functions 850,852d781 < * -Add checks for fclose() failure (Tom) < * -Change CVS ID to PostgreSQL < * -Exit postmaster if postgresql.conf can not be opened "	08e9f6974c8640431bfd4dbc6c3cb08cc4597ae9
----------------------------
"This patch from Alvaro Herrera adds transaction ID to the list of log_line_prefix escapes. The escape sequence used for this is %x. %x previously meant ""postmaster et al. stop here"" -- this has been renamed to %q. "	a3c53c834f769b31052ac55d5fb939b7cc9a4ec1
----------------------------
Fix some shortcomings in psql's autocommit-off mode concerning detection of commands for which a transaction block should not be forced.  Recognize VACUUM and other PreventTransactionChain commands; handle nested /* .. */ comments correctly; handle multibyte encodings correctly. Michael Paesold with some kibitzing from Tom Lane. 	5b564e53070c60b3fecbd5c9b15e6a44d83b47e1
----------------------------
New config.guess and config.sub 	24cfc14019b4af3ee10c7042ef2206843d238910
----------------------------
Make discovery of python_configdir architecture independent. Solution from James William Pye. 	04d15d120cf09cb081e70f666be664dbe60e9d7f
----------------------------
RecentXmin is too recent to use as the cutoff point for accessing pg_subtrans --- what we need is the oldest xmin of any snapshot in use in the current top transaction.  Introduce a new variable TransactionXmin to play this role.  Fixes intermittent regression failure reported by Neil Conway. 	86fff990b2acdbbfaf4340636878313fe270c916
----------------------------
Fix some minor issues with the new Win32 service code for autovacuum, and add documentation.  Dave Page 	92244e8e545197485c0ac39ef223a524e5a1e366
----------------------------
Send thread test output to file descriptor 5 like configure does rather than /dev/null, which Win32 doesn't have. 	b85faa87b9a0961283ee55bad877ff0853c93dd8
----------------------------
Apply patch from Steven Singer for contrib/dbmirror. Changes: -It fixes up some bugs with handling setval calls -Adds upgrade instructions from prior versions -Improved the sample config file -Fixed some things in the clean_pending script 	87438cb90e77b2966223de6914e6285e4a8e0b33
----------------------------
Create pg_config_paths in port/ for win32 builds of psql. 	35e88b512e2518dbcb81f07af741e21d338f7237
----------------------------
Fix error in Windows version of CHECK_FOR_INTERRUPTS macro. This prevented statement_timeout from working. Magnus Hagander 	a1f7fb09756933369de462b729e81b14c0a3da99
----------------------------
Remove pg_config_paths.h from libpq *.mak builds so later MinGW builds will succeed. 	8cef6ae522f79e62b68837b0823e0c8833f0879e
----------------------------
Code review for recent changes in guc-file.l.  Avoid multiple frees, use of already-freed strings, other silliness.  Also fix reporting of config file syntax errors so that it actually works reasonably well (eg, points at the correct line).  Use palloc instead of malloc for temporary storage to reduce code clutter. 	1239a01a7248041df36893bbae6f7fff58c175a6
----------------------------
Code review for various recent GUC hacking.  Don't elog(ERROR) when not supposed to (fixes problem with postmaster aborting due to mistaken postgresql.conf change); don't call superuser() when not inside a transaction (fixes coredump when, eg, try to set log_statement from PGOPTIONS); some message style guidelines enforcement. 	c32416ebb748f9cc6ad4c0d3383d8593f151fa60
----------------------------
Replace log_filename_prefix with more general log_filename parameter, to allow DBA to choose the form in which log filenames reflect the current time.  Also allow for truncating instead of appending to pre-existing files --- this is convenient when the log filename pattern rewrites the same names cyclically.  Per Ed L. 	8c603f2c95e34f8c06994c0454779b76e7f6c012
----------------------------
tag configure beta2 	25aba1cafd733bfc9fc6128fc6d31db7c1e82b34
----------------------------
Add Win32 service capability to pg_autovacuum. Dave Page 	3afd7eaffde77fd2af69f8f6512056956fd27a85
----------------------------
Rearrange pg_subtrans handling as per recent discussion.  pg_subtrans updates are no longer WAL-logged nor even fsync'd; we do not need to, since after a crash no old pg_subtrans data is needed again.  We truncate pg_subtrans to RecentGlobalXmin at each checkpoint.  slru.c's API is refactored a little bit to separate out the necessary decisions. 	4dbb880d3c77a580ef9634b93af26eaf64484ddb
----------------------------
Add mention of environment variable conflict with uncommenting config file variables: <   Another option is to allow commented values to return to their <   default values. >   This has to address environment variables that are then overridden >   by config file values.  Another option is to allow commented values >   to return to their default values. 	fcc5b95e0fb54e046a590c7c2727b490fd682f9d
----------------------------
Mark server_encoding and integer_datetimes as GUC_REPORT, per previous proposals by Oliver Jowett.  Update documentation. 	e617fe729d5ca625a58919c09d8117713ae6d51d
----------------------------
Add: > > * Allow buffered WAL writes and fsync > >   Instead of guaranteeing recovery of all committed transactions, this >   would provide improved performance by delaying WAL writes and fsync >   so an abrupt operating system restart might lose a few seconds of >   committed transactions but still be consistent.  We could perhaps >   remove the 'fsync' parameter (which results in an an inconsistent >   database) in favor of this capability. 	0e0793a71a76e9d2ba4033f942a1f01409383312
----------------------------
Mention log_statement_stats can not be enabled with the other options. 	146b0006514d989fe37326dc49bffae3cbfd1617
----------------------------
Be more aggressive about adding flags to thread compiles.  The configure test only tests for building a binary, not building a shared library. On Linux, you can build a binary with -pthread, but you can't build a binary that uses a threaded shared library unless you also use -pthread when building the binary, or adding -lpthread to the shared library build.  This patch has the effect of doing the later by adding both -pthread and -lpthread when building libpq. 	e48322a6d6cfce1ec52ab303441df329ddbc04d1
----------------------------
Avoid crashing when restoring a saved GUC session_authorization value that refers to a now-deleted userid.  Per gripe from Chris Ochs. 	aff700a16079b7f418f7557312eb281249c0e534
----------------------------
When expanding %p in archive_command or restore_command, translate slashes to backslashes #ifdef WIN32.  This is to cope with the fact that Windows seems exceedingly unfriendly to slashes in shell commands, as per recent discussion. 	35f539b481b5524bd331cb7b75df848da51b43e5
----------------------------
tag her configure 8.0.0beta1 ... 	708de8136b8394d23d349eeb40f76f87ff1c54b0
----------------------------
Make listen_addresses be a comma-separated list instead of a space-separated list.  More consistent with our other list-containing GUC variables. 	33bf242a8a30a5294b3aa8034d71e6a49be5320c
----------------------------
Rename vacuum_cost_naptime to vacuum_cost_delay, with agreement from Jan. 	0307c09cf5ef1056e74d9e3b3e9682410aa25bc6
----------------------------
Create a built-in log rotation program, so that we no longer have to recommend that people go get Apache's rotatelogs program.  Additional benefits are that configuration is done through GUC, rather than externally, and that the postmaster can monitor the log rotator and restart it after failure (though we certainly hope that won't happen often). Andreas Pflug, some rework by Tom Lane. 	bdf8ef6925de6ea1a9330fa1ce32e1a315d07eb2
----------------------------
Readd pg_config --pgxs code. 	e3b8530cc39b5114bd6a22c1c10418a5040b3773
----------------------------
Small pg_config.c cleanup. 	b6a40d895ee22951110044dba73b88226f18ebef
----------------------------
Create a C version of pg_config. Andrew Dunstan 	cc07f8cfe73f56fce1ddda4ea25d7b0b6c4f0ae9
----------------------------
>OK, if you look at the last few commits to interfaces/libpq/win32.mak, >you will see changes for pg_config_paths.h and for thread safety.  Can >you look at those changes, merge them into bcc.mak.  There might be >other changes in there you want to add to bcc.mak too. > > > OK, having no M$ diff, I attach files src\interfaces\libpq\bcc32.mak and src\interfaces\libpq\win32.h Steve Holdoway 	d2b7f511da04207c282a972e1b49f27fe5b4c233
----------------------------
Add: > * Allow server logs to be read using SQL commands > * Allow server configuration parameters to be modified remotetly 	e57243ea7e4a93ef80546ff79f9499028199fdff
----------------------------
log_destination should only be PGC_SIGHUP, not PGC_POSTMASTER, as per discussion yesterday.  Also a few improvements in the associated documentation. 	0655b26282466be8cb0ffbef4f5c825f889acf4a
----------------------------
Add cross-check that current timeline of pg_control is an ancestor of recovery_target_timeline --- otherwise there is no path from the backup to the requested timeline.  This check was foreseen in the original discussion but I forgot to implement it. 	acd907bfccafdf4bc1ef9e2beed8d69278de640a
----------------------------
Back out pg_autovacuum commit after cvs clean failure causes commit. 	7a55ba76151db6baf8760e035468f95b77b73153
----------------------------
Suppress readline usage in mingw in configure. 	b8a89da230caa2fcccd83e729074a19d1883bfff
----------------------------
"Here is another patch that fixes a stack of pg_dump bugs: * Fix help text ordering * Add back --set-session-authorization to pg_dumpall.  Updated the docs for that.  Updated help for that. * Dump ALTER USER commands for the cluster owner (""pgsql"").  These are dumped AFTER the create user and create database commands in case the permissions to do these have been revoked. * Dump ALTER OWNER for public schema (because it's possible to change it).  This was done by adding TOC entries for the public schema, and filtering them out at archiver time.  I also save the owner in the TOC entry just for the public schema. * Suppress dumping single quotes around schema_path and DateStyle options when they are set using ALTER USER or ALTER DATABASE.  Added a comment to the steps in guc.c to remind people to update that list. * Fix dumping in --clean mode against a pre-7.3 server.  It just sets all drop statements to assume the public schema, allowing it to restore without error. * Cleaned up text output.  eg. Don't output -- Tablespaces comment if there are none.  Same for groups and users. * Make the commands to DELETE FROM pg_shadow and DELETE FROM pg_group only be output when -c mode is enabled.  I'm not sure why that hasn't been done before?!?! This should be good for application asap, after which I will start on regression dumping 7.0-7.4 databases. Christopher Kings-Lynne "	45995219a015b841d48dff2b3920b03edcd35d06
----------------------------
Done: > * -Allow configuration files to be specified in a different directory 	8459b2d47243807e4ee651d6cb35af12976c777e
----------------------------
"Here is a patch required to build plperl with win32. The issues were: * perl_useshrplib gets set to ""yes"" and not to ""true"". I assume it's set to ""true"" on unix, so I left both. * Need to translate backslashes into slashes * The linker config coming out of perl was for MSVC and not for mingw Magnus Hagander "	f4c069ca8fc80640bd1bff510697371ffaf45267
----------------------------
Remove postgresql.conf of 'info' as a valid client_min_messages level. 	5ff9566686816c4052b4cddbbd18f612ff89af61
----------------------------
Add: > *  Add an option to sync() before fsync()'ing checkpoint files 	e5ca4bde793ec2414daa5ba26fbfb6bb895e5448
----------------------------
Allow configuration files to be placed outside the data directory. Add new postgresql.conf variables to point to data, pg_hba.conf, and pg_ident.conf files. Needs more documentation. 	130f89e93f59cdb4b160cbc31e6929de25d13794
----------------------------
Fix unchecked mallocs/strdups added by recent placeholder-config-vars patch. Thomas Hallgren 	ab50ed8f57feb0f2fff30497115dbcc65175ed3a
----------------------------
Code review for recently-added network functions.  Get it to work when log_hostname is enabled, clean up documentation. 	ba0f9ff3bac5205687f172d9e9a846b42ce34d3d
----------------------------
">> It certainly doesn't. There still was a bug with the locale stuff, >> though - the GUC variable was not set in the child >processes. So ""show >> lc_collate"" would *always* return ""C"", for example. attached >patch fixes >> this. > >Hm.  Why were these vars not propagated by the regular >mechanism for GUC >variables (write_nondefault_variables or whatever it's called)?  If the >problem is that it's not accepting PGC_INTERNAL values, then we need to >fix it there not here, because otherwise we'll have to pass all the >PGC_INTERNAL variables through the backend_variables file, which seems >like a recipe for more of the same sort of bug. Good point :-( I think the problem is not only that it specifically does not deal with PGC_INTERNAL variables. The problem is in the fact that write_nondefault_variables is called *before* the locale is read (because the locale is read from pg_control and not from any of the ""usual"" ways to read it). Attached patch is another stab at fixing it. It makes postmaster dump a new copy of the file once it has started the database (before it accepts any connections), which is when it will know about these parameters. Also updates the reading code to set the context to the one where the variable was originally set (PGC_POSTMASTER won't work for PGC_INTERNAL, and the other way around). We still pass lc_collate through the special file, because set_config_option on lc_collate will speficially *not* call setlocale(), and we need that call. But we no longer call set_config_option from there. Magnus Hagander "	3a8cdf33aa4a492f58d60c859c11a2c0e199023d
----------------------------
"Attached is a patch that takes care of the PATHSEP issue. I made a more extensive change then what was suggested. I found the file path.c that contained a lot of ""Unix/Windows"" agnostic functions so I added a function there instead and removed the PATHSEP declaration in exec.c altogether. All to keep things from scattering all over the code. I also took the liberty of changing the name of the functions ""first_path_sep"" and ""last_path_sep"". Where I come from (and I'm apparently not alone given the former macro name PATHSEP), they should be called ""first_dir_sep"" and ""last_dir_sep"". The new function I introduced, that actually finds path separators, is now the ""first_path_sep"". The patch contains changes on all affected places of course. I also changed the documentation on dynamic_library_path to reflect the chagnes. Thomas Hallgren "	6cc4175b256cfc87411f9e704f9a34cf54f6b256
----------------------------
Adjust cost_nonsequential_access() to have more reasonable behavior when random_page_cost has a small value.  Per Manfred Koizar, though I didn't use his equation exactly. 	3485cc3a7c33f1b6f0ed3bf3dadc46b2501b8995
----------------------------
Fix strerror_r by checking return type from configure. 	a63d2168e900bba799a9baed3b24c7cf171e3e9d
----------------------------
The attached patch will create a dummy pg_config_paths.h. Additionally, ENABLE_THREAD_SAFETY is supported by the makefile (but not by the sources, which need some rework) Andreas Pflug 	af44cac6ef46e225ae963c5e1f9e2e91a0112e04
----------------------------
Adjust btree index build to not use shared buffers, thereby avoiding the locking conflict against concurrent CHECKPOINT that was discussed a few weeks ago.  Also, if not using WAL archiving (which is always true ATM but won't be if PITR makes it into this release), there's no need to WAL-log the index build process; it's sufficient to force-fsync the completed index before commit.  This seems to gain about a factor of 2 in my tests, which is consistent with writing half as much data.  I did not try it with WAL on a separate drive though --- probably the gain would be a lot less in that scenario. 	2095206de13b3fc9643cac7eef8c0f51b56cb556
----------------------------
Additional mop-up for sync-to-fsync changes: avoid issuing fsyncs for temp tables, and avoid WAL-logging truncations of temp tables.  Do issue fsync on truncated files (not sure this is necessary but it seems like a good idea). 	91d20ff7aa4c61e570cf652bb3a48fd18fcf9d9d
----------------------------
Per previous discussions, get rid of use of sync(2) in favor of explicitly fsync'ing every (non-temp) file we have written since the last checkpoint.  In the vast majority of cases, the burden of the fsyncs should fall on the bgwriter process not on backends.  (To this end, we assume that an fsync issued by the bgwriter will force out blocks written to the same file by other processes using other file descriptors.  Anyone have a problem with that?)  This makes the world safe for WIN32, which ain't even got sync(2), and really makes the world safe for Unixen as well, because sync(2) never had the semantics we need: it offers no way to wait for the requested I/O to finish. Along the way, fix a bug I recently introduced in xlog recovery: file truncation replay failed to clear bufmgr buffers for the dropped blocks, which could result in 'PANIC:  heap_delete_redo: no block' later on in xlog replay. 	9b178555fc1f5087c120ff4d26380395bc655a03
----------------------------
Remove quotes around $CONFIG_LINKS.  Caused improper expansion. 	f54b95655e1b920820e10377fc955b957439198a
----------------------------
"On WIN32, don't choke when setlocale(LC_MESSAGES, """") returns NULL. Per report from Magnus. "	d7013b0f158322e74f6d1cab3e84f0d1494aa4b3
----------------------------
AIX doc addition: > FWIW, the section on configuring kernel resources under various > Unixen[1] doesn't have any documentation for AIX. If someone out there > knows which knobs need to be tweaked, would they mind sending in a doc > patch? (Or just specifying what needs to be done, and I'll add the > SGML.) After verifying that nobody wound up messing with the kernel parameters, here's a docs patch... Chris Browne 	ffef9b8c50174c2af19dae914e25c62d0cd529d6
----------------------------
Fix problems in pg_autovacuum: 1) temp table crash 2) Check send_query() function call return value. Backpatch to 7.4.X. 	b5cf1b6a21903f757db153bf07bef999a9ea21b3
----------------------------
"*) inet_(client|server)_(addr|port)() and necessary documentation for the four functions. > Also, please justify the temp-related changes.  I was not aware that we > had any breakage there. patch-tmp-schema.txt contains the following bits: *) Changes pg_namespace_aclmask() so that the superuser is always able to create objects in the temp namespace. *) Changes pg_namespace_aclmask() so that if this is a temp namespace, objects are only allowed to be created in the temp namespace if the user has TEMP privs on the database.  This encompasses all object creation, not just TEMP tables. *) InitTempTableNamespace() checks to see if the current user, not the session user, has access to create a temp namespace. The first two changes are necessary to support the third change.  Now it's possible to revoke all temp table privs from non-super users and limiting all creation of temp tables/schemas via a function that's executed with elevated privs (security definer).  Before this change, it was not possible to have a setuid function to create a temp table/schema if the session user had no TEMP privs. patch-area-path.txt contains: *) Can now determine the area of a closed path. patch-dfmgr.txt contains: *) Small tweak to add the library path that's being expanded. I was using $lib/foo.so and couldn't easily figure out what the error message, ""invalid macro name in dynamic library path"" meant without looking through the source code.  With the path in there, at least I know where to start looking in my config file. Sean Chittenden "	97d625dd1cf766e25815e1f6d5e5ee845f7b1030
----------------------------
"The patch adresses the TODO list item ""Allow external interfaces to extend the GUC variable set"". Plugin modules like the pl<lang> modules needs a way to declare configuration parameters. The postmaster has no knowledge of such modules when it reads the postgresql.conf file. Rather than allowing totally unknown configuration parameters, the concept of a variable ""class"" is introduced. Variables that belongs to a declared classes will create a placeholder value of string type and will not generate an error. When a module is loaded, it will declare variables for such a class and make those variables ""consume"" any placeholders that has been defined. Finally, the module will generate warnings for unrecognized placeholders defined for its class. More detail: The design is outlined after the suggestions made by Tom Lane and Joe Conway in this thread: http://archives.postgresql.org/pgsql-hackers/2004-02/msg00229.php A new string variable 'custom_variable_classes' is introduced. This variable is a comma separated string of identifiers. Each identifier denots a 'class' that will allow its members to be added without error. This variable must be defined in postmaster.conf. The lexer (guc_file.l) is changed so that it can accept a qualified name in the form <ID>.<ID> as the name of a variable. I also changed so that the 'custom_variable_classes', if found, is added first of all variables in order to remove the order of declaration issue. The guc_variables table is made more dynamic. It is originally created with 20% slack and can grow dynamically. A capacity is introduced to avoid resizing every time a new variable is added. guc_variables and num_guc_variables becomes static (hidden). The GucInfoMain now uses the new function get_guc_variables() and GetNumConfigOptions  instead or using the guc_variables directly. The find_option() function, when passed a missing name, will check if the name is qualified. If the name is qualified and if the qualifier denotes a class included in the 'custom_variable_classes', a placeholder variable will be created. Such a placeholder will not participate in a list operation but will otherwise function as a normal string variable. Define<type>GucVariable() functions will be added, one for each variable type. They are inteded to be used by add-on modules like the pl<lang> mappings. Example: extern void DefineCustomBoolVariable( const char* name, const char* short_desc, const char* long_desc, bool* valueAddr, GucContext context, GucBoolAssignHook assign_hook, GucShowHook show_hook); (I created typedefs for the assign-hook and show-hook functions). A call to these functions will define a new GUC-variable. If a placeholder exists it will be replaced but it's value will be used in place of the default value. The valueAddr is assumed ot point at a default value when the define function is called. The only constraint that is imposed on a Custom variable is that its name is qualified. Finally, a function: void EmittWarningsOnPlacholders(const char* className) was added. This function should be called when a module has completed its variable definitions. At that time, no placeholders should remain for the class that the module uses. If they do, elog(INFO, ...) messages will be issued to inform the user that unrecognized variables are present. Thomas Hallgren "	3dc37cd8d6f6fd392c6965dfb0c4fd6b9232b8dd
----------------------------
Fix erroneous error message printout when a configuration file contains an overlength token.  Printout was always garbage and could dump core entirely :-(.  Per report from Martin Pitt. 	957b90ed6aaa6fb05ecfe90776a0d7d34d344536
----------------------------
Make --without-docdir configure option actually work, per Manfred. 	a712570880510e94fa987b891d7b6179786611a7
----------------------------
Use wide-character library routines, if available, for upper/lower/initcap functions.  This allows these functions to work correctly with Unicode and other multibyte encodings.  Per prior discussion. Also, revert my earlier change to move installation path mashing from Makefile.global to configure.  Turns out not to work well because configure script is working with unexpanded variables, and so fails to match in cases where it should match. 	398386943936fbf66291ae3c6ed307779e4b90e4
----------------------------
Put path configuration information into a .h file instead of cluttering several different module Makefiles with it.  Also, do any adjustment of installation paths during configure, rather than every time Makefile.global is read. 	13f96c4b6bc59f25ce430ad987cd0881284b6e76
----------------------------
Revert irix change to suppress configure warnings. 	4da36853cedaca8a8cdda385d2abcec0e2a4e59d
----------------------------
Configure adjustments for irix. David Turover 	5c1cfb5fc1a4460c22d77366922c81d537173754
----------------------------
Improve configure win32 link test to run from config.status. Andrew Dunstan 	4307ca2a4073229a1d323edb53d56c049f952fce
----------------------------
Add documentation that installations are relocatable unless configure locations are overridden. 	d14db1321bee5fe07ed6e16c4368894e00e2b00d
----------------------------
Refactor code to warn about configure link failures on MinGW. 	a676b852e8128212d2a357e2b4f32cca16daf0d7
----------------------------
Warn when MinGW fails to create symlinks during configure.  Report already made to MinGW maintainers. Andrew Dunstan 	550fbc6a985d77f80b52e26f219ea9c3ad334ba5
----------------------------
Improve style of new log_statement_stats error message, per Peter. 	ef0ec907bdc26c10cae2dc9bccb88776079871aa
----------------------------
Remove crude test for log_statement_stats in startup code now that we have a more proper GUC based test. Also change error return code to ERRCODE_INVALID_PARAMETER_VALUE so it matches the old error return code. 	63d013906181397ac4f807bc316dd6bf97f82a2f
----------------------------
Throw error if log_statement_stats is used with confliction options for per-query stage stats. 	ae96e629b81713cfa1947da34efc4c5856066adf
----------------------------
Do thread testing from configure in a much cleaner fashion. 	e27338f26c87dd2f01999d5d27d1a44b815285ad
----------------------------
Add mention to check config.log if thread test failure. 	bc6ecbfeb3104eed1f66cb115147aacc25bd2c90
----------------------------
Hook thread_test program run at the end of configure run. Add test for cross-compiles that they have to run the thread_test program on the target machine. 	f6646efa4c4a5a3e5d935842f71e9e26422f8f4e
----------------------------
Report error if thread-test is run without having threading enabled in configure. 	95178c8d24f426d8b4299affa85460f159da586f
----------------------------
Add new auto-detection of thread flags. Allow additional thread flags to be added via port templates. Change thread flag names to PTHREAD_CFLAGS and PTHREAD_LIBS to match new configure script. 	7a66015e98e890c27e3483a413d5a88927c5b818
----------------------------
Update EXECUTE docs to mention tag matches prepared statement. Update log_statement to more clearly state it doesn't filter based on the statement type of the prepared statement. 	e3391133ae15c200ef32e5dd512db9d21a7393b3
----------------------------
Add global psql config file, psql.rc.sample. 	be6bbcef5678c67f7f1f48972d126233ff64ac48
----------------------------
Add doc mention that: process directly.  Some parameters can only be set at server start; any changes to their entries in the configuration file will be ignored until the server is restarted. 	6022a7d72fdc206a006bfd22a6812c41a4299b21
----------------------------
The attached patch for contrib/pg_autovacuum/README.pg_autovacuum fixes one apparent error and makes a minor stylistic change that makes it more consistent and makes clear something that confused me :-) Andrew Dunstan 	1ad590541d3c22dd3357d2252c1be442a42b7fb4
----------------------------
Clarify meaning of second DateStyle value. 	77c7e8bcb8b34608a6ba94789f28a8a6fdd15484
----------------------------
Push superuser check farther down in the if() statements to fix startup crash with debug in log_statement patch. 	1f12abbc7df007970071de42e568a25ca4a72442
----------------------------
"> >>1. change the type of ""log_statement"" option from boolean to string, > >>with allowed values of ""all, mod, ddl, none"" with default ""none"". OK, here is a patch that implements #1.  Here is sample output: test=> set client_min_messages = 'log'; SET test=> set log_statement = 'mod'; SET test=> select 1; ?column? ---------- 1 (1 row) test=> update test set x=1; LOG:  statement: update test set x=1; ERROR:  relation ""test"" does not exist test=> update test set x=1; LOG:  statement: update test set x=1; ERROR:  relation ""test"" does not exist test=> copy test from '/tmp/x'; LOG:  statement: copy test from '/tmp/x'; ERROR:  relation ""test"" does not exist test=> copy test to  '/tmp/x'; ERROR:  relation ""test"" does not exist test=> prepare xx as select 1; PREPARE test=> prepare xx as update x set y=1; LOG:  statement: prepare xx as update x set y=1; ERROR:  relation ""x"" does not exist test=> explain analyze select 1;; QUERY PLAN ------------------------------------------------------------------------------------ Result  (cost=0.00..0.01 rows=1 width=0) (actual time=0.006..0.007 rows=1 loops=1) Total runtime: 0.046 ms (2 rows) test=> explain analyze update test set x=1; LOG:  statement: explain analyze update test set x=1; ERROR:  relation ""test"" does not exist test=> explain update test set x=1; ERROR:  relation ""test"" does not exist It checks PREPARE and EXECUTE ANALYZE too.  The log_statement values are 'none', 'mod', 'ddl', and 'all'.  For 'all', it prints before the query is parsed, and for ddl/mod, it does it right after parsing using the node tag (or command tag for CREATE/ALTER/DROP), so any non-parse errors will print after the log line. "	6a25c6e1d1036db1162f3137bfc8213ecd7446a4
----------------------------
Remove 'syslog' GUC variable, and add more logical 'log_destination' variable to control logoutput location on Unix and Win32. Magnus Hagander 	6165bbab8cb3518269e24bf9ced0be443f05e66c
----------------------------
Add description of log_statement_stats's function (total statement stats rather than per-stage stats). 	076055ed1004f2c732b603453b2cee95a251f5b2
----------------------------
Replace max_expr_depth parameter with a max_stack_depth parameter that is measured in kilobytes and checked against actual physical execution stack depth, as per my proposal of 30-Dec.  This gives us a fairly bulletproof defense against crashing due to runaway recursive functions. 	8899a2aba92c4a17f422172e7c9dd0e383eefa39
----------------------------
"Update description error text: (errmsg(""no socket configured for listening""))); "	c83cd6c1dab0009de77d31e2eb3628598e69b092
----------------------------
Fix a minor typo in the log_line_prefix docs and make a couple other tiny improvements. 	d6bc5944a06a322a36800cedd46f0bb4922a6332
----------------------------
Use the new GUC variable default_with_oids in pg_dump, rather than using WITH/WITHOUT OIDS in dump files.  This makes dump files more portable. I have updated the pg_dump version so old binary dumps will load fine. Pre-7.5 dumps use WITHOUT OIDS in SQL were needed, so they should be fine. 	f23cce73b302e462b6f89580328f41ea5fa190cd
----------------------------
Replace the virtual_host and tcpip_socket parameters with a unified listen_addresses parameter, as per recent discussion.  The default behavior is now to listen on localhost, which eliminates the need for the -i postmaster switch in many scenarios. Andrew Dunstan 	2e45c143ef5963aa0f705350a017404c9b107f27
----------------------------
In working through a pg_autovacuum problem with Joe Conway (which turned out to be the same problem reported by Cott Lang which the previous patch resolved) a new bug was uncovered when running with a debug level of greater than 1. This patch resolves this new found bug and fixes some of the other debugging output to be more consistent. Please apply to both HEAD and the 7.4 branch. Matthew T. O'Connor 	2678395928821321c853ee2c23533c41922a2640
----------------------------
Adds DLLIMPORT modifier to check_function_bodies Claudio Natoli 	a7f074732042dc408343af12bd5331ff97196e24
----------------------------
Remove suggestiong for using test for wal_sync_method. 	c8aaa5ceecfcc021fbd157411c55f12ec899c5f8
----------------------------
Code review for log_line_prefix patch.  Cooperate with StringInfo instead of fighting it, avoid hard-wired (and wrong) assumption about max length of prefix, cause %l to actually work as documented, don't compute data we may not need. 	74ffc77279d092eb9e31c5e13a015173fca7addb
----------------------------
Make test_fsync use optimizer flag. 	8726591720df30269488c09ccd6ad8e985c72c06
----------------------------
Fix log_executor_stats if() test. 	cbaf1aaebaf409f9ed30d855e1e94af9ea4f8371
----------------------------
Add comment about using this testing for wal_sync_method. 	9ae9ad155d0950a05ad0437f03cf3cf956e9a102
----------------------------
Add fsync tests: Compare fsync before and after write's close: Compare one o_sync write to two: Compare file sync methods with one 8k write: Compare file sync methods with 2 8k writes: 	b2906c5be33d49a533ade5d6ec7a4602e614f639
----------------------------
Mention which fsync methods are unavailable. 	5ddecd1e27673a08dede120ede888a53816ff507
----------------------------
Add fsync test program.  It tests fsync to see if times for fsync are the same when done on the write() ile descriptor and a new descriptor. it also times various fsync methods. 	9f2696f2660a9b20f5e7cc1cd35654d5820332c8
----------------------------
log_statement was not removed by the previous patch.  It only updated its description. 	e2d8c1b2bb79b2c06f6522d046b089ae421c9345
----------------------------
Handle OID's and unsigned values better in pg_autovacuum. Matthew T. O'Connor 	7b6fba9d06b23b781680d9faf3271ff9662490c3
----------------------------
Windows uses codepages rather than the environment, so we work around that by querying the environment explicitly first for LC_COLLATE and LC_CTYPE. We have to do this because initdb passes those values in the environment. If there is nothing there we fall back on the codepage. Andrew Dunstan 	dea47eee0619f5260fe7f0f44e58cf79251f0229
----------------------------
Remove GUC log_statement, log_pid, log_timestamp, log_source_port. Functionality superceeded by log_line_prefix. Andrew Dunstan 	d6b57925cae38abe7f7cc963ed9c0356dacacbe9
----------------------------
Fix a typo in the documentation for geqo_effort. 	be7976d5a239b7a83c8234bce5c469992a003ee3
----------------------------
Add: #log_line_prefix = ''         # e.g. '<%u%%%d> ' # %u=user name %d=database name # %r=remote host and port # %p=PID %t=timestamp %i=command tag # %c=session id %l=session line number # %s=session start timestamp # %x=stop here in non-session processes # %%='%' Andrew Dunstan 	2d3fe86bc4b5675ee8b9a961d3662da7c5dae341
----------------------------
Fix log_executor_stats for non-multi queries.  Backpatch to 7.4.X. 	202cbdca0322d2606d744f260824e82826fe6a71
----------------------------
Add a few more xrefs, where they seemed appropriate: for example, refer to the discussion of planner statistics in the documentation for the default_statistics_target GUC var. 	1a6a27650d835c7d413b3beba2e9400b9af9c23b
----------------------------
Cause pg_dump to emit a 'SET client_encoding' command at the start of any restore operation, thereby ensuring that dumped data is interpreted the same way it was dumped even if the target database has a different encoding.  Per suggestions from Pavel Stehule and others.  Also, simplify scheme for handling check_function_bodies ... we may as well just set that at the head of the script. 	92bec9a0bc459c13b546ef0e601d43311ea2b8dd
----------------------------
Fix random build breakage from log_disconnections patch. 	a81b9d679f4e8e4b7ca65012996840044b8174ca
----------------------------
"Here is a patch that implements setitimer() on win32. With this patch applied, deadlock detection and statement_timeout now works. The file timer.c goes into src/backend/port/win32/. The patch also removes two lines of ""printf debugging"" accidentally left in pqsignal.h, in the console control handler. Magnus Hagander "	af3b182a574e4b349dcf71279769ad18818b13b9
----------------------------
Fix a minor SGML markup infelicity in recently-applied log_disconnections patch. 	11acc1ffd6d46e2e5d84465857dd81bd17d90965
----------------------------
Rename function log_session_end to log_disconnections. 	530570c598454bde0e5412d774f848c426a0f6eb
----------------------------
Fix prototype for on_proc_exit in log_disconnections patch. 	96f134550c40645b153e22208f888c83303f8aec
----------------------------
"This patch brings up to date what I did last year (now unfortunately bitrotted) to allow the logging of the end of a session, enabled by the config setting ""log_disconnections"". Andrew Dunstan "	c53611e3e7dc74c0c7dd79c78873fda1887f5b7f
----------------------------
Please apply this patch to contrib/dbmirror In incorperates changes from myself and a number of contributors. This update to dbmirror provides: -replication of sequence operations via setval/nextval -DBMirror.pl support for logging to syslog -changed the names of the tables to dbmirror_*  (no quotes required) -Support for writitng SQL statements to files instead of directly to a slave database -More options for DBMirror.pl in the config files. Steven Singer 	51b363ec2499a308bb7af23382d25befe6ef5d6c
----------------------------
Documentation for vacuum_cost config options. Jan 	f8840903716212f4eb21421d5951933271b797da
----------------------------
Not needed: < * Delay fsync() when other backends are about to commit too [fsync] > * Delay fsync() when other backends are about to commit too 	b3fbb4b801708088fe05d17497a27d54629277c9
----------------------------
Commit the reasonably uncontroversial parts of J.R. Nield's PITR patch, to wit: Add a header record to each WAL segment file so that it can be reliably identified.  Avoid splitting WAL records across segment files (this is not strictly necessary, but makes it simpler to incorporate the header records). Make WAL entries for file creation, deletion, and truncation (as foreseen but never implemented by Vadim).  Also, add support for making XLOG_SEG_SIZE configurable at compile time, similarly to BLCKSZ.  Fix a couple bugs I introduced in WAL replay during recent smgr API changes.  initdb is forced due to changes in pg_control contents. 	c3c09be34b6b0d7892f1087a23fc6eb93f3c4f04
----------------------------
Add configure support for determining UINT64_FORMAT, the appropriate snprintf format for uint64 items. 	127ea18f48189d57987b46be30cfa036251bf7e5
----------------------------
Rename SortMem and VacuumMem to work_mem and maintenance_work_mem. Make btree index creation and initial validation of foreign-key constraints use maintenance_work_mem rather than work_mem as their memory limit. Add some code to guc.c to allow these variables to be referenced by their old names in SHOW and SET commands, for backwards compatibility. 	391c3811a2b7f4cd666e1b4f35534046a862abbb
----------------------------
Win32 adjustments for dirmod and configure/configure.in. 	9dac52649db6e182e5cbddd979aebc4cc4983701
----------------------------
Move win32 changes from configure to configure.in, per Tom, autoconf run. 	98a5284170e9cf1dea5bfe0ab8fdf5ede4ba3246
----------------------------
"Briefly, * configure + Makefile changes * shared memory attaching in EXEC_BACKEND case (+ minor fix for apparent cygwin bug under cygwin/EXEC_BACKEND case only) * PATH env var separator differences * missing win32 rand functions added * placeholder replacements for sync etc under port.h To those who are really interested, and there are a few of you: the attached patch + file will allow the source base to be compiled (and, for some definition, ""run"") under MingW, with the following caveats (I wanted to first properly fix all but the last of these, but y'all won't quit asking for a patch :-): * child death: SIGCHLD not yet sent, so as a minimum, you'll need to put in some sort of delay after StartupDatabase, and handle setting StartupPID to 0 etc (ie. the stuff the reaper() signal function is supposed to do) * dirmod.c: comment out the elog calls * dfmgr.c: some hackage required to substitute_libpath_macro * slru/xact.c: comment out the errno checking after the readdir (fixed by next version of MingW) Again, this is only if you *really* want to see postgres compile and start, and is a nice leg-up for working on the other Win32 TODO list items. Just don't expect too much else from it at this point... Claudio Natoli "	e5e5a323ca4485179b647ae333dc4dc6a2e0793d
----------------------------
Improve the documentation of the 'join_collapse_limit' GUC var. Thanks to Tom Lane for some editorial suggestions. 	45842e6c52ec78100529f5523444985d4b8c61dd
----------------------------
Mention that log_statement only prints query on PREPARE, not EXECUTE, and PL/pgSQL only prints queries on first function call. 	8303a3d1eaba04d470d5a7c0cfc46cbd13d7f8fd
----------------------------
Revise GEQO planner to make use of some heuristic knowledge about SQL, namely that it's good to join where there are join clauses rather than where there are not.  Also enable it to generate bushy plans at need, so that it doesn't fail in the presence of multiple IN clauses containing sub-joins.  These changes appear to improve the behavior enough that we can substantially reduce the default pool size and generations count, thereby decreasing the runtime, and yet get as good or better plans as we were getting in 7.4.  Consequently, adjust the default GEQO parameters.  I also modified the way geqo_effort is used so that it affects both population size and number of generations; it's now useful as a single control to adjust the GEQO runtime-vs-plan-quality tradeoff.  Bump geqo_threshold to 12, since even with these changes GEQO seems to be slower than the regular planner at 11 relations. 	3969f2924bead7847adbe1fd736eefaf138af942
----------------------------
Repair error apparently introduced in the initial coding of GUC: the default value for geqo_effort is supposed to be 40, not 1.  The actual 'genetic' component of the GEQO algorithm has been practically disabled since 7.1 because of this mistake.  Improve documentation while at it. 	672a80702824dafd7dfb6151c6d519dded320032
----------------------------
Repair problem identified by Olivier Prenant: ALTER DATABASE SET search_path should not be too eager to reject paths involving unknown schemas, since it can't really tell whether the schemas exist in the target database. (Also, when reading pg_dumpall output, it could be that the schemas don't exist yet, but eventually will.)  ALTER USER SET has a similar issue. So, reduce the normal ERROR to a NOTICE when checking search_path values for these commands.  Supporting this requires changing the API for GUC assign_hook functions, which causes the patch to touch a lot of places, but the changes are conceptually trivial. 	9bd681a5220186230e0ea0f718a71af7ebe4b560
----------------------------
"Implement ""WITH / WITHOID OIDS"" clause for CREATE TABLE AS. This is intended to allow application authors to insulate themselves from changes to the default value of 'default_with_oids' in future releases of PostgreSQL. This patch also fixes a bug in the earlier implementation of the 'default_with_oids' GUC variable: code in gram.y should not examine the value of GUC variables directly due to synchronization issues. "	98dcf085e35e393bdd6740e6a8f8684b27ac2039
----------------------------
Suppress compiler warning (xlog_outrec is unused if not WAL_DEBUG). 	06288d4e2256ec2f458baa07f337cddd9c915b03
----------------------------
Make the 'wal_debug' GUC variable a boolean (rather than an integer), and hide it behind #ifdef WAL_DEBUG blocks. 	bc028beb166b704d3c3028961dd6905772bf3a2d
----------------------------
Recommend SHOW, instead of pg_controldata, for checking LC_COLLATE and LC_CTYPE settings of a database. 	5e545151671fa4ab3cf0e62ffd1e207609ad1517
----------------------------
Fix a number of places where reconfiguring with a different installation prefix would fail, because the new path did not get propagated to where it needed to be.  Note this would fail even with --enable-depend. 	cd2ad9b944fb236557bfe85999ac56857e0f22cd
----------------------------
Push responsibility for selecting out-of-line-assembler TAS code out to the platform template files, instead of doing it directly in configure.in. This seems cleaner, and also opens the door to making the choice be dependent on the compiler being used. 	baee5f75c5ab2dbd8ae0e84c7172ee0021d0996c
----------------------------
Have configure --without-spinlocks actually not use spinlock code, even if supported by the cpu. 	caf6e9d2dd072299fa7779446f0dcc31e1f80c2d
----------------------------
Back out: >  Attached is a patch that addressed all the discussed issues >  that did not break backward compatability, including the >  ability to output ISO-8601 compliant intervals by setting >  datestyle to iso8601basic. 	0ea4f9c859dc48ad228e63cc29a225a29939a26d
----------------------------
"In my mind there were two categories of open issues a) ones that are 100% backward (such as the comment about outputting this format) and b) ones that aren't (such as deprecating the current postgresql shorthand of '1Y1M'::interval = 1 year 1 minute in favor of the ISO-8601 'P1Y1M'::interval = 1 year 1 month. Attached is a patch that addressed all the discussed issues that did not break backward compatability, including the ability to output ISO-8601 compliant intervals by setting datestyle to iso8601basic. Interval values can now be written as  ISO 8601 time intervals, using the ""Format with time-unit designators"". This format always starts with the character 'P', followed  by a string of values followed by single character time-unit designators. A 'T' separates the date and time parts of the interval. Ron Mayer "	54c8e821b8313c78ba19653f74e83e956fdb8fe5
----------------------------
Supress ecpg thread test if configure didn't enable threads.  Fix tools/thread to run even if configure didn't enable threads because this test is used before enabling threads for the OS. 	85f51dea1cde7e5f4e5d8a5c8d73d9ffb1559a4b
----------------------------
Minor autovacuum fixes from Matthew O'Connor. 	ee719299e404da22aeb857b9b6ecac3f403990ea
----------------------------
I've run across a pretty serious problem with pg_autovacuum. pg_autovacuum looses track of any table that's ever been truncated (possibly other situations too).   When i truncate a table it gets a new relfilenode in pg_class.  This is a problem because pg_autovacuum assumes pg_class.relfilenode will join to pg_stats_all_tables.relid. pg_stats_all_tables.relid is actallly the oid from pg_class, not the relfilenode.   These two values start out equal so pg_autovacuum works initially, but it fails later on because of this incorrect assumption. This patch fixes that problem.  Applied to HEAD and 7.4.X. Brian Hirt 	ea4b9f14f3a5e4edb0120bae412de505a36a06b6
----------------------------
I noticed in the 7.4 release that in contrib/pg_autovacuum, args->logfile is not initialized if a log file is not specified on the command line.  This causes an immediate segfault on systems that fill allocated memory with some value other than zero (my FreeBSD machine uses 0xD0). Several crashes later I discovered that args->user, password, host, and port are also used without being initialized. This doesn't appear to be fixed in CVS and I came up empty on a mailing list search -- hope it hasn't been reported already. Craig Boston 	15b5d6cfc64ff87070efe263f7c9b50fbb0c997f
----------------------------
"This patch adds a new GUC var, ""default_with_oids"", which follows the proposal for eventually deprecating OIDs on user tables that I posted earlier to pgsql-hackers. pg_dump now always specifies WITH OIDS or WITHOUT OIDS when dumping a table. The documentation has been updated. Neil Conway "	7ce9b7c0d8c8dbefc04978765422f760dcf3788c
----------------------------
Force zero_damaged_pages to be effectively ON during recovery from WAL, since there is no need to worry about damaged pages when we are going to overwrite them anyway from the WAL.  Per recent discussion. 	0902ece5b925c80b026fd98c3a014be15c720b94
----------------------------
Make sure vpath_build is set correctly even if config.status --no-create was specified. 	859accdab3c3b57599b8602b60c87f0d6bfbd224
----------------------------
"Remove items completed in 7.4: < * -Allow elog() to return error codes, module name, file name, line <   number, not just messages (Tom) < * -Add error codes (Tom) < * -Make error messages more consistent 40d35 < * -Add GUC log_statement_and_duration to print statement and >= min duration 51d45 < * -Allow easy display of usernames in a group 53d46 < * -Add start time to pg_stat_activity 55d47 < * -Have standalone backend read postgresql.conf (Tom) 59d50 < * -Allow CIDR format to be used in pg_hba.conf 74d64 < * -Add IPv6 capability to INET/CIDR types 77d66 < * -Change NUMERIC data type to use base 10,000 internally 82d70 < * -Add GUC variables to control floating number output digits (Pedro Ferreira) 90,92d77 < * -Allow current datestyle to restrict dates;  prevent month/day swapping <   from making invalid dates valid < * -Prevent month/day swapping of ISO dates to make invalid dates valid 102d86 < 	o -Allow arrays to be ORDER'ed 104d87 < 	o -Support construction of array result values in expressions (Joe) 128d110 < * -Remove Cyrillic recode support 146,147d127 < * -Allow CREATE INDEX zman_index ON test (date_trunc( 'day', zman ) datetime_ops) <   fails index can't store constant parameters 155d134 < * -Add btree index support for reltime, tinterval, regproc (Tom) 157d135 < * -Certain indexes will not shrink, e.g. indexes on ever-increasing 161d138 < * -Allow LIKE indexing optimization for non-ASCII locales using special index 173d149 < * -Improve concurrency of hash indexes (Tom) 181d156 < * -Allow LIMIT/OFFSET to use expressions (Tom) 187d161 < * -Return proper effected tuple count from complex commands [return] 191d164 < * -Make a transaction-safe TRUNCATE (Rod) 196,197d168 < * -Allow UPDATE to use SET col = DEFAULT < * -Add config variable to prevent auto-adding missing FROM-clause tables 199d169 < * -Have SELECT '13 minutes'::interval display zero seconds in ISO datestyle 224,225d193 < 	o -Add ALTER TABLE tab SET WITHOUT OIDS (Rod) < 	o -Add ALTER SEQUENCE to modify min/max/increment/cache/cycle values 237d204 < 	o -Allow CLUSTER to cluster all tables (Alvaro Herrera) 248d214 < 	o -MOVE 0 should not move to end of cursor (Bruce) 252d217 < 	o -Allow cursors outside transactions 264,265d228 < 	o -Allow EXPLAIN EXECUTE to see prepared plans <  	o -Allow SHOW of some non-modifiable variables, like pg_controldata 280d242 < 	o -Allow array declarations and other data types in PL/PgSQL DECLARE 282,283d243 < 	o -Make PL/PgSQL %TYPE schema-aware < 	o -Allow PL/PgSQL to support array element assignment (Joe) 294,298d253 < * -Allow psql to show transaction status if backend protocol changes made < * -Add schema, cast, and conversion backslash commands to psql (Christopher) < * -Allow pg_dump to dump a specific schema (Neil Conway) < * -Allow psql to do table completion for SELECT * FROM schema_part and <   table completion for SELECT * FROM schema_name. 300,302d254 < * -Allow SSL-enabled clients to turn off SSL transfers < * -Modify pg_get_triggerdef() to take a boolean to pretty-print, <   and use that as part of pg_dump along with psql 327d278 < 	o -Add SQLSTATE 330d280 < 	o -Make casts work in variable initializations 334,336d283 < 	o -Allow multi-threaded use of SQLCA < 	o -Understand structure definitions outside a declare section < 	o -Allow :var[:index] or :var[<integer>] as cvariable for an array var 356d302 < * -Support statement-level triggers (Neil) 460,461d405 < * -Add checkpoint_min_warning postgresql.conf option to warn about checkpoints <   that are too frequent (Bruce) 472,476d415 < * -Improve Subplan list handling < * -Allow Subplans to use efficient joins(hash, merge) with upper variable < * -Add hash for evaluating GROUP BY aggregates (Tom) < * -Allow merge and hash joins on expressions not just simple variables (Tom) < * -Make IN/NOT IN have similar performance to EXISTS/NOT EXISTS (Tom) 480d418 < * -Inline simple SQL functions to avoid overhead (Tom) 495d432 < * -Get faster regex() code from Henry Spencer <henry@zoo.utoronto.ca> 511,512d447 < * -Modify regression tests to prevent failures do to minor numeric rounding < * -Add OpenBSD's getpeereid() call for local socket authentication 537,542d471 < 	o -Show transaction status in psql < 	o -Allow binding of query parameters, support for prepared queries < 	o -Remove hard-coded limits on user/db/password names < 	o -Remove unused elements of startup packet (unused, tty, passlength) < 	o -Fix COPY/fastpath protocol < 	o -Error codes 544d472 < 	o -Special passing of binary values in platform-neutral format (bytea?) 547d474 < 	o -Report server version number, database encoding, client encoding "	0b0f9c62e8e9c5e1cb97bf9e372b640facfccc96
----------------------------
Fix datetime input parsing to accept YYYY-MONTHNAME-DD and related syntaxes, which had been unintentionally broken by recent changes to tighten up the DateStyle rules for all-numeric date input.  Add documentation and regression tests for this, too. 	1a908a00b05c9f8f94cebde2551eee50329f38f2
----------------------------
Changed parameter name for shared cache status report interval to debug_shared_buffers = <seconds> as per previous discussion. Jan 	1f45555892b91419b5d3715b6223dbf52b9e399c
----------------------------
Update info about SysV configuration procedures on OS X 10.3. 	edc213515bc8cb0400f3470283fd9e6dc3cee216
----------------------------
Fix typo on autovacuum readme. 	6479ee28c05e30c0b77b185360b9d21005f9d6bc
----------------------------
zero_damaged_pages must absolutely NOT be marked GUC_DISALLOW_IN_FILE, else it cannot be used to handle failures detected during WAL replay. Fortunately this flag isn't actually enforced yet, but get it right. 	7e4a6294929cc0c9bb17441e639c013b679a127b
----------------------------
Add note to update config.guess and config.sub at the start of beta. 	d28bacd89708fd62924c52243ec22379705f6c09
----------------------------
New config.guess and config.sub from upstream. 	f9415b40462ed21b8757d505b1b7aa53ad150eb1
----------------------------
fix typo. (role_columns_grants -> role_column_grants) 	3d22beeb6ab6b5bc117d2be688ebd3b53f641c06
----------------------------
Put --describe-config in the right place. 	59550df34d0eafe96d856b139080440d402050be
----------------------------
Add --describe-config to top of postgres manual page. 	53b714d2a76a8ff783538b009d72c12035a36b1d
----------------------------
Document --describe-config. 	6228228009c35c229fe2fe1eb55d295e48adaa79
----------------------------
Fix two bugs in funcs.source that made the tutorial script fail. Make a LOT of fixes to syscat.source to: * Set search_path properly (and reset it) * Add schema name to all results * Add schema name to ORDER BY first * Make checks for user-defined objects match reality * format_type all type names * Respect attisdropped * Change !~ to 'not like' since it's more standard Christopher Kings-Lynne 	3c9a32d4a277771e15b7d8a7ee83b0aab329a33d
----------------------------
up configure to beta5 	7533e455f0b0dc6751ae2b3744fe989f8bc1a481
----------------------------
Cleanup on --help-config: Now called --describe-config, no further options, machine readable, without headers, not sorted.  Parameter descriptions adjusted to fit first sentence + rest convention. 	9d77708d83ee3c2f4a67d169e274e7b208008b7c
----------------------------
Ensure that all places that are complaining about exhaustion of shared memory say 'out of shared memory'; some were doing that and some just said 'out of memory'.  Also add a HINT about increasing max_locks_per_transaction where relevant, per suggestion from Sean Chittenden.  (The former change does not break the strings freeze; the latter does, but I think it's worth doing anyway.) 	624292aa3517d85f1314227df400f256424a496b
----------------------------
"I have run pg_autovacuum on AIX, so that can, at least loosely, be considered ""tested."" And I have turned all of the 7.4 HISTORY material into DocBook for release.sgml Christopher Browne "	62fdc3dd60a7db08e143c33c00062d25c820adc7
----------------------------
Cause the default CFLAGS to be -O2 -fno-strict-aliasing when using gcc, per recent pghackers discussions.  Also ensure that explicitly setting CFLAGS in the configure environment will be honored. 	37278c063fed8b7e10f8ad5fe7cab7f809df2770
----------------------------
Determine max_connections first, then see how large shared_buffers can be made, to avoid corner cases where max_connections ends up unreasonably small because shared_buffers is hogging too much shmem space.  Per pghackers discussion about a week ago.  Also, fix the copy-newlines problem in a more robust way, by using COPY FROM filename instead of COPY FROM STDIN; per a suggestion from Peter. 	87299583a5004df4b563226349c906f2184dd1b0
----------------------------
Fix core dump on root starting pg_autovacuum. Change conditionals to be more constent with our code if (const == var) => if (var == const). 	18e5addb9697d0ebd6d40e2493fd00ad485dcdac
----------------------------
This centralizes the optimization defaults into configure.in, rather than having CFLAGS= in the template files. It uses -O2 for gcc (generated by autoconf), and -O for non-gcc, unless the template overrides it. 	0e22cb1232f4474f9b461661b621603312f37d3d
----------------------------
"Change ""query:"" to ""statement:"". Have log_duration print when log_min_duration_statement prints. "	dcad7949f85a54c8a6bff315d4c1fafab6d7c17e
----------------------------
Change some awkward wording in the pg_autovacuum README file. I really only read this because of Niel :-) Robert Treat 	7ceadb8fab07b33c577ca4191332f403cf9694b1
----------------------------
"Have log_min_duration_statement = 0 always print duration/statement. Change log line to be ""duration:  ms  query:"" Indent multi-line queries with a tab in the server logs. "	b8382c26884f4adcf525e0bc7fdf0c671d57b84d
----------------------------
Fix log_duration and log_min_duration_statement to print properly, as pointed out by Peter. 	1c4d4cb17df0057aa56bc588d3fe60f49d83f9cf
----------------------------
Issue 'SET check_function_bodies = false' to suppress possible restore failures in SQL functions, due to forward references or unqualified references to objects in other schemas.  Per recent discussion. 	ef88199f611e625b496ff92aa17a447d254b9796
----------------------------
Add GUC parameter check_function_bodies to control whether validation of function bodies is done at CREATE FUNCTION time.  This is normally true but can be set false to avoid problems with forward references, wrong schema search path, etc.  This is just the backend patch, still need to adjust pg_dump to make use of it. 	15c194c1d51991deb7b7e6a00c6ce89575654120
----------------------------
"This patch fixes an obvious bug in the ""should I print the duration of this query?"" logic in postgres.c Also, make it print ""duration:"" like log_duration. Neil Conway "	4b4c43b14600b63e23271cf904d14d54406205a9
----------------------------
This patch makes a few incremental improvements to geqo.sgml and arch-dev.sgml Neil Conway 	a17b53753e4bd1b5b83e838832505f992d3a4253
----------------------------
Finalize configuration of thread_test program. 	391dceb462c32ccd72d4c45bef4e6839cb6c4d99
----------------------------
You can't NLS-enable a program component by just putting gettext() around every string, especially if some of the output should be fixed-format machine-readable.  This needs to be more carefully sorted out. Also, make the help message generated by --help-config -h be more similar in style to the others. 	e05147e51aac1ffbc000aa63867049a93f6a512f
----------------------------
Move -D_GNU_SOURCE hack from port header to template, so that configure's tests see the same compilation environment as the code. Per discussion with Stephan Szabo. 	026f9c05d5eb747ce3ee6b316946d4675ed80fad
----------------------------
Make psql correctly track the effects of SET CLIENT_ENCODING commands. I thought I'd fixed this earlier, but I didn't get it right ... 	7e06dbe1c2391468ddaa7f0805ac6352933069e1
----------------------------
With Joe Conway's concurrence, remove srandom() call from normal_rand(). This was the last piece of code that took it upon itself to reset the random number sequence --- now we only have srandom() in postmaster start, backend start, and explicit setseed() operations. 	c472b8366f5bec1da4d5d5b894f47508bbc8d5d6
----------------------------
With pg_autovacuum becoming increasingly popular it's important to have a working stats collector.  This test is able to discover the problem that was present in 7.4 Beta 2. Manfred Koizar 	cd47a4d3c4843d6a7dd759670538eb9b3bcedfd3
----------------------------
> OK, well as we wait on the fix for the stats system, let me submit my > patch for pg_autovacuum.  This patch assumes that the stats system will > be fixed so that all inserts, updates and deletes performed on shared > tables reguardless of what database those commands were executed from, > will show up in the stats shown in each database. I had to make a further change to this to take quotes off the 'last ANALYZE' in order for it to not overquote the relation name, so there's a _little_ work left to get it to play well. I have deployed it onto several boxes that should be doing some vacuuming over the weekend, and it is now certainly hitting pg_ tables. I would like to present a CVS-oriented patch; unfortunately, I had to change the indentation patterns when editing some of it :-(.  The following _may_ be good; not sure... Matthew T. O'Connor Christopher Browne 	3bf080daaf181689cd6c1ea3809d1230d721dc22
----------------------------
Attempt threading in this order: *      use non-*_r function names if they are all thread-safe *          (NEED_REENTRANT_FUNCS=no) *      use *_r functions if they exist (configure test) *      do our own locking and copying of non-threadsafe functions New to this patch is the last option. 	b041d3e3a17331f9fc76509a577c6ed63067aded
----------------------------
Implement compiler #error if spinlock code not found, add configure flag to bypass the error, --without-spinlocks. 	06e3ec7a542ede97986cbab8066b1293b1cd2751
----------------------------
This patch makes a number of improvements to the runtime config documentation. Neil Conway 	64a7b58aa0b202d308e0456acf62e1c5927aba8c
----------------------------
Remove geqo_random_seed parameter.  Having geqo reset the global random() sequence every time it's called is bogus --- it interferes with user control over the seed, and actually decreases randomness overall (because a seed based on time(NULL) is pretty predictable).  If you really want a reproducible result from geqo, do 'set seed = 0' before planning a query. 	48beecda7cbd2e73ebc11c88d3567ad064604bda
----------------------------
Changes for MinGW/WIN32: o allow configure to see include/port/win32 include files o add matching Win32 accept() prototype o allow pg_id to compile with native Win32 API o fix invalide mbvalidate() function calls (existing bug) o allow /scripts to compile with native Win32 API o add win32.c to Win32 compiles (already in *.mak files) 	4b407f6c3cd7584c308fcd75fd8d2a094a4e8dd1
----------------------------
Make the default pg_hba.conf include an entry for ::1 only if configure set HAVE_IPV6.  Per recent discussions. 	7703e55c32e82e2485272596ec5ee6ac1695e42d
----------------------------
Allow non-super users to set log_duration to true, then false, when the administrator has not turned it on, and fix other PGC_USERLIMIT variables. 	6d239ee4b4137ae3ca9a1d56715cf1b6b4459625
----------------------------
Re-upper case CHECKPOINT_SEGMENTS. 	b8245766abe7071a078795c1417ae2a3fa145164
----------------------------
Lowercase CHECKPOINT_SEGMENTS. 	cac43aefd8eb7118f3cfabcc14a7619ddfabda82
----------------------------
Pass session_authorization to the client and make psql update its prompt accordingly. 	29a20145fd2d1859eb3ec1788240244d0b50f68f
----------------------------
Cause standalone backend (including bootstrap case) to read the GUC config file if it exists.  This was already discussed as being a good idea, and now seems the cleanest way to deal with initdb-time failures on machines with small SHMMAX.  (The submitted patches instead modified initdb.sh to pass the correct sizing parameters, but that would still leave standalone backends prone to failure later.  An admin who needs to use a standalone backend has enough trouble already, he shouldn't have to manually configure its shmem settings...) 	b916cc435a18627daeb31b4567c8a364c7df5a77
----------------------------
Do not pass server_encoding to the client. libpq, talking to an old server, should assume SQL_ASCII as the default client encoding, because that is what the server will actually use (not the server encoding). 	5f65345a5711db5067664b08fb810b1a388b485d
----------------------------
Clean up after pygresql removal: adjust/remove documentation and remove unneeded configure work. 	f10a9033bf308f9dde0aa77caad6503e233489d1
----------------------------
Adjust date/time input parsing code to correctly distinguish the four SQLSTATE error codes required by SQL99 (invalid format, datetime field overflow, interval field overflow, invalid time zone displacement value). Also emit a HINT about DateStyle in cases where it seems appropriate. Per recent gripes. 	d1031cdef2c8f0d9c7b3a1423649d90b8498808a
----------------------------
Mop-up for previous change to determine default shared_buffers and max_connections at initdb time.  Get rid of DEF_NBUFFERS and DEF_MAXBACKENDS macros, which aren't doing anything useful anymore, and put more likely defaults into postgresql.conf.sample. 	f63cbccac7ad4017fabc645548fc9d4aeccde95d
----------------------------
Make NEED_REENTRANT_FUNC_NAMES _require_ *_r functions, and add tests to configure to report if they are not found. 	edc999b09a7e217d7fe1199faa5f87f4abacf6b3
----------------------------
"Update done items: < * Allow elog() to return error codes, module name, file name, line <   number, not just messages (Peter E) < * Add error codes (Peter E) < * Make error messages more consistent [error] > * -Allow elog() to return error codes, module name, file name, line >   number, not just messages (Tom) > * -Add error codes (Tom) > * -Make error messages more consistent 40c40 < * Add GUC log_statement_and_duration to print statement and >= min duration > * -Add GUC log_statement_and_duration to print statement and >= min duration 84c84 < * Allow current datestyle to restrict dates;  prevent month/day swapping > * -Allow current datestyle to restrict dates;  prevent month/day swapping 86c86 < * Prevent month/day swapping of ISO dates to make invalid dates valid > * -Prevent month/day swapping of ISO dates to make invalid dates valid 88c88 < * Delay resolution of array expression type so assignment coercion > * -Delay resolution of array expression type so assignment coercion 93c93 < 	o Allow arrays to be ORDER'ed > 	o -Allow arrays to be ORDER'ed 116c116 < * Remove Cyrillic recode support > * -Remove Cyrillic recode support 144c144 < * Certain indexes will not shrink, e.g. indexes on ever-increasing > * -Certain indexes will not shrink, e.g. indexes on ever-increasing 185c185 < * Have SELECT '13 minutes'::interval display zero seconds in ISO datestyle > * -Have SELECT '13 minutes'::interval display zero seconds in ISO datestyle 196c196 < 	o -Add ALTER TABLE tab SET WITHOUT OIDS (Rod) > 	o --Add ALTER TABLE tab SET WITHOUT OIDS (Rod) 221c221 < 	  stored in the backend > 	  stored in the backend (Gavin) 235c235 < 	o Allow EXPLAIN EXECUTE to see prepared plans > 	o -Allow EXPLAIN EXECUTE to see prepared plans 241d240 < 	o Add untrusted version of plpython 265c264 < * Allow psql to show transaction status if backend protocol changes made > * -Allow psql to show transaction status if backend protocol changes made 272,273c271,272 < * Modify pg_get_triggerdef() to take a boolean to pretty-print, <  and use that as part of pg_dump along with psql > * -Modify pg_get_triggerdef() to take a boolean to pretty-print, >   and use that as part of pg_dump along with psql 292c291 < 	o Add SQLSTATE > 	o -Add SQLSTATE 296c295 < 	o Implement SQLDA (do we really need this?) > 	o -Implement SQLDA 364d362 < * Allow binding query args over FE/BE protocol 378c376,377 < * Provide automatic running of vacuum in the background (Tom) [vacuum] > * Provide automatic running of vacuum in the background in backend >   rather than in /contrib [vacuum] 427c426 < * Allow Subplans to use efficient joins(hash, merge) with upper variable > * -Allow Subplans to use efficient joins(hash, merge) with upper variable 429c428 < * Allow merge and hash joins on expressions not just simple variables (Tom) > * -Allow merge and hash joins on expressions not just simple variables (Tom) 474c473 < * Remove memory/file descriptor freeing befor elog(ERROR)  (Bruce) > * Remove memory/file descriptor freeing before ereport(ERROR)  (Bruce) 489,490c488,489 < 	o Show transaction status in psql < 	o Allow binding of query parameters, support for prepared queries > 	o -Show transaction status in psql > 	o -Allow binding of query parameters, support for prepared queries 492,494c491,493 < 	o Remove hard-coded limits on user/db/password names < 	o Remove unused elements of startup packet (unused, tty, passlength) < 	o Fix COPY/fastpath protocol? > 	o -Remove hard-coded limits on user/db/password names > 	o -Remove unused elements of startup packet (unused, tty, passlength) > 	o -Fix COPY/fastpath protocol 496,497c495 < 	o Replication support? < 	o Error codes > 	o -Error codes 500d497 < 	o ecpg improvements? 503c500 < 	o Report server version number, database encoding, client encoding > 	o -Report server version number, database encoding, client encoding "	80ed63952b15691053488f3ef40dae4a5e561c49
----------------------------
Add ts_debug function for debugging  configurations 	dd2870f76fe0295f5507b44297a03fa612ece6db
----------------------------
Fix thread handling in configure. 	5c15cb4752303731abf54e2ed12cd741e90b5d5a
----------------------------
Remove docs that say psql \encoding doesn't track SET client_encoding. 	d6d96532a8c81f9dea852f470bb6444430ac0489
----------------------------
Apply (a somewhat revised version of) Greg Mullane's patch to eliminate heuristic determination of day vs month in date/time input.  Add the ability to specify that input is interpreted as yy-mm-dd order (which formerly worked, but only for yy greater than 31).  DateStyle's input component now has the preferred spellings DMY, MDY, or YMD; the older keywords European and US are now aliases for the first two of these. Per recent discussions on pgsql-general. 	9c2a7c2269d1ecebd7f83e769bb2640cb82fa0e0
----------------------------
Code review for recent GUC changes --- try to make it less obvious that these things were added at different times by different people ;-). Includes Aizaz Ahmed's patch to remove duplicate array in help_config.c. 	2baf4efe09f65d8e8cac32fb882ab9f0fd601574
----------------------------
"> Joe Conway <mail@joeconway.com> writes: >>ISTM that ""source"" is worth knowing. > > Hm, possibly.  Any other opinions? This version has the seven fields I proposed, including ""source"". Here's an example that shows why I think it's valuable: regression=# \x Expanded display is on. regression=# select * from pg_settings where name = 'enable_seqscan'; -[ RECORD 1 ]----------- name    | enable_seqscan setting | on context | user vartype | bool source  | default min_val | max_val | regression=# update pg_settings set setting = 'off' where name = 'enable_seqscan'; -[ RECORD 1 ]--- set_config | off regression=# select * from pg_settings where name = 'enable_seqscan'; -[ RECORD 1 ]----------- name    | enable_seqscan setting | off context | user vartype | bool source  | session min_val | max_val | regression=# alter user postgres set enable_seqscan to 'off'; ALTER USER (log out and then back in again) regression=# \x Expanded display is on. regression=# select * from pg_settings where name = 'enable_seqscan'; -[ RECORD 1 ]----------- name    | enable_seqscan setting | off context | user vartype | bool source  | user min_val | max_val | In the first case, enable_seqscan is set to its default value. After setting it to off, it is obvious that the value has been changed for the session only. In the third case, you can see that the value has been set specifically for the user. Joe Conway "	38fb906f93b40edc9ef367b5619f431851fc3867
----------------------------
"At long last I put together a patch to support 4 client SSL negotiation modes (and replace the requiressl boolean). The four options were first spelled out by Magnus Hagander <mha@sollentuna.net> on 2000-08-23 in email to pgsql-hackers, archived here: http://archives.postgresql.org/pgsql-hackers/2000-08/msg00639.php My original less-flexible patch and the ensuing thread are archived at: http://dbforums.com/t623845.html Attached is a new patch, including documentation. To sum up, there's a new client parameter ""sslmode"" and environment variable ""PGSSLMODE"", with these options: sslmode   description -------   ----------- disable   Unencrypted non-SSL only allow     Negotiate, prefer non-SSL prefer    Negotiate, prefer SSL (default) require   Require SSL The only change to the server is a new pg_hba.conf line type, ""hostnossl"", for specifying connections that are not allowed to use SSL (for example, to prevent servers on a local network from accidentally using SSL and wasting cycles). Thus the 3 pg_hba.conf line types are: pg_hba.conf line types ---------------------- host       applies to either SSL or regular connections hostssl    applies only to SSL connections hostnossl  applies only to regular connections These client and server options, the postgresql.conf ssl = false option, and finally the possibility of compiling with no SSL support at all, make quite a range of combinations to test. I threw together a test script to try many of them out. It's in a separate tarball with its config files, a patch to psql so it'll announce SSL connections even in absence of a tty, and the test output. The test is especially informative when run on the same tty the postmaster was started on, so the FATAL: errors during negotiation are interleaved with the psql client output. I saw Tom write that new submissions for 7.4 have to be in before midnight local time, and since I'm on the east coast in the US, this just makes it in before the bell. :) Jon Jensen "	397831e1039ecc335e1aae54ebea8483ce2e6b72
----------------------------
Have a go at fixing various outstanding portability issues in code that was modified for IPv6.  Use a robust definition of struct sockaddr_storage, do a proper configure test to see if ss_len exists, don't assume that getnameinfo() will handle AF_UNIX sockets, don't trust getaddrinfo to return the protocol we ask for, etc.  This incorporates several outstanding patches from Kurt Roeckx, but I'm to blame for anything that doesn't work ... 	df63503dc2fbe59292a65c685479bf1a439b9b4d
----------------------------
Fix threading configure tests, from Peter. 	277dbb0c34791fe2f6192d02ea577d3738666c2f
----------------------------
Add cleaner formatting to config file. 	44f665bf40322c84c6e1ac59d23926cae1150433
----------------------------
Now that I look, SHOW TRANSACTION_ISOLATION isn't quite consistent with SET TRANSACTION_ISOLATION, either. 	ffcb1491af36637b82041708802d239b8006837d
----------------------------
Cause SHOW DATESTYLE to produce a string that will be accepted by SET DATESTYLE, for instance 'SQL, European' instead of 'SQL with European conventions'.  Per gripe a month or two back from Barry Lind. 	cfa6999d3b1bdcaa058c90392057a044b0f067e8
----------------------------
Tweak original coding so that we can determine the platform-specific shared_buffers and max_connections values to use before we run the bootstrap process.  Without this, initdb would fail on platforms where the hardwired default values are too large.  (We could get around that by making the hardwired defaults tiny, perhaps, but why slow down bootstrap by starving it for buffers...) 	9117e55493af769c70ce2218cfda64335b092d41
----------------------------
Make cost estimates for SubqueryScan more realistic: charge cpu_tuple_cost for each row processed, and don't forget the evaluation cost of any restriction clauses attached to the node.  Per discussion with Greg Stark. 	3d09f6c5609da36270c77b24f87313eac94a7635
----------------------------
The default values for shared_buffers and max_connections are now 1000 and 100 respectively, if the platform will allow it.  initdb selects values that are not too large to allow the postmaster to start, and places these values in the installed postgresql.conf file.  This allows us to continue to start up out-of-the-box on platforms with small SHMMAX, while having somewhat-realistic default settings on platforms with reasonable SHMMAX.  Per recent pghackers discussion. 	de98a7e23a193a9c9a6505540ad03c5b4a57f345
----------------------------
Doc update for LOG_MIN_DURATION_STATEMENT set to zero. 	4afcba05deee3bb2b0281608b2c1235607b38515
----------------------------
Add special checks for non-super-user setting LOG_MIN_DURATION_STATEMENT to zero. 	0ecc8ac4258e4d0670adb9f344299c9745445cdb
----------------------------
Add --help-config facility to dump information about GUC parameters without needing a running backend.  Reorder postgresql.conf.sample to match new layout of runtime.sgml.  This commit re-adds work lost in Wednesday's crash. 	b700a672feadbb6f122b7c7249967fb0f58dda2b
----------------------------
Add GUC option log_error_verbosity to control which fields of error reports get put into the postmaster log.  Options are TERSE, DEFAULT, VERBOSE, with the same behavior as implemented on the client side in libpq. 	219e29784dead71ed2c652057e131fe31ea7c354
----------------------------
Update psql for some features of new FE/BE protocol.  There is a client-side AUTOCOMMIT mode now: '\set AUTOCOMMIT off' supports SQL-spec commit behavior.  Get rid of LO_TRANSACTION hack --- the LO operations just work now, using libpq's ability to track the transaction status.  Add a VERBOSE variable to control verboseness of error message display, and add a %T prompt-string code to show current transaction-block status.  Superuser state display in the prompt string correctly follows SET SESSION AUTHORIZATION commands. Control-C works to get out of COPY IN state. 	f9ebf36970df6e61142dbe7590482cd240fdb66a
----------------------------
Add is_superuser parameter reporting, soon to be used by psql. 	ea886339b8406674ebceb456e5ef1b4fc7c170b4
----------------------------
Add: > * Allow the identifier length to be increased via a configure option 	c1026d0460bc2ec2564028e83fc12d5a35446675
----------------------------
In ISO datestyle, never emit just HH:MM, always emit HH:MM:SS or HH:MM:SS.SSS... when there is a nonzero part-of-a-day field in an interval value.  The seconds part used to be suppressed if zero, but there's no equivalent behavior for timestamp, and since we're modeling this format on timestamp it's probably wrong.  Per complaint and patch from Larry Rosenman. 	621691d816c45396ab9f8f9486ee9eb2a037795c
----------------------------
Update: < * Have SELECT '13 minutes'::interval display zero seconds > * Have SELECT '13 minutes'::interval display zero seconds in ISO datestyle 	4dab978c52700b6323919876463ae23c5d7ddf9f
----------------------------
Add with '?': > * Have initdb set DateStyle based on locale? 	6403a6729c79152ee8c46f997ee796448a7a8bf6
----------------------------
Add: > * Allow current datestyle to restrict dates;  prevent month/day swapping >   from making invalid dates valid > * Prevent month/day swapping of ISO dates to make invalid dates valid 	4a49d69c90ce6078394c573879700a1cb9997190
----------------------------
Make libpq thread-safe with configure --with-threads option. Lee Kindness 	a16a0314114f7e6e4414d11f6ff2744496952bda
----------------------------
Add thread.c for libpq threading, and hook it into libpq/configure. 	62b532b73668267eb950f1ba8fed4a8ec45f60ae
----------------------------
Add --with-threads configure option to control threaded libpq. 	02d847fe9f86b0c6ff4658eb9d49fbb98c8fa69a
----------------------------
Document default Linux autocommit behavior, and show workaround. 	8d2d92c5f0169190e4963fb541340bc8c630b02f
----------------------------
This patch updates pg_autovacuum in several ways: * A few bug fixes * fixes solaris compile and crash issue * decouple vacuum analyze and analyze thresholds * detach from tty (dameonize) * improved logging layout * more conservative default configuration * improved, expanded and updated README please apply and 1st convenience, or before code freeze which ever comes first :-) At this point I think I have brought pg_autovacuum and its client side design as far as I think it should go.  It works, keeping file sizes in check, helps performance and give the administrator a fair amount flexibility in configuring it. Next up is to do the FSM based design that is integrated into the back end. p.s. Thanks to Christopher Browne for his help. Matthew T. O'Connor 	9243664dd473a1b0aec6f658622d6d9db40ea4d2
----------------------------
Done: * -Add config variable to prevent auto-adding missing FROM-clause tables 	9ffdd91bba0e67fd77cd998ff888ebb6cbb4695d
----------------------------
"Make ""log_min_duration_statement"" SUSET --- will be adjusted with new USERLIMIT patch. "	a24c5a7b124378c054fd0a36dd98581596e74308
----------------------------
Add log_min_duration_statement. Christopher Kings-Lynne 	b952d61c545e6c5fd827187a3ec6b9871cc0ebed
----------------------------
Add missing DLLIMPORT for cpu_index_tuple_cost to src/include/optimizer/cost.h. This is required to compile the PostGIS extension module with Cygwin http://postgis.refractions.net Norman Vine 	9167a566d632c975da9c1436e67637bc63c7eda1
----------------------------
Change configure check to use $YACC, per Tom. 	152ce7a4909aec35771e925fd7fa97bae1103763
----------------------------
Add configure warning to check for bison version >= 1.875. 	fee9b7ca9b15bef9249a8efa703e858e00402c50
----------------------------
Add defense in assign_session_authorization() against trying to do catalog lookups when not in a transaction.  This prevents bizarre failures if someone tries to set a value for session_authorization in postgresql.conf.  Per report from Fernando Nasser. 	2bc84b68523f52ff8f14789719bee0178c61df84
----------------------------
Add: > * Add config variable to prevent auto-adding missing FROM-clause tables 	6d9ee7e7caceca34b49b8fde9a70195be3e5a286
----------------------------
one more change to correctly support the removeall of autocommit 	4fb5b92769e67aff9f9c4b838c047248e7e01f85
----------------------------
Make debug_ GUC varables output DEBUG1 rather than LOG, and mention in docs that CLIENT/LOG_MIN_MESSAGES now controls debug_* output location. Doc changes included. 	98b6f37e47a9eb3540493caabf57d0f952ebdc6d
----------------------------
Add configure thread tests. 	24daeb8e73f924df26a38185296d5a6a6c49acb1
----------------------------
Place statement_timeout in proper order in docs, from Bruno Wolff III. 	27330595d38a368e6c26e8d8b30b4d6d392f07e4
----------------------------
Adjust configure so that extern tzname[] will be checked for independently of whether the struct tm tm_zone member exists. Also run autoheader, which seems not to have been done lately; it added about three more things to pg_config.h.in than I was expecting... 	c120f4ba0adaeff5f4311c2edccdb58235e3ac82
----------------------------
Revert change of inclusion order for pg_config_os.h; this broke plperl on Linux and would have who knows what unpleasant effects on other platforms. If you need another include file for Windows, then add it; don't go messing with the semantics of every other port's include files. 	5e04f3857c9369351edbf8f906d1d8c2665c8a1f
----------------------------
Allow Win32 to compile under MinGW.  Major changes are: Win32 port is now called 'win32' rather than 'win' add -lwsock32 on Win32 make gethostname() be only used when kerberos4 is enabled use /port/getopt.c new /port/opendir.c routines disable GUC unix_socket_group on Win32 convert some keywords.c symbols to KEYWORD_P to prevent conflict create new FCNTL_NONBLOCK macro to turn off socket blocking create new /include/port.h file that has /port prototypes, move out of c.h new /include/port/win32_include dir to hold missing include files work around ERROR being defined in Win32 includes 	12c942383296bd626131241c012c2ab81b081738
----------------------------
Indexing support for pattern matching operations via separate operator class when lc_collate is not C. 	2c0556068fc308ed9cce06c85de7e42305d34b86
----------------------------
Backend support for autocommit removed, per recent discussions.  The only remnant of this failed experiment is that the server will take SET AUTOCOMMIT TO ON.  Still TODO: provide some client-side autocommit logic in libpq. 	f85f43dfb5b9043ea6b01d8b824c195cd7f9ed3c
----------------------------
Repair sloppiness about where cached mergeclause pathkeys are allocated. Without this fix, CVS tip dumps core when running the regression tests with geqo_threshold = 2.  I would think that a similar patch might be needed in 7.3, but cannot duplicate the failure in that branch --- so for now, leave well enough alone. 	1940434f1ef8475c8b59bb8ff03e3f3a10cac6ae
----------------------------
Update to describe new set of globally-known contexts planned for support of extended query features in new FE/BE protocol.  TransactionCommandContext is gone (PortalContext replaces it for some purposes), and QueryContext has taken on a new meaning (MessageContext plays its old role). 	0c57d69dd7c079f851b50cfb8fd6a31019020ff5
----------------------------
In the continuing saga of FE/BE protocol revisions, add reporting of initial values and runtime changes in selected parameters.  This gets rid of the need for an initial 'select pg_client_encoding()' query in libpq, bringing us back to one message transmitted in each direction for a standard connection startup.  To allow server version to be sent using the same GUC mechanism that handles other parameters, invent the concept of a never-settable GUC parameter: you can 'show server_version' but it's not settable by any GUC input source.  Create 'lc_collate' and 'lc_ctype' never-settable parameters so that people can find out these settings without need for pg_controldata.  (These side ideas were all discussed some time ago in pgsql-hackers, but not yet implemented.) 	9cbaf7217747d6b5c88ba9b500a37b8372f185c9
----------------------------
Generate pg_config.h.in by autoheader.  Separate out manually editable parts.  Standardize spelling of comments in pg_config.h. 	cb1d036acb2cb58881e27dc568cb1e539271470d
----------------------------
Remove zero_damaged_pages from postgresql.conf.sample; the only way to find out about it is to read the documentation that tells you how dangerous it is.  Add default_transaction_read_only to documentation; seems to have been overlooked in patch that added read-only transactions. Clean up check_guc comparison script, which has been suffering bit rot. 	a385186ff737a935631efd9ff4294588988e67fb
----------------------------
Fix load_user/load_group to not leave dangling pointers around if the config files are present on one pass and not present on a later pass. 	61c9ea0f3c6424fce30a2c47cf012a6d79c41da9
----------------------------
TestConfiguration returns int, not bool.  This mistake is relatively harmless on signed-char machines but would lead to core dump in the deadlock detection code if char is unsigned.  Amazingly, this bug has been here since 7.1 and yet wasn't reported till now.  Thanks to Robert Bruccoleri for providing the opportunity to track it down. 	7cd30e1590c7d6b07d00da4170eaae094ab81bbd
----------------------------
Properly document default value of log_min_error_statement in postgresql.conf. 	5e1c3302278a308377d10635581c3e94b633d899
----------------------------
Add code to apply some simple sanity checks to the header fields of a page when it's read in, per pghackers discussion around 17-Feb.  Add a GUC variable zero_damaged_pages that causes the response to be a WARNING followed by zeroing the page, rather than the normal ERROR; this is per Hiroshi's suggestion that there needs to be a way to get at the data in the rest of the table. 	fd42262836be6c3fdf77cc0c774964f04acdc913
----------------------------
Add comment to postgresql.conf: #search_path = '$user,public'   # schema names 	346182ca9223954b6fe1ac3d1f680dfae59e0473
----------------------------
Prevent multiple queries in a single string into a single transaction when autocommit is off, and document grouping when autocommit is on. 	8670e3588f12c819b46e09963091b54fce79c8f5
----------------------------
Rename README in autovacuum code to match Makefile. 	cb1672e9f826ba63bbb9b7c2551307df9f440f57
----------------------------
"Make ""win"" a separate port from ""cygwin"".  This means you can now configure under native Windows (MinGW that is), but you won't get very far compiling yet.  The dynaloader files are from Jan Wieck's patch set. "	1a7f4ed5252dd08d9bbf26a67ddf22c38528c636
----------------------------
Allow error query to start transaction in autocommit off mode. 	9a9719e4821006b7db426c18c17e7acb08d64a4b
----------------------------
"This is not the only place in the system catalogs where NULL is effectively used to mean a default value that could also be spelled out explicitly.  (ACLs behave that way, and useconfig/datconfig do too IIRC.) It's a bit of a hack, but it saves table space and backend code --- without this convention the default would have to be inserted ""manually"" since we have no mechanism to supply defaults when C code is forming a new catalog tuple. I'm inclined to leave the code alone.  But Alvaro is right that it'd be good to point out the 'infinity' option in the CREATE USER and ALTER USER man pages.  (Doc patch please?) Alvaro Herrera "	b2e09fcd5ea47250136f8dcb8ff42092a9e8be07
----------------------------
I have updated my pg_autovacuum program (formerly pg_avd, the name changed as per discussion on the patches list). This version should be a good bit better.  It addresses all the issues pointed out by Neil Conway. Vacuum and Analyze are now handled separately.  It now monitors for xid wraparound.  The number of database connections and queries has been significantly reduced compared the previous version.  I have moved it from bin to contrib.  More detail on the changes are in the TODO file. I have not tested the xid wraparound code as I have to let my AthlonXP 1600 run select 1 in a tight loop for approx. two days in order to perform the required 500,000,000 xacts. Matthew T. O'Connor 	bd18c50ba87f12d1dc0aa65c1ff0507b2d1c5c41
----------------------------
At present, dates are put into a dump in the format specified by the default datestyle.  This is not portable between installations. This patch sets DATESTYLE to ISO at the start of a pg_dump, so that the dates written into the dump will be restorable onto any database, regardless of how its default datestyle is set. Oliver Elphick 	cf4cee1b17d71f59efb0b47c79357e102f542257
----------------------------
Update name of GUC var: < * Add GUC log_statement_duration to print statement and >= min duration > * Add GUC log_statement_and_duration to print statement and >= min duration 	dc95c9f3abedf01b552fb656d1e665c8d777f8ab
----------------------------
Add: > * Add GUC log_statement_duration to print statement and >= min duration 	96fecb54dcdb4f75505e5e1bed0e8c05a0a82aad
----------------------------
Fix for GUC client_encoding variable not being handled correctly. See following thread for more details. Subject: [HACKERS] client_encoding directive is ignored in postgresql.conf From: Tatsuo Ishii <t-ishii@sra.co.jp> Date: Wed, 29 Jan 2003 22:24:04 +0900 (JST) 	e2a618fe25f9e02f17dacff4c3d2f117b56c7715
----------------------------
Here's the patch I promised over on HACKERS - it alters the implementation of '\e' history tracking for systems that have a readline compatability library without replace_history_entry.  I fall back to pushing the query onto the history stack after the \e, rather than replacing it. The patch adds one more place to look for readline headers, and a test for replace_history_entry. I've only included the patch for configure.in Ross J. Reedstrom 	adc3b34b9cc8a5aff7dd1cc9d249708490301ccb
----------------------------
Add: > * Add a script to ask system configuration questions and tune postgresql.conf 	bb402a0eca39508002fe6a91c03de68f1362a509
----------------------------
Make pg_dump/restore safer for autocommit=off in postgresql.conf. 	3f6333357f141c4529a6872b19f39c66017c7170
----------------------------
"The ""random"" regression test uses a function called oidrand(), which takes two parameters, an OID x and an integer y, and returns ""true"" with probability 1/y (the OID argument is ignored). This can be useful -- for example, it can be used to select a random sampling of the rows in a table (which is what the ""random"" regression test uses it for). This patch removes that function, because it was old and messy. The old function had the following problems: - it was undocumented - it was poorly named - it was designed to workaround an optimizer bug that no longer exists (the OID argument is to ensure that the optimizer won't optimize away calls to the function; AFAIK marking the function as 'volatile' suffices nowadays) - it used a different random-number generation technique than the other PSRNG-related functions in the backend do (it called random() like they do, but it had its own logic for setting a set and deciding when to reseed the RNG). Ok, this patch removes oidrand(), oidsrand(), and userfntest(), and improves the SGML docs a little bit (un-commenting the setseed() documentation). Neil Conway "	6cb1f4fe44a92aa97fbfd0c26ebbb8842349d90d
----------------------------
Create a GUC variable REGEX_FLAVOR to control the type of regular expression accepted by the regex operators, per discussion yesterday. Along the way, reduce deadlock_timeout from PGC_POSTMASTER to PGC_SIGHUP category.  It is probably best to insist that all backends share the same setting, but that doesn't mean it has to be frozen at startup. 	77ede8900d96647a8293d76d08c0c5d47cc1049e
----------------------------
Fix assign_session_authorization() to not be confused by all-numeric user names.  Per recent reports. 	21166170c8cac2920ba25a647421f0f0c418c021
----------------------------
Revert off setting mention for client_min_messages. Set log_min_error_messages to the proper and agreed-upon default, PANIC (off).  (BACKPATCH) 	7af352d0913b77f387a489cd79b54b040cbee7e8
----------------------------
Add: > * Add group object ownership, so groups can rename/drop/grant on objects, >   so we can implement roles 	677d77817dc0b7d17edd1aaf5526d7b2f9b4309c
----------------------------
Allow the planner to collapse explicit inner JOINs together, rather than necessarily following the JOIN syntax to develop the query plan.  The old behavior is still available by setting GUC variable JOIN_COLLAPSE_LIMIT to 1.  Also create a GUC variable FROM_COLLAPSE_LIMIT to control the similar decision about when to collapse sub-SELECT lists into their parent lists.  (This behavior existed already, but the limit was always GEQO_THRESHOLD/2; now it's separately adjustable.) 	9f5f2124754ccd605671bfe952c220b46a0e730b
----------------------------
More comment cleanups for shared_buffers in postgresql.conf. 	0c64b58b6c965fd0696a0c47700b0d68756b043a
----------------------------
"> > This patch improves the documentation for the shared_buffers GUC param. > > I'd suggest that the runtime.sgml description explicitly say ""values of > at least a few thousand are recommended for production installations"". Neil Conway "	3cd7edfee0e49c74df648ffe07ce414ca3acf0ce
----------------------------
A tiny patch to fix a typo in configure.in and another one in RELEASE_CHANGES. Manfred Koizar 	bcf7a35f3cde21ff8eb591c568418adf02f9349a
----------------------------
Fix indenting of log_min_error_statement. 	8e20b91e786e89aa25bea1eba21e282896df4d6e
----------------------------
Document that psql \encoding doesn't see SET CLIENT_ENCODING changes. 	925800cc0b656a7d53cc3af2a8dcdfe99b9cc498
----------------------------
Update ipv6 comment, move configure test to the right place 	895f954f24c1215d7876f9c4e40c8dc4e03693ae
----------------------------
Clean up quoting in configure.in.  configure did not change. 	c9d87120430f7137e074a1acdb753161d56e88bb
----------------------------
Fix GEQO to work again in CVS tip, by being more careful about memory allocation in best_inner_indexscan().  While at it, simplify GEQO's interface to the main planner --- make_join_rel() offers exactly the API it really wants, whereas calling make_rels_by_clause_joins() and make_rels_by_clauseless_joins() required jumping through hoops. Rewrite gimme_tree for clarity (sometimes iteration is much better than recursion), and approximately halve GEQO's runtime by recognizing that tours of the forms (a,b,c,d,...) and (b,a,c,d,...) are equivalent because of symmetry in make_join_rel(). 	9f76d0d926ffe72e32248b7c79f585c47e643981
----------------------------
Code review for palloc0 patch --- avoid dangerous and unnecessary practice of evaluating MemSet's arguments multiple times, except for the special case of newNode(), where we can assume the argument is a constant sizeof() operator. Also, add GetMemoryChunkContext() to mcxt.c's API, in preparation for fixing recent GEQO breakage. 	88177f77b17ef478da1dbca9acb5e3a61b346613
----------------------------
Fix line count error reporting in config files, like pg_hba.conf, per report from Oliver Elphick. Backpatch to 7.3. 	92d77c69e56579fb55126cd82e92eddf93774dad
----------------------------
I've simplified the Darwin/Mac OS X startup script I submitted earlier in the year. This version has only the two files required by the Darwin startup bundle design. Plus the sh script now uses Darwin-standard functions to start up PostgreSQL, and it checks for the presence of a variable in /etc/hostconfig, as do other Darwin startup scripts. I suggest that a new directory be created, contrib/start-scripts/darwin, and that these two files be put into it. Folks who want to use the script can read the comments inside it to figure out how to use it. David Wheeler 	b842726fc7a2b2f45b567eb03610ab71fad8d89a
----------------------------
Mention of DEFAULT_STATISTICS_TARGET default. Jeff Davis 	88ae9cd4118a0eb4a6fd8acc87f453ec113c113d
----------------------------
RANDOM_PAGE_COST clarification of docs. Joseph Shraibman 	982b26c0a935a79f973181a40bf4448e2859cdfe
----------------------------
"It looks like the problem was introduced when the ""SET autocommit"" and ""SET search_path""  commands were added to the beginning of the script. The attatched patch should fix the problem. It probably should be applied  against the 7.3 and 7.4 branches. Steven Singer "	fae2f14cddcaad0419de794c894c369e83fedbef
----------------------------
Repair core dump when trying to delete an entry from an already-NULL datconfig or useconfig field.  Per report from Dustin Sallings. 	28026681598526cea3bc50da93a4ab37a161be19
----------------------------
Recreate HISTORY file to match release.sgml changes.  Stamp 7.3 final in configure/configure.in. 	75d1ed3392aa1a04846def842d4c68f56c6024c0
----------------------------
This is a patch to make cube output work like double precision output with regard to the extra_float_digits setting. Since builtins.h was already included, I just deleted the extern statement (and accompaning comments). Bruno Wolff III 	4987ca2d888cb544a0d4edd6c9db63f04e194d3c
----------------------------
Code review for superuser_reserved_connections patch.  Don't try to do database access outside a transaction; revert bogus performance improvement in SIBackendInit(); improve comments; add documentation (this part courtesy Neil Conway). 	8362be35e82574801113a7fe4dfdc3037010fc04
----------------------------
Finish implementation of hashed aggregation.  Add enable_hashagg GUC parameter to allow it to be forced off for comparison purposes. Add ORDER BY clauses to a bunch of regression test queries that will otherwise produce randomly-ordered output in the new regime. 	6c1d4662afc6344ea7d98b5d1b248214ea0c7635
----------------------------
Add checkpoint_warning to warn of excessive checkpoints caused by too few WAL files. 	2986aa6a668bce3cfb83606bb52e9d01ae66ad6c
----------------------------
Rename hostname_lookup to log_hostname. 	c948a3f4b81788283e7a31f5056baa9cac7b3024
----------------------------
Rename show_btree_build_stats to log_btree_build_stats 	559b6c7ced676bcfed43ec92c1797f398fa731cd
----------------------------
Rename: ! #show_parser_stats = false ! #show_planner_stats = false ! #show_executor_stats = false ! #show_statement_stats = false TO: ! #log_parser_stats = false ! #log_planner_stats = false ! #log_executor_stats = false ! #log_statement_stats = false 	d36aa2e8851427856408b04cd93c605ef2f9c39a
----------------------------
Rename server_min_messages to log_min_messages.  Part of consolidation of log_ settings. 	001d5a7aa5dd42ddcb8f41d6d1c8738972cdbf7f
----------------------------
This trivial patch removes 2 unused defines from pg_config.h.in: FASTBUILD and DATEDEBUG weren't referenced by any other code. Neil Conway 	7aeab94adf2a7e1ad0d0a32ee4bdc6b30e1cadeb
----------------------------
I am attaching a patch file that will replace the previous one.  It only contains the patches to Makefile.global.in and Makefile.unixware.  The Makefile.unixware patch has been updated to include the contents of LD_LIBRARY_PATH, if present, to the -rpath (-R) option.  This change will  simplify configuring and building PostgreSQL on systems that support  LD_LIBRARY_PATH.  You can set LD_LIBRARY_PATH to include all the directorys  you want to have searched for additional libraries, run configure, then run  make.  The paths in LD_LIBRARY_PATH will then be embedded in the executables  via the -rpath (-R) option to the linker, and so will not require  LD_LIBRARY_PATH in order to run. Billy G. Allie 	c600a6ac4724ac24cfcbf852837dad4ff772bc47
----------------------------
Revise geometry regression testing to eliminate most cross-platform variation.  To do this, set extra_float_digits to -3 in the geometry test, and tweak the CIRCLE_TBL dataset to avoid values that suffer from severe cancellation error (eg, circles that just touch an axis). We still need two geometry 'expected' files to account for the difference between platforms that display minus zero as '-0' and those that just say '0', but with luck that's all we'll need. 	337f73b1bbdaa5d94a52567c3387a503ec3bc4ca
----------------------------
Add extra_float_digits GUC parameter to allow adjustment of displayed precision for float4, float8, and geometric types.  Set it in pg_dump so that float data can be dumped/reloaded exactly (at least on platforms where the float I/O support is properly implemented).  Initial patch by Pedro Ferreira, some additional work by Tom Lane. 	d2c744aa56aca7fe756a156a8e2109aaa676e54f
----------------------------
Add: > * Add GUC variables extra_float_digits and extra_double_digits to >   control output digits 419a422 > * Research interaction of setitimer() and sleep() used by statement_timeout 	476eb59f509920fe7bb40dbc93240e8994f9624a
----------------------------
"Remove completed items: < A dash (-) marks changes that will appear in the upcoming 7.3 release. > A dash (-) marks changes that will appear in the upcoming 7.4 release. 38d37 < * -Change DEBUG startup tag to LOG (Bruce) 40,51d38 < * -Add pg_backend_pid() function to backend < * -Allow logging of query durations < < < Permissions < =========== < < * -Improve control over user privileges, including table creation < * -Allow user/group names to be specified directly in pg_hba.conf (Bruce) < * -Add ~/.pgpass to store passwords with user/host/password combinations < * -Allow permissions for functions (Peter E) < * -Allow object creation to be disabled for specific users 58,60d44 < * -Make it easier to create a database owned by someone who can't createdb, <   perhaps CREATE DATABASE dbname WITH OWNER = ""user"" (Gavin) < * -Make equals sign optional in CREATE DATABASE WITH param = 'val' 65,66d48 < * -Prevent SIGHUP and 'pg_ctl reload' from changing command line <   specified parameters to postgresql.conf defaults (Peter E) 69,70d50 < * -Reserve last few process slots for super-user if max_connections reached < * -Add GUC parameter to print queries that generate errors 79d58 < * -Add domain capability (Rod Taylor) 82,84d60 < * -SELECT cash_out(2) crashes because of opaque < * -Declare typein/out functions in pg_proc with a special ""C string"" data type < * -Functions returning sets do not totally work 89d64 < * -Add GUC parameter for DATESTYLE 91,93d65 < * -Allow bytea to handle LIKE with non-TEXT patterns < * -to_char(0,'FM999.99') returns a period, to_char(1,'FM999.99') doesn't (Karel) < * -Add floor(float8) and other missing functions 97d68 < 	o -Store binary-compatible type information in the system 104d74 < 	o -Ensure we have array-eq operators for every built-in array type 139,140d108 < * -Remove brackets as multi-statement rule grouping, must use parens (Bruce) < * -Prevent aggregates from being used in rule WHERE clauses 154d121 < * -Allow UPDATE/DELETE on inherited table 166d132 < * -Add deleted bit to index tuples to reduce heap access 176d141 < * -Test hash index performance and discourage usage 182d146 < * -Add SIMILAR TO to allow character classes, 'pg_[a-c]%' 184d147 < * -Remove LIMIT #,# and force use LIMIT and OFFSET clauses in 7.3 (Bruce) 186,187d148 < * -Disallow TRUNCATE on tables that are involved in referential constraints < * -Add OR REPLACE clauses to non-FUNCTION object creation 190d150 < * -Prevent create/drop scripts from allowing extra args (Bruce) 201,205d160 < 	o -Add ALTER TABLE DROP COLUMN feature < 	o -Add ALTER TABLE DROP non-CHECK CONSTRAINT < 	o -ALTER TABLE ADD PRIMARY KEY (Tom) < 	o -ALTER TABLE ADD UNIQUE (Tom) < 	o -ALTER TABLE ALTER COLUMN SET/DROP NOT NULL (Christopher) 210d164 < 	o -Have ALTER TABLE OWNER change all dependant objects like indexes 214,216d167 < 	o -Cluster all tables at once using pg_index.indisclustered set during <           previous CLUSTER < 	o -Prevent loss of indexes, permissions, inheritance 221d171 < 	o -Allow specification of column names 224d173 < 	o -Change syntax to WITH DELIMITER, (keep old syntax around?) 228d176 < 	o -Generate failure on short COPY lines rather than pad NULLs 242,243d189 < 	o -Allow INSERT INTO my_table VALUES (a, b, c, DEFAULT, x, y, z, ...) < 	o -Disallow missing columns in INSERT ... (col) VALUES, per ANSI 248,249d193 < 	o -Add command to display locks < 	o -Add SET or BEGIN timeout parameter to cancel query 251d194 < 	o -Remove SET KSQO option now that OR processing is improved (Bruce) 254,256d196 < 	o -Add SHOW command to see locale < 	o -Allow SHOW to output as a query result, like EXPLAIN < 	o -Abort all SET changes made in an aborted transaction 264d203 < 	o -Fix PL/PgSQL to handle quoted mixed-case identifiers 287,291d225 < * -Have pg_dump use LEFT OUTER JOIN in multi-table SELECTs <   or multiple SELECTS to avoid bad system catalog entries < * -Have pg_dump -C dump database location and encoding information < * -Allow psql \d to show foreign keys < * -Allow psql \d to show temporary table structure (Tom) 294d227 < * -Have pg_dump use ADD PRIMARY KEY after COPY, for performance (Neil) 302d234 < 	o -Updateable resultSet 307d238 < 	o -Implement cancel() method on Statement 309d239 <         o -Add support for CallableStatements 311d240 < 	o -Compile under jdk 1.4 334d262 < * -Allow oid to act as a foreign key 337,338d264 < * -Allow user to control trigger firing order (Tom) < * -Add ALTER TRIGGER ... RENAME 341d266 < * -Fix foreign key constraints to not error on intermediate db states (Stephan) 350,359d274 < * -Add pg_depend table for dependency recording; use sysrelid, oid, <   depend_sysrelid, depend_oid, name < * -Auto-destroy sequence on DROP of table with SERIAL; perhaps a separate <   SERIAL type < * -Prevent column dropping if column is used by foreign key < * -Propagate column or table renaming to foreign key constraints < * -Automatically drop constraints/functions when object is dropped < * -Make foreign key constraints clearer in dump file < * -Make other constraints clearer in dump file < * -Make foreign keys easier to identify 367d281 < * -Allow autocommit so always in a transaction block 377d290 < * -Add SQL92 schemas (Tom) 400d312 < * -Cache most recent query plan(s) (Neil) [prepare] 439d350 < * -Cache system catalog information in per-database files (Tom) 450,451d360 < * -Reorder postgresql.conf WAL items in order of importance (Bruce) < * -Remove wal_files postgresql.conf option because WAL files are now recycled 465,466d373 < * -Improve dynamic memory allocation by introducing tuple-context memory <   allocation (Tom) 468d374 < * -Nested FULL OUTER JOINs don't work (Tom) 470,472d375 < * -Add new pg_proc cachable settings to specify whether function can be <   evaluated only once or once per query < * -Change FIXED_CHAR_SEL to 0.20 from 0.04 to give better selectivity (Bruce) 494,496d396 < * -Add Intimate Shared Memory(ISM) for Solaris < * -Use faster flex flags for performance improvement (Peter E) < * -Add BSD-licensed qsort() for Solaris 503,507d402 < * -Fix problems with libpq non-blocking/async code < * -Make sure all block numbers are unsigned to increase maximum table size < * -Merge LockMethodCtl and LockMethodTable into one shared structure (Bruce) < * -HOLDER/HOLDERTAB rename to PROCLOCK/PROCLOCKTAG (Bruce) < * -Remove LockMethodTable.prio field, not used (Bruce) 512,513d406 < * -Make one version of simple_prompt() in code (Bruce, Tom) < * -Compile in syslog functionaility by default (Tatsuo) 517d409 < * -Report failure to find readline or zlib at end of configure run 519,520d410 < * -Increase identifier length (NAMEDATALEN) if small performance hit, < * -Increase maximum number of function parameters if little wasted space 529,530d418 < * -Fix glibc's mktime() to handle pre-1970's dates < * -Move /contrib/retep to gborg.postgresql.org "	0579096998f2e14b14325fe6f3a0f6ddd14dff99
----------------------------
Code review for statement_timeout patch.  Fix some race conditions between signal handler and enable/disable code, avoid accumulation of timing error due to trying to maintain remaining-time instead of absolute-end-time, disable timeout before commit not after. 	55e4ef138cc68cffd12df9fc9e5587590473a074
----------------------------
SET autocommit no longer needed in /contrib because pg_regress.sh does it automatically now on regression session startup. 	e5cf1a8a26933ccaab49b708b1d4a3a6a9580509
----------------------------
Add warning that autocommit=off is not well-supported yet. 	f1c0071d5a69ac2fab431e9794950ef179c9b0b8
----------------------------
Applied patch submitted by Mike Beachy to give a better error message if configure hasn't been run before trying to build. Also cleaned up the README file and removed some obsolete files. Modified Files: jdbc/README jdbc/build.xml Removed Files: jdbc/CHANGELOG jdbc/Implementation jdbc/jdbc.jpx 	ea794574f150ec1a5268568ce4cc85e117733d15
----------------------------
Make regression tests safe for autocommit = 'off'. 	5c6a5fe18b2e8d1b4ec128c0441aca6d13d44121
----------------------------
Clean up for dblink autocommit OFF handling. 	5214f09b279356770e3a85356be80b4ea7bd92d7
----------------------------
"Update /contrib for ""autocommit TO 'on'"". Create objects in public schema. Make spacing/capitalization consistent. Remove transaction block use for object creation. Remove unneeded function GRANTs. "	aa4c702eac936964649f905741b4a99f4b489200
----------------------------
Fixed support in jdbc for 7.3 server autocommit.  With these changes the jdbc regression tests pass for both autocommit on and autocommit off Modified Files: jdbc/org/postgresql/jdbc1/AbstractJdbc1Connection.java jdbc/org/postgresql/test/jdbc2/ConnectionTest.java 	c3e7b3cc96ea1f84be7a402942a0572428d6ef25
----------------------------
Make pg_dump save for autocommit = off. 	cda776e6136502f2b703bcab54668b1275e00e95
----------------------------
Fix script to handle autocommit = 'off' by prepending autocommit 'on' to the start of the psql commandline.  This is better than adding BEGIN/END because it handles multiple queries well, and allows the return code for psql to return the proper value. 	5d8c67462d93b33b13fe5e45b26002b8e625002c
----------------------------
Fix psql to cope with autocommit off, at least during startup. Behavior of backslash commands (especially for large objects) may still require some thought. 	951ec872c703886626c56d08254d38c0cd88fc9e
----------------------------
Fix libpq startup code to work correctly in autocommit off mode. In passing, fix breakage for case where PGCLIENTENCODING is set in environment. 	e258a2b436ab9f9a435904fc8dd2acadfbc851b5
----------------------------
Have SET not start transaction when autocommit off, with doc updates. 	d015dcbe4eeaebe6084983945ef68a642c38e0e1
----------------------------
Add: > * Check GUC geqo_threshold to see if it is still accurate 	fb0b0a25dc537b5267346e07c70998fafe865736
----------------------------
"Add wording so people know PANIC is really ""off"" for log_min_error_statement. "	04287daa83a402601e58103a6436caf3d2c31ea9
----------------------------
Turn GUC log_min_error_statement off by default by setting it to PANIC. 	c74c7e604cb739ce3c5821d88f8328b5b2a233c3
----------------------------
Stamp configure for beta2. 	4852dd9d61bc1c3f609818d64d425fe4849fcb6f
----------------------------
Add mention of config.log for configure failure debugging. 	8aa966e4b8d6133e214ecd57eaec76ac9888a2a6
----------------------------
Use different sed separator for configure arguments. 	6555177f24e5d2dd8f98ac23f9ea03ac0d711bb6
----------------------------
Assorted fixes for Cygwin: Eliminate the mysterious games that the Cygwin build plays with the linker flag variables.  DLLLIBS is gone, use SHLIB_LINK like everyone else. Detect cygipc in configure, after the linker flags are set up, otherwise configure might not work at all. Make sure everything is covered by make clean. Fix the build of the new conversion procedure modules. Add new DLLIMPORT markers where required. Finally, the compiler complains if we use an explicit -I/usr/local/include, so don't do that.  Curiously, -L/usr/local/lib is still necessary. 	337da0678ab3b0fe7e339cd35c6c50ad5441a534
----------------------------
Remove leftovers from subproject removals.  Fixes for Python and Kerberos configuration. 	e43ecb3d1a1c5af574fdd6333bdd64330a148bf6
----------------------------
Stamp configure.in with 7.3b1, not just 7.3.   Seems Marc does that usually anyway. 	ba982373dc6d165b8ba5225bfc1fc758d0f496fe
----------------------------
"Updates from Tom: < * Allow logging of query durations > * -Allow logging of query durations 51,52d50 < * Make single-user local access permissions the default by limiting <   permissions on the socket file (Peter E) 72,73c70,71 < * Reserve last few process slots for super-user if max_connections reached < * Add GUC parameter to print queries that generate errors > * -Reserve last few process slots for super-user if max_connections reached > * -Add GUC parameter to print queries that generate errors 82,83c80,81 < * Declare typein/out functions in pg_proc with a special ""C string"" data type < * Functions returning sets do not totally work > * -Declare typein/out functions in pg_proc with a special ""C string"" data type > * -Functions returning sets do not totally work 90c88 < * Allow bytea to handle LIKE with non-TEXT patterns > * -Allow bytea to handle LIKE with non-TEXT patterns 94c92 < 	o Store binary-compatible type information in the system > 	o -Store binary-compatible type information in the system 97d94 < 	o -SELECT col FROM tab WHERE numeric_col = 10.1 fails, requires quotes 102c99 < 	o Ensure we have array-eq operators for every built-in array type > 	o -Ensure we have array-eq operators for every built-in array type 119d115 < * Allow setting database character set without multibyte enabled 152d147 < * Have UPDATE/DELETE clean out indexes 198,199d192 < 	o ALTER TABLE ADD COLUMN to inherited table put column in wrong place < 	  [inheritance] 201d193 < 	o Add ALTER FUNCTION 203,204c195,196 < 	o -ALTER TABLE ADD PRIMARY KEY (Tom) < 	o -ALTER TABLE ADD UNIQUE (Tom) > 	o -ALTER TABLE ADD PRIMARY KEY (Christopher) > 	o -ALTER TABLE ADD UNIQUE (Christopher) 248c240 < 	o -Remove SET KSQO option now that OR processing is improved (Tom) > 	o -Remove SET KSQO option now that OR processing is improved (Bruce) 280c272 < * Have pg_dump use LEFT OUTER JOIN in multi-table SELECTs > * -Have pg_dump use LEFT OUTER JOIN in multi-table SELECTs 287d278 < * Add config file check for $ODBCINI, $HOME/.odbc.ini, installpath/etc/odbc.ini 318,322d308 < * ODBC < 	o ODBC 3.0 support < 	o Unicode(UCS-2) support < 	o Updatable cursors support < 337c323 < * Fix foreign key constraints to not error on intermediate db states (Stephan) > * -Fix foreign key constraints to not error on intermediate db states (Stephan) 352c338 < * Propagate column or table renaming to foreign key constraints > * -Propagate column or table renaming to foreign key constraints 447c433 < * Remove wal_files postgresql.conf option because WAL files are now recycled > * -Remove wal_files postgresql.conf option because WAL files are now recycled 460c446 < * Improve dynamic memory allocation by introducing tuple-context memory > * -Improve dynamic memory allocation by introducing tuple-context memory 463c449 < * Nested FULL OUTER JOINs don't work (Tom) > * -Nested FULL OUTER JOINs don't work (Tom) "	12e5b8dbcb90f2365ed3b18326e027b739e251eb
----------------------------
Done: > * -Add OR REPLACE clauses to non-FUNCTION object creation > * -Allow autocommit so always in a transaction block > * -Cache most recent query plan(s) (Neil) [prepare] 	0ee105bb4c447d29f55c6a9052e88ae9b3e5ab33
----------------------------
Remove documentation that says debug_query_string is only used by pgmonitor. Now log_min_error_statement uses it. 	6a8babc206976fdce1ccd8a63b85c1a01dfe148d
----------------------------
Add log_duration to GUC/postgresql.conf. Rename debug_print_query to log_statement and rename show_query_stats to show_statement_stats. 	548d646e65223318e4ccbfdbb25a003568d4c703
----------------------------
Updates to reflect availability of autocommit option. 	9c279355fbf332dbf6dcebbe10d38e10503bf4dd
----------------------------
AUTOCOMMIT mode is now an available backend GUC variable; setting it to false provides more SQL-spec-compliant behavior than we had before. I am not sure that setting it false is actually a good idea yet; there is a lot of client-side code that will probably be broken by turning autocommit off.  But it's a start. Loosely based on a patch by David Van Wie. 	26993b2918551552b74b559ab410228dc0670cd5
----------------------------
Re-enable perl configure tests for psql help file generation. 	4890ec9eac2124609506f31a0a65c4e65f29aada
----------------------------
This patch reserves the last superuser_reserved_connections slots for connections by the superuser only. This patch replaces the last patch I sent a couple of days ago. It closes a connection that has not been authorised by a superuser if it would leave less than the GUC variable ReservedBackends (superuser_reserved_connections in postgres.conf) backend process slots free in the SISeg. This differs to the first patch which only reserved the last ReservedBackends slots in the procState array. This has made the free slot test more expensive due to the use of a lock. After thinking about a comment on the first patch I've also made it a fatal error if the number of reserved slots is not less than the maximum number of connections. Nigel J. Andrews 	626eca697cf4470c44cb76f0603302201538c47e
----------------------------
The unit for statement_timeout is s/1000, not s/1000000 Manfred Koizar 	31fbdad6e5d886cbd83a74560be451e0dbdf70b4
----------------------------
Okay, libpq++ is moved to GBorg, and all traces of it have been removed from the core repository ... I haven't *moved* the libpq++ files out of the tree, mainly as we want to keep them in place for past branches ... Peter, I think I've covered all the files I need, and re-ran autoconf to make sure the configure file is in place properly ... 	da4683fbe1cba48cf5b5b29055b66e0bacb00162
----------------------------
"Add ""few"": > * Reserve last few process slots for super-user if max_connections reached "	ab0f98518c87ee5303b29d893e57600f53428245
----------------------------
Add: < > * Reserve last process slot for super-user if max_connections reached 	8c8a56ee2d4cb79690324b58a893983e9b66f7c1
----------------------------
Added: > * Allow configuration files to be specified in a different directory 	2f7e3a2ffcca3a9de7a5f5665d5245b0449a46f4
----------------------------
"> Neil Conway <nconway@klamath.dyndns.org> writes: > > This patch improves the documentation of the UPDATE and ALTER TABLE > > commands to elaborate on the effect of specifying an ""ONLY"" clause. > > Unfortunately this is still only half the truth ... see the > SQL_INHERITANCE configuration variable. Okay, I've attached an updated patch with more information on SQL_INHERITANCE and inheritance behavior in prior releases. Neil Conway "	88bd306832f476987cf8166e8095756a5986d38b
----------------------------
"As discussed on several occasions previously, the new anonymous composite type capability makes it possible to create a system view based on a table function in a way that is hopefully palatable to everyone. The attached patch takes advantage of this, moving show_all_settings() from contrib/tablefunc into the backend (renamed all_settings(). It is defined as a builtin returning type RECORD. During initdb a system view is created to expose the same information presently available through SHOW ALL. For example: test=# select * from pg_settings where name like '%debug%'; name          | setting -----------------------+--------- debug_assertions      | on debug_pretty_print    | off debug_print_parse     | off debug_print_plan      | off debug_print_query     | off debug_print_rewritten | off wal_debug             | 0 (7 rows) Additionally during initdb two rules are created which make it possible to change settings by updating the system view -- a ""virtual table"" as Tom put it. Here's an example: Joe Conway "	45e25445846e98fe4aac23d1073566c08cd62f0b
----------------------------
Load and keep conversion function info when SET CLIENT_ENCODING TO is executed to prevent database access while performing encoding conversion. 	3c63578a7e703800c73bac15174e5f30f6c72682
----------------------------
Restructure local-buffer handling per recent pghackers discussion. The local buffer manager is no longer used for newly-created relations (unless they are TEMP); a new non-TEMP relation goes through the shared bufmgr and thus will participate normally in checkpoints.  But TEMP relations use the local buffer manager throughout their lifespan.  Also, operations in TEMP relations are not logged in WAL, thus improving performance. Since it's no longer necessary to fsync relations as they move out of the local buffers into shared buffers, quite a lot of smgr.c/md.c/fd.c code is no longer needed and has been removed: there's no concept of a dirty relation anymore in md.c/fd.c, and we never fsync anything but WAL. Still TODO: improve local buffer management algorithms so that it would be reasonable to increase NLocBuffer. 	5df307c7782518c4a3c19ffd05c7cb591b97e23c
----------------------------
Here is a doc patch for the SHOW X changes and new config-settings functions. If there are no objections, please apply. Joe Conway 	7ef5634701c086ba62fe425bf4b6c1bd1fa68740
----------------------------
Instead of having a configure-time DEFAULT_ATTSTATTARGET, store -1 in attstattarget to indicate 'use the default'.  The default is now a GUC variable default_statistics_target, and so may be changed on the fly.  Along the way we gain the ability to have pg_dump dump the per-column statistics target when it's not the default.  Patch by Neil Conway, with some kibitzing from Tom Lane. 	ce7565ab91100747d250ef67d72af5c1b01150d4
----------------------------
"As mentioned above, here is my contrib/tablefunc patch. It includes three functions which exercise the tablefunc API. show_all_settings() - returns the same information as SHOW ALL, but as a query result normal_rand(int numvals, float8 mean, float8 stddev, int seed) - returns a set of normally distributed float8 values - This routine implements Algorithm P (Polar method for normal deviates) from Knuth's _The_Art_of_Computer_Programming_, Volume 2, 3rd ed., pages 122-126. Knuth cites his source as ""The polar method"", G. E. P. Box, M. E. Muller, and G. Marsaglia, _Annals_Math,_Stat._ 29 (1958), 610-611. crosstabN(text sql) - returns a set of row_name plus N category value columns - crosstab2(), crosstab3(), and crosstab4() are defined for you, but you can create additional crosstab functions per directions in the README. Joe Conway "	41f862ba8766fd2cee7c3f939c4adf84e2b7b218
----------------------------
Make statement_timeout apply to entire query string, not per statement. 	b6440a7ece2cf729b27052c6cfd7e837a1eb74eb
----------------------------
Fix a bug about automatic client_encoding setting. 	67d0cb2d77187f83bb223f27fe9dbfc7846dbb7b
----------------------------
"Mark items as done: > * -Add GUC parameter for DATESTYLE > 	o -Allow specification of column names > 	o -Change syntax to WITH DELIMITER, (keep old syntax around?) > 	o -Remove SET KSQO option now that OR processing is improved (Tom) > 	o -Allow SHOW to output as a query result, like EXPLAIN > * -Add SQL92 schemas (Tom) "	17b28503d0d6c354606fce93d26b2febf18258c5
----------------------------
"Hello, i noticed that win32 native stopped working/compiling after the SSL merge . So i took the opportunity to fix some stuff: 1. Made the thing compile (typos & needed definitions) with the new pqsecure_* s tuff, and added fe-secure.c to the win32.mak makefile. 2. Fixed some MULTIBYTE compile errors (when building without MB support). 3. Made it do that you can build with debug info: ""nmake -f win32.mak DEBUG=1"". 4. Misc small compiler speedup changes. The resulting .dll has been tested in production, and everything seems ok. I CC:ed -hackers because i'm not sure about two things: 1. In libpq-int.h I typedef ssize_t as an int because Visual C (v6.0) doesn't de fine ssize_t. Is that ok, or is there any standard about what type should be use d for ssize_t? 2. To keep the .dll api consistent regarding MULTIBYTE I just return -1 in fe-connect.c:PQsetClientEncoding() instead of taking away the whole function. I wonder if i should do any compares with the conn->client_encoding and return 0 if not hing would have changed (if so how do i check that?). Regards Magnus Naeslund "	b6d2faaf24cb7f39c66667d2c1d1472f3c9ab4f8
----------------------------
Add new configure files for missing-oid patch. 	1430271e99a5baa2bcc6f05c2f58ded4faa630a9
----------------------------
"The attached patch fixes a build problem with GEQO when using the PX recombination operator, changes some elog() messages from LOG to DEBUG1, puts some debugging functions inside the appropriate #ifdef (not enabled by default), and makes a few other minor cleanups. BTW, the elog() change is motivated by at least one user who has sent a concerned email to -general asking exactly what the ""ERX recombination operator"" is, and what it is doing to their DBMS. Neil Conway "	38dd3ae7d032eecc6ddadcbd402d90f6ac38f6a3
----------------------------
Make src/backend/port/*.c file location dependent only on configure.in. 	7f43165dd272f6df9e3df8a0fa8386ad60276e4a
----------------------------
Done, not sure when, reported by Neil Conway: > * -Report failure to find readline or zlib at end of configure run 	df432df9face8d69c9fd5ec4e77d6636ead2e00f
----------------------------
This fixes 2 inaccuracies in the recently added SQL99 feature list docs. UNIQUE and DISTINCT predicates are both listed as implemented -- AFAIK, neither is. I also included another trivial patch which adds the default location of the DSSSL stylesheets on my system (Debian unstable, docbook-dsssl 1.76) to the list of paths that configure looks for. Neil Conway 	7fb9b5d434a507864196c11e9f7f4b4ce5793151
----------------------------
Remove certain Makefile dependencies by using full pathnames in configure.in. 	b9104e3a97ad9f230569796c279fb37359e49d73
----------------------------
Add SET statement_timeout capability.  Timeout is in ms.  A value of zero turns off the timer. 	4db8718e84a40125e8a7c2ffcfccf50932cdfd85
----------------------------
"UPDATED PATCH: Attached are a revised set of SSL patches.  Many of these patches are motivated by security concerns, it's not just bug fixes.  The key differences (from stock 7.2.1) are: *) almost all code that directly uses the OpenSSL library is in two new files, src/interfaces/libpq/fe-ssl.c src/backend/postmaster/be-ssl.c in the long run, it would be nice to merge these two files. *) the legacy code to read and write network data have been encapsulated into read_SSL() and write_SSL().  These functions should probably be renamed - they handle both SSL and non-SSL cases. the remaining code should eliminate the problems identified earlier, albeit not very cleanly. *) both front- and back-ends will send a SSL shutdown via the new close_SSL() function.  This is necessary for sessions to work properly. (Sessions are not yet fully supported, but by cleanly closing the SSL connection instead of just sending a TCP FIN packet other SSL tools will be much happier.) *) The client certificate and key are now expected in a subdirectory of the user's home directory.  Specifically, - the directory .postgresql must be owned by the user, and allow no access by 'group' or 'other.' - the file .postgresql/postgresql.crt must be a regular file owned by the user. - the file .postgresql/postgresql.key must be a regular file owned by the user, and allow no access by 'group' or 'other'. At the current time encrypted private keys are not supported. There should also be a way to support multiple client certs/keys. *) the front-end performs minimal validation of the back-end cert. Self-signed certs are permitted, but the common name *must* match the hostname used by the front-end.  (The cert itself should always use a fully qualified domain name (FDQN) in its common name field.) This means that psql -h eris db will fail, but psql -h eris.example.com db will succeed.  At the current time this must be an exact match; future patches may support any FQDN that resolves to the address returned by getpeername(2). Another common ""problem"" is expiring certs.  For now, it may be a good idea to use a very-long-lived self-signed cert. As a compile-time option, the front-end can specify a file containing valid root certificates, but it is not yet required. *) the back-end performs minimal validation of the client cert. It allows self-signed certs.  It checks for expiration.  It supports a compile-time option specifying a file containing valid root certificates. *) both front- and back-ends default to TLSv1, not SSLv3/SSLv2. *) both front- and back-ends support DSA keys.  DSA keys are moderately more expensive on startup, but many people consider them preferable than RSA keys.  (E.g., SSH2 prefers DSA keys.) *) if /dev/urandom exists, both client and server will read 16k of randomization data from it. *) the server can read empheral DH parameters from the files $DataDir/dh512.pem $DataDir/dh1024.pem $DataDir/dh2048.pem $DataDir/dh4096.pem if none are provided, the server will default to hardcoded parameter files provided by the OpenSSL project. Remaining tasks: *) the select() clauses need to be revisited - the SSL abstraction layer may need to absorb more of the current code to avoid rare deadlock conditions.  This also touches on a true solution to the pg_eof() problem. *) the SIGPIPE signal handler may need to be revisited. *) support encrypted private keys. *) sessions are not yet fully supported.  (SSL sessions can span multiple ""connections,"" and allow the client and server to avoid costly renegotiations.) *) makecert - a script that creates back-end certs. *) pgkeygen - a tool that creates front-end certs. *) the whole protocol issue, SASL, etc. *) certs are fully validated - valid root certs must be available. This is a hassle, but it means that you *can* trust the identity of the server. *) the client library can handle hardcoded root certificates, to avoid the need to copy these files. *) host name of server cert must resolve to IP address, or be a recognized alias.  This is more liberal than the previous iteration. *) the number of bytes transferred is tracked, and the session key is periodically renegotiated. *) basic cert generation scripts (mkcert.sh, pgkeygen.sh).  The configuration files have reasonable defaults for each type of use. Bear Giles "	19570420f5318343ed7a263cc6046fd5605b22cc
----------------------------
"Attached are a revised set of SSL patches.  Many of these patches are motivated by security concerns, it's not just bug fixes.  The key differences (from stock 7.2.1) are: *) almost all code that directly uses the OpenSSL library is in two new files, src/interfaces/libpq/fe-ssl.c src/backend/postmaster/be-ssl.c in the long run, it would be nice to merge these two files. *) the legacy code to read and write network data have been encapsulated into read_SSL() and write_SSL().  These functions should probably be renamed - they handle both SSL and non-SSL cases. the remaining code should eliminate the problems identified earlier, albeit not very cleanly. *) both front- and back-ends will send a SSL shutdown via the new close_SSL() function.  This is necessary for sessions to work properly. (Sessions are not yet fully supported, but by cleanly closing the SSL connection instead of just sending a TCP FIN packet other SSL tools will be much happier.) *) The client certificate and key are now expected in a subdirectory of the user's home directory.  Specifically, - the directory .postgresql must be owned by the user, and allow no access by 'group' or 'other.' - the file .postgresql/postgresql.crt must be a regular file owned by the user. - the file .postgresql/postgresql.key must be a regular file owned by the user, and allow no access by 'group' or 'other'. At the current time encrypted private keys are not supported. There should also be a way to support multiple client certs/keys. *) the front-end performs minimal validation of the back-end cert. Self-signed certs are permitted, but the common name *must* match the hostname used by the front-end.  (The cert itself should always use a fully qualified domain name (FDQN) in its common name field.) This means that psql -h eris db will fail, but psql -h eris.example.com db will succeed.  At the current time this must be an exact match; future patches may support any FQDN that resolves to the address returned by getpeername(2). Another common ""problem"" is expiring certs.  For now, it may be a good idea to use a very-long-lived self-signed cert. As a compile-time option, the front-end can specify a file containing valid root certificates, but it is not yet required. *) the back-end performs minimal validation of the client cert. It allows self-signed certs.  It checks for expiration.  It supports a compile-time option specifying a file containing valid root certificates. *) both front- and back-ends default to TLSv1, not SSLv3/SSLv2. *) both front- and back-ends support DSA keys.  DSA keys are moderately more expensive on startup, but many people consider them preferable than RSA keys.  (E.g., SSH2 prefers DSA keys.) *) if /dev/urandom exists, both client and server will read 16k of randomization data from it. *) the server can read empheral DH parameters from the files $DataDir/dh512.pem $DataDir/dh1024.pem $DataDir/dh2048.pem $DataDir/dh4096.pem if none are provided, the server will default to hardcoded parameter files provided by the OpenSSL project. Remaining tasks: *) the select() clauses need to be revisited - the SSL abstraction layer may need to absorb more of the current code to avoid rare deadlock conditions.  This also touches on a true solution to the pg_eof() problem. *) the SIGPIPE signal handler may need to be revisited. *) support encrypted private keys. *) sessions are not yet fully supported.  (SSL sessions can span multiple ""connections,"" and allow the client and server to avoid costly renegotiations.) *) makecert - a script that creates back-end certs. *) pgkeygen - a tool that creates front-end certs. *) the whole protocol issue, SASL, etc. *) certs are fully validated - valid root certs must be available. This is a hassle, but it means that you *can* trust the identity of the server. *) the client library can handle hardcoded root certificates, to avoid the need to copy these files. *) host name of server cert must resolve to IP address, or be a recognized alias.  This is more liberal than the previous iteration. *) the number of bytes transferred is tracked, and the session key is periodically renegotiated. *) basic cert generation scripts (mkcert.sh, pgkeygen.sh).  The configuration files have reasonable defaults for each type of use. Bear Giles "	a9bd17616e687115a824e0459133d25b536cd1d6
----------------------------
Update fsync FAQ item. 	8d1c1d40ec25424d08539cdd358cfcc437adeb63
----------------------------
Rearrange LOG_CONNECTIONS code so that two log messages are made: one immediately upon forking to handle a new connection, and one after the authentication cycle is finished.  Per today's pggeneral discussion. 	75c93c0a68ce609064002a28ff39396220bc74e0
----------------------------
Change PL/Perl and Pg interface build to use configured compiler and Makefile.shlib system, not MakeMaker. 	7662419f1bc1a994193c319c9304dfc47e121c98
----------------------------
Change PL/Tcl build to use configured compiler and Makefile.shlib system, not Tcl-provided one. Make sure export file, if any, is cleaned. Tcl configuration is now read directly in configure and recorded in Makefile.global.  This eliminates some duplicate efforts and allows for easier hand-editing of the results, if necessary. 	2f2d05763d1c55c7998c0d7030659e3db6f60183
----------------------------
Dept. of second thoughts: interaction between DoIt and makeDepend in set_config_option wasn't quite right.  Also clean up a couple other things that could have been done better. 	5f21560ae8f7387cfe4e109a5bdc01c58f82fbe5
----------------------------
Merge the last few variable.c configuration variables into the generic GUC support.  It's now possible to set datestyle, timezone, and client_encoding from postgresql.conf and per-database or per-user settings.  Also, implement rollback of SET commands that occur in a transaction that later fails.  Create a SET LOCAL var = value syntax that sets the variable only for the duration of the current transaction. All per previous discussions in pghackers. 	f0811a74b37427d7ee5eee56b00f7f2ea323d7d6
----------------------------
fixed problem connecting to server with client_min_messages set to debug.  The code was not expecting to receive notice messages during the connection handshake. 	e25c93c7eb4a9a1a50b771cc33448b9d3519f403
----------------------------
I'm at the win32 error messages once more. The DLL load thingy doesn't work on all win9x machines, so i made it go thru a l ookup table instead, using the DLL as last resort.  I also moved this out of the fe-misc.c file because of the size of the lookup ta ble. Who knows, we might add more other win32 specific code there in the future. I also fixed a small typo in the pg_config.h.win32 that made the compiler compla in about the gnu snprintf declaration. I tried to make this patch with psql coding style. I've successfully tested this on win2k and win98 and it works fine (i.e. the mes sage shows on win98 too, it didn't with the old implementation). Magnus Naeslund 	30571b549675ea8dfab2aeeb65eaf607072e86e1
----------------------------
Based on this report, I am adding a FUNC_MAX_ARGS define to src/include/pg_config.h.win32.  Certainly if we have INDEX_MAX_KEYS in there, we should have FUNC_MAX_ARGS too. Report from Chris Ryan 	42f2e5bd11416001e724885d05676457854609df
----------------------------
"Support alternate storage scheme of 64-bit integer for date/time types. Use ""--enable-integer-datetimes"" in configuration to use this rather than the original float8 storage. I would recommend the integer-based storage for any platform on which it is available. We perhaps should make this the default for the production release. Change timezone(timestamptz) results to return timestamp rather than a character string. Formerly, we didn't have a way to represent timestamps with an explicit time zone other than freezing the info into a string. Now, we can reasonably omit the explicit time zone from the result and return a timestamp with values appropriate for the specified time zone. Much cleaner, and if you need the time zone in the result you can put it into a character string pretty easily anyway. Allow fractional seconds in date/time types even for dates prior to 1BC. Limit timestamp data types to 6 decimal places of precision. Just right for a micro-second storage of int8 date/time types, and reduces the number of places ad-hoc rounding was occuring for the float8-based types. Use lookup tables for precision/rounding calculations for timestamp and interval types.  Formerly used pow() to calculate the desired value but with a more limited range there is no reason to not type in a lookup table. Should be *much* better performance, though formerly there were some optimizations to help minimize the number of times pow() was called. Define a HAVE_INT64_TIMESTAMP variable. Based on the configure option ""--enable-integer-datetimes"" and the existing internal INT64_IS_BUSTED. Add explicit date/interval operators and functions for addition and subtraction. Formerly relied on implicit type promotion from date to timestamp with time zone. Change timezone conversion functions for the timetz type from ""timetz()"" to ""timezone()"". This is consistant with other time zone coersion functions for other types. Bump the catalog version to 200204201. Fix up regression tests to reflect changes in fractional seconds representation for date/times in BC eras. All regression tests pass on my Linux box. "	547df0cc853c3fe70dbf33e241cbe46f5e441b3e
----------------------------
Add: > * Add utility to compute accurate random_page_cost value 	ed20cdfc5387d7e8d8bf41bfb3ac0156fdceb2d3
----------------------------
Adjust rules for search_path so that pg_catalog is never implicitly selected as the creation target namespace; to make that happen, you must explicitly set search_path that way.  This makes initdb a hair more complex but seems like a good safety feature. 	b66cbc1fa26aebfcfecbfff7c92d804d083af843
----------------------------
"Duplicate removed: < 	o Allow cursors to be DECLAREd/OPENed/CLOSEed outside transactions "	010d1af3ec896da9bfbdf114b69a1d6bd4de82b5
----------------------------
Add missing mention of 'log' option for client_min_messages. 	f5648c205c0680944209c3424eb0525d2d3e253f
----------------------------
Create a new GUC variable search_path to control the namespace search path.  The default behavior if no per-user schemas are created is that all users share a 'public' namespace, thus providing behavior backwards compatible with 7.2 and earlier releases.  Probably the semantics and default setting will need to be fine-tuned, but this is a start. 	838fe25a9532ab2e9b9b7517fec94e804cf3da81
----------------------------
Move src/GNUmakefile.in to src/Makefile and src/backend/port/Makefile.in to src/backend/port/Makefile All configure substitutions are now done in Makefile.global. 	f362dcec61bc8df8b13d65897aecaaac2ce1b7b0
----------------------------
Pleas apply it for 7.2.1 and current CVS. Patch fixes using lc.lang instead of lc.lc_ctype. Teodor Sigaev 	cdfe4bb64f5bb2fdc091c860d69754203f7c0f42
----------------------------
Change made to elog: o  Change all current CVS messages of NOTICE to WARNING.  We were going to do this just before 7.3 beta but it has to be done now, as you will see below. o Change current INFO messages that should be controlled by client_min_messages to NOTICE. o Force remaining INFO messages, like from EXPLAIN, VACUUM VERBOSE, etc. to always go to the client. o Remove INFO from the client_min_messages options and add NOTICE. Seems we do need three non-ERROR elog levels to handle the various behaviors we need for these messages. Regression passed. 	92288a1cf9490be3835dc8524ee2ba407f1b885a
----------------------------
Modify: < * Add GUC parameter for eurodates > * Add GUC parameter for DATESTYLE 	6488c9d12fed57649f0bfa7c9f2d18e6a21ad73c
----------------------------
Commit to match discussed elog() changes.  Only update is that LOG is now just below FATAL in server_min_messages.  Added more text to highlight ordering difference between it and client_min_messages. --------------------------------------------------------------------------- REALLYFATAL => PANIC STOP => PANIC New INFO level the prints to client by default New LOG level the prints to server log by default Cause VACUUM information to print only to the client NOTICE => INFO where purely information messages are sent DEBUG => LOG for purely server status messages DEBUG removed, kept as backward compatible DEBUG5, DEBUG4, DEBUG3, DEBUG2, DEBUG1 added DebugLvl removed in favor of new DEBUG[1-5] symbols New server_min_messages GUC parameter with values: DEBUG[5-1], INFO, NOTICE, ERROR, LOG, FATAL, PANIC New client_min_messages GUC parameter with values: DEBUG[5-1], LOG, INFO, NOTICE, ERROR, FATAL, PANIC Server startup now logged with LOG instead of DEBUG Remove debug_level GUC parameter elog() numbers now start at 10 Add test to print error message if older elog() values are passed to elog() Bootstrap mode now has a -d that requires an argument, like postmaster 	a033daf5663944872080f1f52deb2ffcb40f4042
----------------------------
User and database-specific session defaults for run-time configuration variables.  New commands ALTER DATABASE ... SET and ALTER USER ... SET. 	1aac2c852a2ccd817daf2dac99cf450e7822eb20
----------------------------
"The version is now 7.01.0010. 1) Handle parameter array. 2) Allow re-use of the connection handle after SQLDisconnect. 3) Reject NULL if no indicator specified. 4) Improve the handling of '_' in table name. 5) Unify internal begin/commit/abort operations. 6) Change SQLTables() to return null not """" for the table_owner. 7) Fix a bug about parameter handling reported by Benoit Menendez. 8) Add cast in handling ODBC date/time escape sequences. 9) Fix a bug about cache_size handing in declare/fetch mode. [ODBC3.0 related] 10) Improve the handling of descriptor handles(ODBC3.0). 11) Improve the type handling of some types for ODBC3.0. [Thanks to Marcelo Aceto for his useful patches] 12) Allow nested ODBC escape. 13) Allow changing autocommit on/off inside the transaction block. 14) Improve the handling of ODBC scalar functions. "	3c16d095b5b395560a567db8ae8cfa06899150f9
----------------------------
Don't Assert() that fsync() and close() never fail; I have seen this crash on Solaris when over disk quota.  Instead, report such failures via elog(DEBUG). 	d99fb0d909027c60be36767559c535eb1cbae4fc
----------------------------
Stamp configure/configure.in for 7.2, already did register.txt and bug.template. 	42e28d209c3dea644b6d111ae4c84b620fea0ded
----------------------------
Remove gratuitous redefinition of inline, which should already have been taken care of in pg_config.h. 	7798b50c609227d230e783e5cfd218e5bb2aebc4
----------------------------
Suppress bogus soname switch that RedHat RPMs put into tclConfig.sh. 	2f383b2de66e95d5d86527d3d2786842a5428f56
----------------------------
Mention that 'make distclean' is a good idea when changing configure options.  Document --with-pam and --enable-depend, do some minor copy-editing. 	75f0ba9fe3076f87aeaa536b4217ab7b9c55a170
----------------------------
Improve description of autocommit behavior in ecpg manual pages. 	9600ccad132556e1f72f1feaec5ece14b8d30db1
----------------------------
Repair the GEQO bibliography.  It was marked up all wrong.  Move some of the info to the main bibliography. 	9c9a72b80766873c8c6da18d5129c422ad151177
----------------------------
ecpg.sgml manual page updated to ON. --------------------------------------------------------------------------- When you run 'ecpg --help' you get the following: -t   turn on autocommit of transactions amongst the other options... Shouldn't this be OFF as per the documentation? Best regards, Lee. -- Lee Kindness,   Senior Software Engineer,   lkindness@csl.co.uk 	99a3396822b8bc87a3bcd5af4a87666374bcb63e
----------------------------
Updated: < * Add config file check for $ODBCINI, $HOME/.odbc.ini, and /etc/odbc.ini --- > * Add config file check for $ODBCINI, $HOME/.odbc.ini, installpath/etc/odbc.ini 	13acb5b37d67449b20575620e67faf1ed6f5fde9
----------------------------
Added > * Add config file check for $ODBCINI, $HOME/.odbc.ini, and /etc/odbc.ini 	9c00d0de578f527c3cf97af2a62381455956d697
----------------------------
Added > * Report failure to find readline or zlib at end of configure run 	ce286ff6b5f1be2b84734d4b3d16fd7e8bed00a5
----------------------------
Move geqo enable into proper section. 	e71493300cbf7271569fae157d3c7c02efc5245a
----------------------------
Add configure-time check whether sig_atomic_t is defined; if not, provide a default definition equating it to 'int'.  Should trigger only on machines with pre-ANSI-C header files, eg SunOS 4.1.x. 	18ab41eeefa5e7d1f1bb5a9f9108be06bbe77689
----------------------------
update configure.in for b3 ... 	6bfc98b699bd688f6adec9e0607066af5d30a188
----------------------------
Add configure result checks on odbc, per Peter E. 	07de4cbbbb7c3f5ef9728342a35efc12f6d6080b
----------------------------
Update md5.h because it can't get the value from configure. 	2c1784a9c7b52c0acee88420aeabd6171be76c6e
----------------------------
Update WAL configuration discussion to reflect post-7.1 tweaking. Minor copy-editing. 	6b0be33446c58b7641db20462370e754715ce19f
----------------------------
bmake sure that configure is tags as 7.2b1 now instead of 7.2devel 	1f42f1da4ed19780d6e4a7ffc81427c152d6ece1
----------------------------
Move init_ps_display from postgres.c to postmaster.c, putting it just after receipt of the startup packet.  Now, postmaster children that are waiting for client authentication response will show as 'postgres: user database host authentication'.  Also, do an init_ps_display for startup/shutdown/checkpoint subprocesses, so that they are readily identifiable as well.  Fix an obscure race condition that could lead to Assert failure in the postmaster --- attempting to start a checkpoint process before any connections have been received led to calling PostmasterRandom before setting random_seed. 	eb133197b63edf84b24a529f365902c46bc92e57
----------------------------
"Add a new function ""pg_client_encoding"" which returns the current client side encoding name. This is necessary for client API's such as JDBC to perform correct encoding conversions. See my email ""[HACKERS] pg_client_encoding"" 10 Sep 2001. "	f426465ba911051fa9fce57c7c4b49350e9dbbd3
----------------------------
Document use of GEQO param in subquery pullups. 	e98476eb032bd4dc32ca97212b660cad0bbadef4
----------------------------
Some further kibitzing on cachability of datetime functions. In particular, mark all I/O functions that can produce or consume a date as noncachable, in light of existence of DateStyle variable. 	2b7ccb17e1cfb9c999bf8dbe93966a693fb4dfac
----------------------------
Revise shmget() and semget() failure messages to mention the possibility of coping by reducing shared_buffers/max_connections settings. 	c7a7107f4194f7eebdc4ee101026f4d87e02306b
----------------------------
Make libpq++ safe again for older C++ compilers.  Do 'using namespace std' only if configure found it was safe to do so; do not assume const_cast is available. 	95d4821b1cc56f834b1d901bb9f0bdaf43ff8cc0
----------------------------
Allow the postmaster to accept changes in PGC_BACKEND GUC variables from the config file, so that these changes will propagate to backends started later.  Already-started backends continue to ignore changes in these variables. 	f00da6d841ad3a506aaa7b8d532fd7b5a4a8f247
----------------------------
Create a GUC parameter max_files_per_process that is a configurable upper limit on what we will believe from sysconf(_SC_OPEN_MAX).  The default value is 1000, so that under ordinary conditions it won't affect the behavior.  But on platforms where the kernel promises far more than it can deliver, this can be used to prevent running out of file descriptors.  See numerous past discussions, eg, pgsql-hackers around 23-Dec-2000. 	f9f258281e0b3ccae1ca3e349f527e4b64c898ba
----------------------------
Suggest running ldconfig after installation if available. 	91778e890de01eb02160f6326450d2e4eeda580c
----------------------------
Add an overall timeout on the client authentication cycle, so that a hung client or lost connection can't indefinitely block a postmaster child (not to mention the possibility of deliberate DoS attacks). Timeout is controlled by new authentication_timeout GUC variable, which I set to 60 seconds by default ... does that seem reasonable? 	35b7601b0484f8cf73299932b610bba6bcdde387
----------------------------
max_locks_per_transaction seems to be a more consistent name than max_locks_per_xact. 	dfdbf6898f378420ef136daf3ce786b225dc9d5d
----------------------------
"Attached is a patch that fixes ConnectionTest.testTransactionIsolation() in the JDBC driver's test suite. This reduces the number of failures of the test suite from 7 to 6. The patch fixes the test case itself, rather than the driver. In addition to the change described in my posting below, I fixed the part of the test with autocommit enabled. The author of the test assumed that setting the transaction isolation level would have no effect, but in fact it does. Perhaps the test case worked with pre-7.1 behaviour, when the JDBC driver set the isolation level in every transaction, instead of using ""set session characteristics"". Anyway, now it works with a backend built from current CVS and the behaviour is JDBC compliant. I also extended the test case by changing the isolation level before beginning a transaction and verifying it inside the transaction. Regards, Ren? Pijlman "	c69bb04acc13e0c1aa4e0b5e7910f6850d71173b
----------------------------
Update SCM_CREDS for Net/Free/BSD-OS.  Add configure checks. 	a7621c92ae08aa7b7316244a4ac82ac05bd564bb
----------------------------
Missed a few places that referred to a compile-time limit on max_connections. 	e67bb7af5a2e0f014fc69cd168954f022de90a51
----------------------------
Get rid of PID entries in shmem hash table; there is no longer any need for them, and making them just wastes time during backend startup/shutdown. Also, remove compile-time MAXBACKENDS limit per long-ago proposal. You can now set MaxBackends as high as your kernel can stand without any reconfiguration/recompilation. 	863aceb54f956ca9d6d06a44244d7a1b13e99c8b
----------------------------
"Commit Karel's patch. ------------------------------------------------------------------- Subject: Re: [PATCHES] encoding names From: Karel Zak <zakkr@zf.jcu.cz> To: Peter Eisentraut <peter_e@gmx.net> Cc: pgsql-patches <pgsql-patches@postgresql.org> Date: Fri, 31 Aug 2001 17:24:38 +0200 On Thu, Aug 30, 2001 at 01:30:40AM +0200, Peter Eisentraut wrote: > > 		- convert encoding 'name' to 'id' > > I thought we decided not to add functions returning ""new"" names until we > know exactly what the new names should be, and pending schema Ok, the patch not to add functions. > better > >     ...(): encoding name too long Fixed. I found new bug in command/variable.c in parse_client_encoding(), nobody probably never see this error: if (pg_set_client_encoding(encoding)) { elog(ERROR, ""Conversion between %s and %s is not supported"", value, GetDatabaseEncodingName()); } because pg_set_client_encoding() returns -1 for error and 0 as true. It's fixed too. IMHO it can be apply. Karel PS: * following files are renamed: src/utils/mb/Unicode/KOI8_to_utf8.map  --> src/utils/mb/Unicode/koi8r_to_utf8.map src/utils/mb/Unicode/WIN_to_utf8.map  --> src/utils/mb/Unicode/win1251_to_utf8.map src/utils/mb/Unicode/utf8_to_KOI8.map --> src/utils/mb/Unicode/utf8_to_koi8r.map src/utils/mb/Unicode/utf8_to_WIN.map --> src/utils/mb/Unicode/utf8_to_win1251.map * new file: src/utils/mb/encname.c * removed file: src/utils/mb/common.c -- Karel Zak  <zakkr@zf.jcu.cz> http://home.zf.jcu.cz/~zakkr/ C, PostgreSQL, PHP, WWW, http://docs.linux.cz, http://mape.jcu.cz "	227767112c3d3a6562b27e0a0da064d8b8ca1ebf
----------------------------
"PAM authentication: > pam_strerror() should be used a few more times, rather than just saying > ""Error!"".  Also, the configure.in snippet seems wrong.  You add > -I$pam_prefix/include/security to $INCLUDES and then you #include > <security/pam_appl.h>.  This whole thing is probably unnecessary, since > PAM is a system library on the systems where it exists, so the headers > and libraries are found automatically, unlike OpenSSL and > Kerberos. See attached revised patch. (I'm sure the configure.in stuff can be done right/better, I'm just not enough of a autoconf guru to know what to change it to.) Dominic J. Eidson "	04c1f729202b00cf053535587820cd913dbddfc1
----------------------------
"Attached is a patch for current CVS, consisting of a cvs diff -c for the changed files and a few new files: - test/jdbc2/BatchExecuteTest.java - util/MessageTranslator.java - jdbc2/PBatchUpdateException.java As an aside, is this the best way to submit a patch consisting of both changed and new files? Or is there a smarter cvs command which gets them all in one patch file? This patch fixes batch processing in the JDBC driver to be JDBC-2 compliant. Specifically, the changes introduced by this patch are: 1) Statement.executeBatch() no longer commits or rolls back a transaction, as this is not prescribed by the JDBC spec. Its up to the application to disable autocommit and to commit or rollback the transaction. Where JDBC talks about ""executing the statements as a unit"", it means executing the statements in one round trip to the backend for better performance, it does not mean executing the statements in a transaction. 2) Statement.executeBatch() now throws a BatchUpdateException() as required by the JDBC spec. The significance of this is that the receiver of the exception gets the updateCounts of the commands that succeeded before the error occurred. In order for the messages to be translatable, java.sql.BatchUpdateException is extended by org.postgresql.jdbc2.PBatchUpdateException() and the localization code is factored out from org.postgresql.util.PSQLException to a separate singleton class org.postgresql.util.MessageTranslator. 3) When there is no batch or there are 0 statements in the batch when Statement.executeBatch() is called, do not throw an SQLException, but silently do nothing and return an update count array of length 0. The JDBC spec says ""Throws an SQLException if the driver does not support batch statements"", which is clearly not the case. See testExecuteEmptyBatch() in BatchExecuteTest.java for an example. The message postgresql.stat.batch.empty is removed from the language specific properties files. 4) When Statement.executeBatch() is performed, reset the statement's list of batch commands to empty. The JDBC spec isn't 100% clear about this. This behaviour is only documented in the Java tutorial (http://java.sun.com/docs/books/tutorial/jdbc/jdbc2dot0/batchupdates.html). Note that the Oracle JDBC driver also resets the statement's list in executeBatch(), and this seems the most reasonable interpretation. 5) A new test case is added to the JDBC test suite which tests various aspects of batch processing. See the new file BatchExecuteTest.java. Regards, Ren? Pijlman "	d99794e613a74fd4810f51db4f1af405fd3b5507
----------------------------
Next version of patch. Now with documentation update and disabling of UTF conversion for Tcl <=8.0 On Fri, 24 Aug 2001, Vsevolod Lobko wrote: > On Thu, 23 Aug 2001, Tom Lane wrote: > > > > Is this looks better? > > > > It does, but one small gripe: the lack of semicolons will probably cause > > pg_indent to mess up the indentation.  (I know emacs' autoindent mode > > will not work nicely with it, either.)  Please set up the macros so that > > you write > > > >                         UTF_BEGIN; > >                         Tcl_DStringAppend(&unknown_src, UTF_E2U(part), -1); > >                         UTF_END; > > > > and then I'll be happy. > > Attached revised patch > > > Your point about overhead is a good one, so I retract the gripe about > > using a configure switch.  But please include documentation patches to > > describe the configure option in the administrator's guide (installation > > section). > > This patch still uses configure switch for enabling feature. > > For enabling based on tcl version we have 2 posibilites: >  1) having feature enabled by default, but in pltcl.c check for tcl >     version and disable it for old versions >  2) enable or disable at configure time based on tcl version, but there >     are problem - current configure don't checks for tcl version at all >     and my configure skills not enought for adding this > Vsevolod Lobko 	16910e44de129ce1ae16b1a97f95a61ec984d2c9
----------------------------
Include directory rearrangement Client headers are no longer in a subdirectory, since they have been made namespace-clean. Internal libpq headers are in a private subdirectory. Server headers are in a private subdirectory.  pg_config has a new option to point there. 	f5944af8ba020b26741845c59682e6bd835beb07
----------------------------
Missed this part in pg_config.h rename. 	ae05b2fd43f9cee33b93b35a32330ac19e0825de
----------------------------
Rename config.h to pg_config.h and os.h to pg_config_os.h, fix a number of places that were including the wrong files. 	968d7733a19cda3db16947024bd335d877b3d9c3
----------------------------
Move WAL params higher in file, next to fsync option. 	c2d156691292d7be998eacf5b99dce3ea3c29ab2
----------------------------
Regroup GEQO configs. 	253ade2cfe3d2a7f9a0cd3508385a84e7ba7edae
----------------------------
Use MD5 for wire protocol encryption for >= 7.2 client/server. Allow pg_shadow to be MD5 encrypted. Add ENCRYPTED/UNENCRYPTED option to CREATE/ALTER user. Add password_encryption postgresql.conf option. Update wire protocol version to 2.1. 	38bb1abcda9119957e836f731a1cfea6d2079499
----------------------------
Digging through previous discussion of this patch, I note where Peter E. points out how silly it is to use Autoconf to test for a preprocessor symbol, when one can equally easily #ifdef on the symbol itself. Accordingly, revert configure to prior state and do it that way. 	cb90b2dacb14b774ad3ddc68d78ec52f45db78bf
----------------------------
Arrange to recycle old XLOG log segment files as new segment files, rather than deleting them only to have to create more.  Steady state is 2*CHECKPOINT_SEGMENTS + WAL_FILES + 1 segment files, which will simply be renamed rather than constantly deleted and recreated. To make this safe, added current XLOG file/offset number to page header of XLOG pages, so that an un-overwritten page from an old incarnation of a logfile can be reliably told from a valid page. This change means that if you try to restart postmaster in a CVS-tip database after installing the change, you'll get a complaint about bad XLOG page magic number.  If you don't want to initdb, run contrib/pg_resetxlog (and be sure you shut down the old postmaster cleanly). 	7d4d5c00f00efaf935e35067375d43d9e72f5e03
----------------------------
Instead of believing SOMAXCONN from the system header files (which is a lie on many Unixen), invoke listen() with MIN(MaxBackends*2, 10000). The clamp value 10000 is configurable in config.h.in, if that proves to be necessary --- hopefully it won't. 	153f40067630bbea80385621ec09ac38c85d05af
----------------------------
Remove formatter's assumption that year would never exceed four digits. Enforce MAXTZLEN for all datestyles, not just some.  Remove macro definitions that were redundant with datetime.h. 	975da0a75e842f1405da71c18bc5a19c597e9bc3
----------------------------
Added GUC configuration options to control access statistics. Jan 	6497a7fd71f62d7dd279ce8b239c5abc35c5c459
----------------------------
Fix a couple remaining places where GUC variables were assigned to directly, rather than through SetConfigOption(). 	5ba723e95099b9a65394f114ec20d5b239a47967
----------------------------
Fix a couple remaining places where GUC variables were assigned to directly, rather than through SetConfigOption(). 	2e67a67715abb7151c01d14b8321fa2f79514a75
----------------------------
Statistical system views (yet without the config stuff, but it's hard to keep such massive changes in sync with the tree so I need to get it in and work from there now). Jan 	8d80b0d980c327edf162e20fdc829559e8aff224
----------------------------
See attached for a small patch that enables plpython to build cleanly under Cygwin.  This patch together with my previous Python patch: http://postgresql.readysetnet.com/mhonarc/pgsql-patches/2001-05/msg00075.htm l enables full Python support (i.e., configure --with-python) for Cygwin PostgreSQL. Jason Tishler 	06a8346c84bb67e4fe0448a1f784ee91b1b7bad1
----------------------------
The attached patch changes src/interfaces/python/GNUmakefile to use the value of DESTDIR like the rest (or at least most) of the PostgreSQL makefiles.  I found this problem when trying to package a pre-built Cygwin PostgreSQL distribution, but this problem is platform independent. The problem manifests itself when one tries to install into a stagging area (e.g., to build a tarball) instead of a real install.  In this case, pg.py and _pgmodule$(SO) still end up being installed in the configured prefix directory ignoring the value of DESTDIR. Unfortunately, this patch does not handle the case where PostgreSQL and Python are configured with different prefixes.  Since the Python Makefile is automatically generated and does not use DESTDIR, I believe that this issue will be difficult to correct.  If anyone has ideas on how to fix this issue, then I'm quite willing to rework the patch to take the suggestion into account. Jason Tishler 	eeca4bdb3152a847214fb65321b846bc37a67393
----------------------------
Add dynamic_library_path parameter and automatic appending of shared library extension. 	761a0bb69b5a9a773786f90da8e2efa91e5a2804
----------------------------
The configure.in file erraneous assumes that FreeBSD 1.x and 2.x have ELF capability. While this is true to some extent, this assumption makes it impossible to compile PostgreSQL 7.1 and 7.2devel without the --disable-shared switch during configuration. Trond Endrest 	94e2d98dd68d4b7511c893527c2ef1838c8a1e96
----------------------------
Cope with configure arguments that contain spaces. 	1f5191ef34f06db33160d5380fcd375010ae704f
----------------------------
Make tcl unknown configure from Makefile, not configure. 	36f41c71266fed3b498ef636aa24b3cad51ff169
----------------------------
This patch adds a new configure option --with-pltcl-unknown which enables pltcl unknown support. Also it adds substituting of tclsh with tclsh that was by configure in pltcl_*mod scripts. For example, On freebsd, tclsh can be called tclsh8.2 or tclsh8.3 depending on installed version of Tcl. After patching files src/pl/tcl/modules/pltcl_listmod src/pl/tcl/modules/pltcl_loadmod src/pl/tcl/modules/pltcl_delmod must be renamed(copied,repocopied) to src/pl/tcl/modules/pltcl_listmod.in src/pl/tcl/modules/pltcl_loadmod.in src/pl/tcl/modules/pltcl_delmod.in seva@sevasoft.kiev.ua 	f7659a9c183c28ecbddba8523daaffce6785fb1a
----------------------------
Fix comment in file about 2*max_connections. 	ef06003b06bcf41653127b3ba47071bf92a59b14
----------------------------
COMMIT_DELAY and COMMIT_SIBLINGS were missing from the list of WAL configuration parameters in chapter 3. 	e669b8d751c8cf00386c78bb548e505648d00994
----------------------------
tag the source tree as REL7_1, renaming the old tag REL7_1_BETA like it should have been done generate a new Changelog from rc4, which is nice and short ... one python interface change tag configure as 7.1, for generating the packages ... This is it folks ... Release 7.1 is officially here ... 	741604dd84dbbd58368a0206f73de259cb6718f4
----------------------------
random_seed => seed ... 	d0f6ae68f5db762f3083777df10f617c41f6b076
----------------------------
Rename 'random_seed' back to 'seed'. 	e692b0130b11c90feda2f0e82810670125c4ea60
----------------------------
Support syncing WAL log to disk using either fsync(), fdatasync(), O_SYNC, or O_DSYNC (as available on a given platform).  Add GUC parameter to control sync method. Also, add defense to XLogWrite to prevent it from going nuts if passed a target write position that's past the end of the buffers so far filled by XLogInsert. 	9d645fd84c330610f85951457b71f56a709ab3de
----------------------------
XLOG (and related) changes: * Store two past checkpoint locations, not just one, in pg_control. On startup, we fall back to the older checkpoint if the newer one is unreadable.  Also, a physical copy of the newest checkpoint record is kept in pg_control for possible use in disaster recovery (ie, complete loss of pg_xlog).  Also add a version number for pg_control itself.  Remove archdir from pg_control; it ought to be a GUC parameter, not a special case (not that it's implemented yet anyway). * Suppress successive checkpoint records when nothing has been entered in the WAL log since the last one.  This is not so much to avoid I/O as to make it actually useful to keep track of the last two checkpoints.  If the things are right next to each other then there's not a lot of redundancy gained... * Change CRC scheme to a true 64-bit CRC, not a pair of 32-bit CRCs on alternate bytes.  Polynomial borrowed from ECMA DLT1 standard. * Fix XLOG record length handling so that it will work at BLCKSZ = 32k. * Change XID allocation to work more like OID allocation.  (This is of dubious necessity, but I think it's a good idea anyway.) * Fix a number of minor bugs, such as off-by-one logic for XLOG file wraparound at the 4 gig mark. * Add documentation and clean up some coding infelicities; move file format declarations out to include files where planned contrib utilities can get at them. * Checkpoint will now occur every CHECKPOINT_SEGMENTS log segments or every CHECKPOINT_TIMEOUT seconds, whichever comes first.  It is also possible to force a checkpoint by sending SIGUSR1 to the postmaster (undocumented feature...) * Defend against kill -9 postmaster by storing shmem block's key and ID in postmaster.pid lockfile, and checking at startup to ensure that no processes are still connected to old shmem block (if it still exists). * Switch backends to accept SIGQUIT rather than SIGUSR1 for emergency stop, for symmetry with postmaster and xlog utilities.  Clean up signal handling in bootstrap.c so that xlog utilities launched by postmaster will react to signals better. * Standalone bootstrap now grabs lockfile in target directory, as added insurance against running it in parallel with live postmaster. 	4d14fe0048cf80052a3ba2053560f8aab1bb1b22
----------------------------
Throw error if Ant is not found and Java is requested.  Remove redundant AC_SUBST that messed up the diversions and thus the configure output. 	0d5407e6e031836361053caec33381eff17a883e
----------------------------
> Applied.  Thanks. One more :)) It's for improper function argumets for PLTCL_UNKNOWN_SUPPORT code I'm not an autoconf expert, but is it possible to enable unknown support in pltcl with configure option ? This support is really handy for real life usage of pl/tcl. seva@sevasoft.kiev.ua 	296c806dd5a44bdbca6f78600a3cc68ecd89161b
----------------------------
Hmmm, a conflict with V1.104 of configure.in remained and broke configure (said redirection required when run). After checking using cvsweb, removed the offending conflict. Rebuilt configure using autoconf, and it now works fine. 	ef8181b8081676bde976adbe8d22b12a2ecb3e1a
----------------------------
Ok, I've split todays commit into three, the first two already done had some bits in JDBC & the first set of tools into contrib. This is the third, and deals with enabling JDBC to be compiled with the main source. What it does is add a new option to configure: --with-java This option tells configure to look for ant (our build tool of choice) and if found, it then compiles both the JDBC driver and the new tools as part of the normal make. Also, when the postgresql install is done, all the .jar files are also installed into the ${PGLIB}/java directory (thought best to keep then separate) Now I had some conflicts when this applied so could someone please double check that everything is ok? Peter 	c18bb990d3172b9e11671633975d2505b49aa661
----------------------------
Add configure check for -lunix, for QNX. Recode test for equality of source and build directory using 'test -ef', because even using pwd you might not get equal strings.  Thanks, QNX. 	23e41fb7fbce0ef6ddcba3caafbde772ede62af6
----------------------------
"start of an admin tool for FreeBSD to help configure shared memory for that machine I kept the name as generic as possible though, as other OS should have similar methods, so this can be extended ""as appropriate"" ... "	ca22223e82d86a34a2cc1ec51a5d43f2523a4512
----------------------------
Implement COMMIT_SIBLINGS parameter to allow pre-commit delay to occur only if at least N other backends currently have open transactions.  This is not a great deal of intelligence about whether a delay might be profitable ... but it beats no intelligence at all.  Note that the default COMMIT_DELAY is still zero --- this new code does nothing unless that setting is changed. Also, mark ENABLEFSYNC as a system-wide setting.  It's no longer safe to allow that to be set per-backend, since we may be relying on some other backend's fsync to have synced the WAL log. 	9c9936587c6a9aeb8b425a499cf73e5e7af38ddd
----------------------------
I had a need to read such things as the backend locale and the catalog version number from the current database, and couldn't find any existing program to do that. linda:~$ pg_controldata Log file id:                          0 Log file segment:                     5 Last modified:                        Wed Feb  7 19:35:47 2001 Database block size:                  8192 Blocks per segment of large relation: 131072 Catalog version number:               200101061 LC_COLLATE:                           en_GB LC_CTYPE:                             en_GB Log archive directory: Oliver Elphick                                Oliver.Elphick@lfix.co.uk 	b25e60d8874e5a32faa43493f95027ff85fcee76
----------------------------
Fix nasty bug in configure. STRTOL='strtoul.o' --> STRTOUL='strtoul.o' 	87117f5d9e33d5a6157f62287160585588e5e62a
----------------------------
Update description of fsync option for 7.1. 	c3151c29defa6e34828df37d63158d9e8b100077
----------------------------
Change default commit_delay to zero, update documentation. 	57e084718097bd03598a3db8c06b3ba72670737d
----------------------------
Change s_lock to not use any zero-delay select() calls; these are just a waste of cycles on single-CPU machines, and of dubious utility on multi-CPU machines too. Tweak s_lock_stuck so that caller can specify timeout interval, and increase interval before declaring stuck spinlock for buffer locks and XLOG locks. On systems that have fdatasync(), use that rather than fsync() to sync WAL log writes.  Ensure that WAL file is entirely allocated during XLogFileInit. 	33cc5d8a4d0dd7cdf78c6a6851b37799854191d4
----------------------------
"1) Change transaction boundary in autocommit off mode per recent discussion in pgsql-odbc. Now SELECT is a boundary but VACUUM isn't. 2) Put back the error handling behavior. When elog(ERROR) was detected the driver automatically issue ""ABORT"" if a transaction is in progress. 3) Driver version is 7.01.0003(Dave already set it but it was put back). "	462c13215a40a8f789946c058376c637abd58650
----------------------------
Clarify meaning of GEQO_THRESHOLD parameter. 	21deb428970ea6225d3122207c3910a01f84c770
----------------------------
Some more including the patch to DatabaseMetaData backed out by Bruce. Tue Feb 13 16:33:00 GMT 2001 peter@retep.org.uk - More TestCases implemented. Refined the test suite api's. - Removed need for SimpleDateFormat in ResultSet.getDate() improving performance. - Rewrote ResultSet.getTime() so that it uses JDK api's better. Tue Feb 13 10:25:00 GMT 2001 peter@retep.org.uk - Added MiscTest to hold reported problems from users. - Fixed PGMoney. - JBuilder4/JDBCExplorer now works with Money fields. Patched Field & ResultSet (lots of methods) for this one. Also changed cash/money to return type DOUBLE not DECIMAL. This broke JBuilder as zero scale BigDecimal's can't have decimal places! - When a Statement is reused, the previous ResultSet is now closed. - Removed deprecated call in ResultSet.getTime() Thu Feb 08 18:53:00 GMT 2001 peter@retep.org.uk - Changed a couple of settings in DatabaseMetaData where 7.1 now supports those features - Implemented the DatabaseMetaData TestCase. Wed Feb 07 18:06:00 GMT 2001 peter@retep.org.uk - Added comment to Connection.isClosed() explaining why we deviate from the JDBC2 specification. - Fixed bug where the Isolation Level is lost while in autocommit mode. - Fixed bug where several calls to getTransactionIsolationLevel() returned the first call's result. 	3d21bf82c3e27396bd3598810cbcc6f7cdc05adf
----------------------------
Only look for bison as YACC; other yaccs need to be selected explicitly. When no suitable YACC is configured, supply useful informational messages to users.  (Same way flex has been handled for a while.) 	2660803697fe70411398bc699ef6fdeb90cd33ee
----------------------------
"Change SELECT to not trigger ""BEGIN"" in not autocommit mode. "	5a03b0c393bdd9d4a76a23a7562e5fe3e5fdc256
----------------------------
Use explicit path to libpgtcl.so, instead of relying on LD_LIBRARY_PATH or local equivalent.  Also, honor --with-pgport configure option for default port number, and allow PGPORT environment variable to override this. 	a7e24eda587232affe4d32504fa74746778c3220
----------------------------
Actually, it looks like DEF_PGPORT belongs over in config.h.win32 for the Windows build... 	5add3e8e5154d1155a3858ea5292911e7e61e81c
----------------------------
update configure to beta4 Install a ChangeLog file from beta3->beta4 	72401a4490fe900f4748c015659f21bdbb968a9f
----------------------------
"Here is an update on the Win32 patch. Modified files are 'config.h.win32' and two 'win32.mak'. Addresses the following: 1) Oops. Spelled fcntl.h wrong in the last one. D'uh. 2) PG_VERSION changed to be defined with "" around it. psql/command.c failed to compile without that. 3) Changed makefiles to use ""/MD"" and link both psql and libpq.dll against MSVCRT.DLL instead of a static library. This takes care of the crash-upon-free in psql. I *think* this is what is on the ""Open 7.1 Items"" list as ""Magnus Hagander ODBC Issues?"". It has nothing to do with ODBC, but it's the only issue I've been involved with... Magnus Hagander "	d7f0b7ef6e99cf529e3ea7d2363962a89ff336c7
----------------------------
Add ./include/config.h.win32 to RELEASE update list. 	ba6fda5191a188b04a953b304be5eaf04fc3f902
----------------------------
Add all possible config file options. 	7df3bb50f0b1bacfe280361b603a06d0cdbd3994
----------------------------
Put back old config contents until I am finished. 	3347fbad79962c8407ac591d74cc9933ec12fd81
----------------------------
"Here is a patch to make the current snapshot compile on Win32 (native, libpq and psql) again. Changes are: 1) psql requires the includes of ""io.h"" and ""fcntl.h"" in command.c in order to make a call to open() work (io.h for _open(), fcntl.h for the O_xxx) 2) PG_VERSION is no longer defined in version.h[.in], but in configure.in. Since we don't do configure on native win32, we need to put it in config.h.win32 :-( 3) Added define of SYSCONFDIR to config.h.win32 - libpq won't compile without it. This functionality is *NOT* tested - it's just defined as """" for now. May work, may not. 4) DEF_PGPORT renamed to DEF_PGPORT_STR I have done the ""basic tests"" on it - it connects to a database, and I can run queries. Haven't tested any of the fancier functions (yet). However, I stepped on a much bigger problem when fixing psql to work. It no longer works when linked against the .DLL version of libpq (which the Makefile does for it). I have left it linked against this version anyway, pending the comments I get on this mail :-) The problem is that there are strings being allocated from libpq.dll using PQExpBuffers (for example, initPQExpBuffer() on line 92 of input.c). These are being allocated using the malloc function used by libpq.dll. This function *may* be different from the malloc function used by psql.exe - only the resulting pointer must be valid. And with the default linking methods, it *WILL* be different. Later, psql.exe tries to free() this string, at which point it crashes because the free() function can't find the allocated block (it's on the allocated blocks list used by the runtime lib of libpq.dll). Shouldn't the right thing to do be to have psql call termPQExpBuffer() on the data instead? As it is now, gets_fromFile() will just return the pointer received from the PQExpBuffer.data (this may well be present at several places - this is the one I was bitten by so far). Isn't that kind of ""accessing the internals of the PQExpBuffer structure"" wrong? Instead, perhaps it shuold make a copy of the string, adn then termPQExpBuffer() it? In that case, the string will have been allocated from within the same library as the free() is called. I can get it to work just fine by doing this - changing from (around line 100 of input.c): and the same a bit further down in the same function. But, as I said above, this may be at more places in the code? Perhaps someone more familiar to it could comment on that? What do you think shuld be done about this? Personally, I go by the ""If you allocate a piece of memory using an interface, use the same interface to free it"", but the question is how to make it work :-) Also, AFAIK this only affects psql.exe, so the changes made to the libpq this patch are required no matter how the other issue is handled. Regards, Magnus "	bd0a767eab5f4d4963bf12c05cb9b5a135172b14
----------------------------
Get rid of sunos4-only strerror() macro, and arrange to use the implementation in backend/port/strerror.c if configure finds no strerror in libc, same as we do for snprintf and inet_aton. 	37fd19845679f7648e09c61bbaf7199ca713f79b
----------------------------
Remove no-longer-used STRERROR2 config symbol. 	531cd44fd12f57384b41af762ff7d331f018f7d8
----------------------------
From Jason Tishler <jt@dothill.com> * doc/FAQ_MSWIN: Update to be consistent with software -- mainly change comment from lack of Cygwin UNIX domain socket support and to list of current Cygwin UNIX domain socket issues. * src/include/config.h.in: Enable UNIX domain sockets for Cygwin. * src/include/port/win.h: Disable UNIX domain sockets for Cygwin b20.1. * src/test/regress/pg_regress.sh: Use UNIX domain sockets for Cygwin instead of TCP/IP. 	58f402851804ad85f6b74d0d47b5c6ee5e636246
----------------------------
Update docs to explain that 7.1 locks down LC_COLLATE and LC_CTYPE at initdb time.  A few copy-editing cleanups, too. 	1073123baaaf817dc31d295e7b5cf2689d59f846
----------------------------
Add configure check for sys_nerr, to end all discussions. 	c3f93719569d87e05bef751c30db49c187bd5946
----------------------------
tag configure as beta2 .. 	6781aa4707a807f8d6fb5f0d9f8522bde6d1f96a
----------------------------
Remove not-really-standard implementation of CREATE TABLE's UNDER clause, and revert documentation to describe the existing INHERITS clause instead, per recent discussion in pghackers.  Also fix implementation of SQL_inheritance SET variable: it is not cool to look at this var during the initial parsing phase, only during parse_analyze().  See recent bug report concerning misinterpretation of date constants just after a SET TIMEZONE command.  gram.y really has to be an invariant transformation of the query string to a raw parsetree; anything that can vary with time must be done during parse analysis. 	2fb6cc904555024ef668f5ba096b5bf0ddd3ec26
----------------------------
Only update stamp-h if config.status actually looks at config.h. 	f0fc635220f4ff467fba421a26e8e2a385e19c77
----------------------------
Tweak temporary-installation setup so that it doesn't break when the configured install --prefix begins with /data/... 	25d88e4c53e4249f3ba033d7f1b424396c5b65b0
----------------------------
stamp-h needs to be made by config.status, not elsewhere, per recipe in Autoconf manual.  In particular, touching it before creating config.status is guaranteed to lose. 	b05b981924aec913eb45cb0983733fa1a5b5bf9f
----------------------------
Qualify %.in rule to avoid triggering on configure.in, repair unportable attempt to install more than one file per 'install' invocation, clean up some other oddities. 	a057cbec46753a40208b6755e7e4861b7c70343d
----------------------------
Make sure make_rels_by_clause_joins doesn't return multiple references to same joinrel.  Although make_rels_by_joins doesn't mind, GEQO has an Assert that doesn't like this. 	97cfb9d606d34b0380cfe32cd7bf5590b046e8aa
----------------------------
Update some obsolete info about GEQO. 	0c2629efaa4222b81309a558e66c6f9214ce7333
----------------------------
Fix rules to re-generate config.h.  The examples in the Autoconf manual are flawed because the timestamp file is already updated when Makefile.global is remade, and the rule for config.h never gets run. 	2a81896a2ab909471116f25896ae60b1700b8cfb
----------------------------
there is one problem with Zoltan patches commited into the tree: if we set autocommit off and issued COMMIT (or ROLLBACK) on a connection new transaction is not started Max Khon 	0cf37659c44a3d2cc88239132f4dc8b646805d9a
----------------------------
"in catalog.sgml line 1324: ""left-hand"" should be ""right-hand"" BTW: new document looks very good! And the new configure/build process seems much better then before! Thanks! Laser "	d5470aba5c888c3e51c688c8515b682c279aff3f
----------------------------
Resurrect -F switch: it controls fsyncs again, though the fsyncs are mostly just on the WAL logfile nowadays.  But if people want to disable fsync for performance, why should we say no? 	fb47385fc8d2314dd7d23d691959c882ead1c31a
----------------------------
Make default socket directory location configurable from config.h. If we're going to let it be run-time configurable, might as well allow this too... 	73d0514deab2d271f6281c9d4d8e526fee643b16
----------------------------
all options are allowed if not under postmaster: SetConfigOption(name, value, (IsUnderPostmaster) ? PGC_BACKEND : PGC_POSTMASTER); 	9f20852f878dbacc0412d909d48fcbd779d7779e
----------------------------
Make PGLC_setlocale() static, and document that it can't be used safely for any other purpose than PGLC_localeconv()'s internal save/restore of locale settings.  Fix cash.c to call PGLC_localeconv() rather than making a direct call to localeconv() --- the old way, if PGLC_localeconv() had already cached a locale result, it would be overwritten by the first cash_in or cash_out operation, leading to wrong-locale results later. Probably no demonstrable bug today, since we only appear to be looking at the LC_MONETARY results which should be the same anyway, but definitely a gotcha waiting to strike. 	e3269cab31613d3e11522e7c8009736f2b3797ec
----------------------------
"Store current LC_COLLATE and LC_CTYPE settings in pg_control during initdb; re-adopt these settings at every postmaster or standalone-backend startup. This should fix problems with indexes becoming corrupt due to failure to provide consistent locale environment for postmaster at all times.  Also, refuse to start up a non-locale-enabled compilation in a database originally initdb'd with a non-C locale.  Suppress LIKE index optimization if locale is not ""C"" or ""POSIX"" (are there any other locales where it's safe?). Issue NOTICE during initdb if selected locale disables LIKE optimization. "	bbea3643a3a6425f92d0db9ff16c7f73a31a466c
----------------------------
Rename GUC name from unixsocket to unix_socket_directory 	9d5098ca789dde1d48238f8cdb875eff28c3a251
----------------------------
Ensure that mergejoin plan will be considered for FULL OUTER JOIN even if enable_mergejoin = OFF.  Must do this, because we have no other implementation method for full joins. 	48437f5c3af2c6a64ef468a3cdd15f674b7e219f
----------------------------
Enable WAL in config.h, not Makefile.global. 	99198ac6b8d2003949a02a148f4483e2f95e7dd4
----------------------------
Add configure checks for strtoll, strtoull (or strto[u]q).  Disable 'long long int' portions of ecpg if the type or these functions don't exist. 	9394d391b803c55281879721ea393a50df4a0be6
----------------------------
Small polishing of syslog facility and ident settings.  Only allow setting at postmaster start, rename syslog_progid to syslog_ident, since syslog itself uses that term, fix doc markup. 	0937bf9544c8c3951de09702ba3a109c6b784552
----------------------------
pg_fsync is fsync in WAL version. 	92875e6f4468b4141775518db96e8f7d88ea1e72
----------------------------
Please apply this patch to current, to fix a problem with runcheck, that installs into a different path than is configured. With this applied both postmaster and the shared libs are location independent for AIX 4.2 and up. Thanks Andreas 	a0951eec081bc34a30d069910c0a2ceb6515042a
----------------------------
Add some configure checks for DocBook and related tools.  With a somewhat standard installation layout it should be possible to build the HTML and print documentation without additional manual setup. 	7267fdd7a3ae0a8a169e9730bdfaa46fde7dd94b
----------------------------
"Add configure check to see whether <string.h> and <strings.h> may both be included, and then include <strings.h> if so.  Several systems already needed <strings.h> anyway.  Some new systems that claim to conform to the Unix 9x ""standard"" do not declare str[n]casemp() in string.h, and C99 compilers will not like that. "	dfda21e7a66a11a70c31c4cd625ae0d0988ed248
----------------------------
Add runtime configuration options to control permission bits and group owner of unix socket. 	d1bfa6c72e8087de21a2a2fd0c9c0b7da9e8fc20
----------------------------
"Add new configure option ""--enable-uniconv"" that enables automatic code conversion between Unicode and other encodings. Note that this option requires --enable-multibyte also. The reason why this is optional is that the feature requires huge mapping tables and I don't think every user need the feature. "	e5b6b0ebb94f824f170d91ad2241a0ed65191208
----------------------------
USE_POSIX_TIME replaced by HAVE_TM_ZONE || HAVE_INT_TIMEZONE, which are equivalent. In linux.h there were some #undef HAVE_INT_TIMEZONE, which are useless because HAVE_TM_ZONE overrides it anyway, and messing with configure results isn't cool. 	525e1c4436651c39f713416348bd35e3176b7797
----------------------------
Support SET/SHOW/RESET client_encoding and server_encoding even when MULTIBYTE support is not compiled (you just can't set them to anything but SQL_ASCII).  This should reduce interoperability problems between MB-enabled clients and non-MB-enabled servers. 	0a63b6d066c2736570cd23e9d6d84eddde6d4c4c
----------------------------
From Zoltan Kovacs back in April (sorry for the delay Zoltan!): I modified the current ODBC driver for * referential integrity error reporting, * SELECT in transactions and * disabling autocommit. I tested these changes with Borland C++ Builder -> ODBCExpress -> WinODBC driver (DLL) -> Postgres 7.0beta1 and Borland C++ Builder -> BDE -> WinODBC driver (DLL) -> Postgres 7.0beta1. The patch is based on snapshot of 22th April (I don't think that someone has modified it since that: Byron hasn't gave any sign of living for about a month and I didn't find any comments about the ODBC driver on the list). 	c404d91c0bf15442a3dc38644263a05e258c3c52
----------------------------
Check for SIGHUP and process config file updates just after waiting for input, not just before. 	612f1b01f8e07259814e4e73b040ffa9836de89f
----------------------------
New config.guess and config.sub with Darwin support (from official GNU source).  Adjust resultmap accordingly and fix some other regexps. 	0f5169b4af319c67a1c9deda9b73f09dc590dd75
----------------------------
"Don't call AC_SUBST (in libtool.m4) before AC_INIT.  The m4 diversions get messed up and we end up with the comments from included files in the output ""configure"". "	3daa17173b32c712e6ccdac0f5385b131e351742
----------------------------
Move DLSUFFIX, AROPT, and CFLAGS_SL settings from template to Makefile.port, since they are of no use to configure and much of the library magic happens in Makefile.port anyway. Use __alpha, not __alpha__, since the former is universally available. Remove -DNOFIXADE from the compile command line and put it in the port include file. 	f8ff1ee5aab125fc1e5e130e6055a0e6586ce440
----------------------------
Locate the file pg_service.conf in the directory configured as --syconfdir (i.e., /usr/local/pgsql/etc by default). 	179b8e572296815b132b80f27d3be31b750f9d98
----------------------------
The configure script fails to find <netinet/tcp.h>. As a result, backend/libpq/pqcomm.c and interfaces/libpq/fe-connect.c fail to compile. The <netinet/tcp.h> header needs to be preceded by <netinet/in.h>, at least on IRIX, Solaris and AIX.  The simple configure test fails. (That header on Linux is idempotent.) The basic problem is that <netinet/tcp.h> is a BSD header.  The correct header for TCP internals such as TCP_NODELAY on a UNIX system is <xti.h>.  By UNIX I mean UNIX95 (aka XPG4v2 or SUSv1) or later. The current UNIX standard (UNIX98 aka SUSv2) is available online at <http://www.opengroup.org/onlinepubs/7908799/>. The fix is to add header support for <xti.h> into configure.in and config.h.in. The 2 files which conditionally include <netinet/tcp.h> need also to conditionally include <xti.h>. Pete Forman 	0f07d644a3542840d14cd27e39495f0f25755d69
----------------------------
More pg_config updates. 	2d606da3ce746281a68a816226850e60f4ceb8a5
----------------------------
Rename pg-config to pg_config to be consistent with other pg commands. 	78f69862af7dce95eaca1d12c06bc387cd297d50
----------------------------
Unify solaris_i386 and solaris_sparc templates.  They were almost identical anyway, the rest being due to them not being kept in sync.  Add configure test for lorder and use it (on Solaris) when found. 	4d76a801c6394f7964848dc5ed7e61148489ff0b
----------------------------
"Okay, I have some new code in place that hopefully should work better. I couldn't produce a full patch using cvs diff -c this time since I have created new files and anonymous cvs usage doesn't allow you to adds. I'm supplying the modified src/interfaces/jdbc as a tarball at : http://www.candleweb.no/~gunnar/projects/pgsql/postgres-jdbc-2000-10-05.tgz The new files that should be added are : ? org/postgresql/PGStatement.java ? org/postgresql/ObjectPool.java ? org/postgresql/ObjectPoolFactory.java There is now a global static pool of free byte arrays and used byte arrays connected to a statement object. This is the role of the new PGStatement class. Access to the global free array is synchronized, while we rely on the PG_Stream synchronization for the used array. My measurements show that the perfomance boost on this code is not quite as big as my last shot, but it is still an improvement. Maybe some of the difference is due to the new synchronization on the global array. I think I will look into choosing between on a connection level and global level. I have also started experimented with improving the performance of the various conversions. The problem here is ofcourse related handle the various encodings. One thing I found to speed up ResultSet.getInt() a lot was to do custom conversion on the byte array into int instead of going through the getString() to do the conversion. But I'm unsure if this is portable, can we assume that a digit never can be represented by more than one byte ? It works fine in my iso-latin-8859-1 environment, but what about other environments ? Maybe we could provide different ResultSet implementations depending on the encoding used or delegate some methods of the result set to an ""converter class"". Check the org/postgresql/jdbc2/FastResultSet.java in the tarball above to see the modified getInt() method. Regards, Gunnar "	5383b5d8ed6da5c90bcbdb63401b7d1d75db563d
----------------------------
"Add runtime configuration option ""silent_mode"". This is equivalent to postmaster's -S option. "	2af8b963f1c54ce89e25564301e8583612252ed9
----------------------------
Clean up gcc warning, fix inappropriate choice of configuration symbol. 	a4566a7a7a95ecb25c00b62263321a3d3e31d87a
----------------------------
Update configure.in 	e846c2bb6f022ed4f32c726bb682359afd3af126
----------------------------
Add configure.in change. 	99f7c1578eae1762f24c795ae44af9c7292f8859
----------------------------
Here is the first batch of files and diffs for the BeOS port.  I've run into problems with some bits of it, but when all the patches are in it'll build and we can fix it from there :)  I've got a version that builds and runs and that is the basis for these patches. The first file has the new additional files that are required, template/beos backend/port/dynloader/beos.c backend/port/dynloader/beos.h include/port/beos.h makefiles/Makefile.beos The second is a tarball of diffs against a few files.  I've added sys/ipc.h to configure and config.h via configure.in and config.h.in and then started adding the check as this file isn't needed on BeOS and having loads of #ifdef BEOS isn't as obvious as #ifdef HAVE_SYS_IPC_H and isn't as autconf'ish :) Files touched are include/c.h configure.in include/config.h.in include/storage/ipc.h include/utils/int8.h Let me know how these go.  I'll await a response before submitting any more. Any problems just get in touch. David Reid 	7a7e0240ea84715b987345fb89daa24149a1af0a
----------------------------
Fix configure types.h 	4af1d7c03369ba44622516d42d097c8f1cb8d23d
----------------------------
Add sys/types include for sockaddr test to configure 	b2cf67888d0d4faacb0ed32a33c34373504a40e2
----------------------------
Please apply the following patch to fix problems with the AIX port and the fmgr redesign. It makes the homebrewn dl*() functions for more recent Versions of AIX obsolete by using the system dl*() functions instead. It also fixes the expected file for the horology regression test. Please regenerate configure from configure.in, I don't have the environment/time. Andreas 	469ebeefd644e829facdb9fab2dc8b8a47352795
----------------------------
"Fixes for Cygwin, with help from Pete Forman <gsez020@kryten.bedford.waii.com>. Update the installation instructions (formerly misnamed ""FAQ""), add configure checks for some headers rather than having users copy stubs manually (ugh!). Use Autoconf check for exe extension.  This also avoids inheriting the value of $(X) from the environment. "	664ce79dd84220afbf6c6b727c6280ec85148267
----------------------------
document configure --without-tk 	a279ced8847b678b92287f02447423ff578d45a1
----------------------------
Revise Tcl/Tk configuration.  Make missing Tcl after --with-tcl an error, add --without-tk option to disable Tk.  We don't need the AC_PATH_XTRA test because tkConfig.sh already contains all the information about how to compile and link with X.  Also make sure that libpq is up to date for libpgtcl.  Remove executable bits from pgaccess.sh, but add it to pgaccess. 	f428d053ce075bafe1785d0ba7792f4eb92d93d5
----------------------------
Tweak resultmap so that geometry regress test selects the right comparison file on LinuxPPC, which is identified by config.guess as powerpc-unknown-linux-gnu (not ...-gnulibc1). 	384d94efdd113fa9f84ea57204038e686909c75b
----------------------------
SetPGVariable() crashed on SET DateStyle TO DEFAULT and related cases. 	920c5062d21e92ad165f152810436fa272cc8513
----------------------------
Add check of 'SET DateStyle TO DEFAULT'. 	d35437069a691f6ac2298d43ed70a1e83d340b0e
----------------------------
Fix GEQO optimizer to work correctly with new outer-join-capable query representation.  Note that GEQO_RELS setting is now interpreted as the number of top-level items in the FROM list, not necessarily the number of relations in the query.  This seems appropriate since we are only doing join-path searching over the top-level items. 	ba2ea6e0f5f270571e7f661cd2c7645160a9562a
----------------------------
Support for DESTDIR make variable. This is used as in `make install DESTDIR=/else/where' and prepends the value of DESTDIR to the full installation paths (e.g., /else/where/usr/local/pgsql/bin). This allows users to install the package into a location different from the one that was configured and hard-coded into various scripts, e.g., for creating binary packages. DESTDIR is in many cases preferrable over `make install prefix=/else/where' because a) `prefix' affects the path that is hard-coded into the files, which can lead to a `make install prefix=xxx' (as done by the regression test driver) corrupting the files in the source tree with wrong paths. b) it doesn't work at all if a directory was overridden to not depend on `prefix', e.g., --sysconfdir=/etc. (Updating the regression test driver to use DESTDIR is a separate undertaking.) See also autoconf@gnu.org, From: Akim Demaille <akim@epita.fr>, Date: 08 Sep 2000 12:48:59 +0200, Message-ID: <mv4em2vb1lw.fsf@nostromo.lrde.epita.fr>, Subject: Re: HTML format documentation. 	335248c9b7cf590f03c67aa0cadfcf95627fedd5
----------------------------
"Attached is a small patch that fixes a small ""bug"" with specifying the souce directory of OpenSSL as argument to the --with-openssl - argument. ./configure --with-openssl=/tmp/openssl-0.9.5/ - the libcrypto.a is in the ""base"" directory, not lib/. Also, there's 2-3 typo fixes to the documentation for SSL - it should be ""server.crt"", not ""server.cert"". Dominic J. Eidson "	7ef9db82aaa9282cc53dd8f956832e92a7950acc
----------------------------
A bit of cleanup after SSL patch. Add it to config file, improve documentation. 	ffd9aaa0a92842f00fd5107e3325876beae83eed
----------------------------
"Maybe ""shared_buffers"" is a slightly better name than ""shmem_buffers"" for -B. "	3ce5c6f4d8eee20ace15e857f386626546a163e2
----------------------------
New configure test for flex, which recognizes only flex but does so in all incarnations (I hope). When an acceptable flex version is not found, print instructive error messages from both configure and the makefiles, so that users can continue building anyway. 	f03fc94e7df1078959a4fa4a4b5c4e02b09a2bc1
----------------------------
Remove configure tests for `signed', `volatile', and signal handler args; the harm potential outweighs the possible benefits. 	79abd73eee470d52690ca398906074f2be84c05b
----------------------------
Add pg-config utility that stores some configuration parameters other packages can use to configure their build. E.g., $ pg-config --libdir /usr/local/pgsql/lib `pg-config --configure' stores the configure command line. 	9314141116e7851a87e760def912fda65b2ddca0
----------------------------
Make the location of the Kerberos server key file run time configurable (rather than compile time). For libpq, even when Kerberos support is compiled in, the default user name should still fall back to geteuid() if it can't be determined via the Kerberos system. A couple of fixes for string type configuration parameters, now that there is one. 	996832caeec19ed43fdc36db33ae7ee48e348662
----------------------------
"./configure --without-CXX errroneously tried to use a C++ compiler named ""no"" reported by Mark Hollomon "	5cfbf3aba20d809fc99f046405b83fd59f089943
----------------------------
Make debug_assertions default to ON, when compiled in at all, for backwards compatibility with old behavior. 	7090c3e858562b88cdca4f908b0cf939b9327dc6
----------------------------
Clean up bogosities in use of random(3) and srandom(3) --- do not assume that RAND_MAX applies to them, since it doesn't.  Instead add a config.h parameter MAX_RANDOM_VALUE.  This is currently set at 2^31-1 but could be auto-configured if that ever proves necessary.  Also fix some outright bugs like calling srand() where srandom() is appropriate. 	9426047021651d8d7b6595c1377aef1909afcacd
----------------------------
Unset locale variables before running regression tests. (All of them!) Don't do config.status substitutions into the regression test makefile. 	c39c198bc333363c7a74e6e8c91b57466027ec3d
----------------------------
Shed some light onto SysV IPC configuration. 	ef2a6b8b833ffcd7686eeb77fd771d4613b0c144
----------------------------
Add distprep target to take some of the job of the release_prep script. The latter updated accordingly. Also add `dist' and `distcheck' targets to play with, but caveat packager. Updated backend/bootstrap and backend/parser makefile to make them marginally builddir aware and fix the usual set of things. Add rule to automatically remake config.h dependent on config.h.in and config.status. (Adopted from Autoconf manual and about every other package.) On a good day we should now have a complete and accurate set of dependencies throughout everything. 	32163099d7c43a0244f463eb4e525c711e6e97a3
----------------------------
Correct erroneous explanation of DEADLOCK_TIMEOUT configuration setting. 	d0ca92cb530ad1e6d6aa64b0d9712a3feb6a294c
----------------------------
End users shouldn't have to invoke a separate command to install the documentation. Therefore it's now installed by default. If there is no documentation to be found (i.e., you are not using the distribution) then this step is skipped. Add --docdir option to configure to control installation directory. 	44eaafe3f8239e59c92ba27cd25e2d05bd35cf2a
----------------------------
Incorporate README.fsync into main documentation body 	81fd7532a973fd667ac3e104464884a6ce4b47e8
----------------------------
"Implement nested block comments in the backend and in psql. Include updates for the comment.sql regression test. Implement SET SESSION CHARACTERISTICS and SET DefaultXactIsoLevel. Implement SET SESSION CHARACTERISTICS TRANSACTION COMMIT and SET AutoCommit in the parser only. Need to add code to actually do something. Implement WITHOUT TIME ZONE type qualifier. Define SCHEMA keyword, along with stubbed-out grammar. Implement ""[IN|INOUT|OUT] [varname] type"" function arguments in parser only; INOUT and OUT throws an elog(ERROR). Add PATH as a type-specific token, since PATH is in SQL99 to support schema resource search and resolution. "	be703cd9e8359d00c9f5498c713ab9fc282f21c4
----------------------------
Remove a bunch of unused configure tests, in particular cases where * the result is not recorded anywhere * the result is not used anywhere * the result is only used in some places, whereas others have been getting away with it * the result is used improperly Also make command line options handling a little better (e.g., --disable-locale, while redundant, should really still *dis*able). 	cb292206c5c160cde6eb5618de64f810e62f378a
----------------------------
"Add assert checking to GUC (""debug_assertions"") Rename settings net_server to tcpip_socket, max_backends to max_connections Add --help and --version to postmaster, reformat help output "	648677c3a2cbfb3e70da33c7131f0c6390ff2579
----------------------------
Another round of those unportable config/build changes :-/ * Add option to build with OpenSSL out of the box. Fix thusly exposed bit rot. Although it compiles now, getting this to do something useful is left as an exercise. * Fix Kerberos options to defer checking for required libraries until all the other libraries are checked for. * Change default odbcinst.ini and krb5.srvtab path to PREFIX/etc. * Install work around for Autoconf's install-sh relative path anomaly. Get rid of old INSTL_*_OPTS variables, now that we don't need them anymore. * Use `gunzip -c' instead of g?zcat. Reportedly broke on AIX. * Look for only one of readline.h or readline/readline.h, not both. * Make check for PS_STRINGS cacheable. Don't test for the header files separately. * Disable fcntl(F_SETLK) test on Linux. * Substitute the standard GCC warnings set into CFLAGS in configure, don't add it on in Makefile.global. * Sweep through contrib tree to teach makefiles standard semantics. ... and in completely unrelated news: * Make postmaster.opts arbitrary options-aware. I still think we need to save the environment as well. 	74618e2b82b5158adf42caf64af70cbd7c699c6c
----------------------------
Backend makefile cleanup. make maintainer-clean is now completely functional. Handle include file installation in src/include/Makefile genbki.sh improvements: Don't substitute anything by config.status, instead pass in AWK and CPP through environment. Change calling convention to support named output files, so we get to see error messages on stderr. Rename bootstrap template files and install them into PREFIX/share. Update initdb to that effect and other readability improvements in initdb. 	f0b4ae697fcbaf5844e83f4cec43c33480d6f814
----------------------------
Please find attached a patch for the pg_dump directory which addresses: - The problems Jan reported - incompatibility with configure (now uses HAVE_LIBZ instead of HAVE_ZLIB) - a problem in auto-detecting archive file format on piped archives Philip Warner 	43f6ab86546931eee3cb2735953820efdb95a2f7
----------------------------
attached to this mail is a patch from a colleague that makes PostgreSQL-7.0.2 run on Linux for the Intel-IA64 architecture. It also fixes a bug in the configure scripts that caused configure to fail on the fcntl(F_SETLK) test. This fix triggered a bug in the fcntl(F_SETLK) code of the Linux kernel when used on unix domain sockets resulting in postmaster to segfault immediately after startup. There is a fix available and included in the kernel that will be on SuSE Linux 7.0, but kernels <= 2.2.16 still have this bug. Reinhard Max 	411cf2da3f9c517d304bce85b5013052737da954
----------------------------
Version number now set in configure, available through Makefile.global and config.h. Adjusted all referring code. Scrapped pg_version and changed initdb accordingly. Integrated src/utils/version.c into src/backend/utils/init/miscinit.c. Changed all callers. Set version number to `7.1devel'. (Non-numeric version suffixes now allowed.) 	6fb9d2e347b14445b85d6c97f7d16527d41ccce6
----------------------------
We don't need config.status substituting anything into Gen_fmgrtab.sh, we just pass in CPP and AWK via the environment from the Makefile. 	b150906b8959ffb42a7322e1c9806798367d2e45
----------------------------
A little bit of clean-up/bug fix in Tcl build. Handle gracefully cases where someone wants to build these but hasn't configured for Tcl. 	191870388d4827cac897e6dd1da217ba456b350f
----------------------------
Rearrange config.h entries into a more sensible order, and add some documentation.  Let's try to keep this file a bit neater in future, hmm?  Also (to get back to the original point) update info about FUNC_MAX_ARGS, and add additional config symbols for debugging new memory management changes. 	6a7b40d909b5f765bb5145ad7a9836fcf5776d89
----------------------------
Add #ifdef for LC_MESSAGES, because it is not ANSI C standard, and BSDI does not have it. 	932d1e5f9eb71fb4c52e7d7147a825b3ab5f1d39
----------------------------
Second pass over run-time configuration system. Adjust priorities on some option settings. Sort out SIGHUP vs BACKEND -- there is no total ordering here, so make explicit checks. Add comments explaining all of this. Removed permissions check on SHOW command. Add examine_subclass to the game, rename to SQL_inheritance to fit the official data model better. Adjust documentation. Standalone backend needs to reset all options before it starts. To facilitate that, have IsUnderPostmaster be set by the postmaster itself, don't wait for the magic -p switch. Also make sure that all environment variables and argv's survive init_ps_display(). Use strdup where necessary. Have initdb make configuration files (postgresql.conf, pg_hba.conf) mode 0600 -- having configuration files is no fun if you can't edit them. 	c4465095659bb089e08f8c94ce045ba3572a194f
----------------------------
Separated set constraints and set transaction reference pages, revised set reference page to new configuration system. Big update to administrator's guide, chapters Runtime environment, Client authentication, and User management, the latter two were part of the old Security chapter. 	2c0edb3c8677831d836fc44eb58ebecb73f747af
----------------------------
Remove fmgrstamp-h business -- not needed and confusing Add options to configure to automatically build for Kerberos support; no more editing of make files. 	1652d433582dc819746ba166a6dbdb9e9643e69a
----------------------------
Big warnings cleanup for Solaris/GCC. Down to about 40 now, but we'll get there one day. Use `cat' to create aclocal.m4, not `aclocal'. Some people don't have automake installed. Only run the autoconf rule in the top-level GNUmakefile if the invoker specified `make configure', don't run it automatically because of CVS timestamp skew. 	44d1abebb48d678ac1b75f6556c68c9634cb235b
----------------------------
OK, I have tidied up todays (13th) snapshot with the attached patch, I have'nt r un autoconf to create a new configure, I guess that's done by the smapshot process, I had to remove a line from interface/odbc/ GNUMakefile to get it to build, it was a autoconf variable that looks to not be used anymore, I am assuming that this is  ok. Nick Gorham Easysoft Ltd 	d1b90bfd45be6f34fccfb0bdadcbbc50ef4d4a06
----------------------------
Remove Makefile.  Now generated by configure. 	5083a01fece25b36837765c0c8a834a9fb519b6c
----------------------------
Substituted new configure test for types of accept() Interfaced a lot of the custom tests to the config.cache, in the process made them separate macros and grouped them out into files. Made naming adjustments. Removed a couple of useless/unused configure tests. Disabled C++ by default. C++ is no more special than Perl, Python, and Tcl. And it breaks equally often. :( 	06cd0f1a32b843832298471e92cc1c577f1363a1
----------------------------
Moved the intricacies of the perl interface build into its own makefile that now functions as a wrapper around the MakeMaker stuff. It might even behave sensically when we have separate build dirs. Same for plperl, which of course still doesn't work very well. Made sure that plperl respects the choice of --libdir. Added --with-python to automatically build and install the Python interface. Works similarly to the Perl5 stuff. Moved the burden of the distclean targets lower down into the source tree. Eventually, each make file should have its own. Added automatic remaking of makefiles and configure. Currently only for the top-level because of a bug(?) in Autoconf. Use GNU `missing' to work around missing autoconf and aclocal. Start factoring out macros into their own config/*.m4 files to increase readability and organization. 	6de89c9ab78a557f98dc02dca97795d27a4112d2
----------------------------
Repair configure.in breakage from unixODBC patch.  Doesn't anyone around here bother to run autoconf, or pay attention when it complains? To say nothing of actually committing the configure that goes with the configure.in. -- Tom the janitor. 	cfb8fc9d7bbb632b404deab526b39241d985877e
----------------------------
Gen_fmgrtab.sh is strange: it is a platform dependent way (because it uses CPP) to create platform independent files. Unfortunately, that means that every config.status (or configure) run invariably causes a relink of the postmaster and also that we can't put these files in the distribution (usefully). So we make it a little smarter: when the output files already exist and it notices that it would recreate them in identical form, it doesn't touch them. In order to avoid re-running the make rule all the time we update a timestamp file instead. Update release_prep accordingly. Also make Gen_fmgrtab.sh use the awk that is detected at configure time, not necessarily named `awk' and have it check for exit statuses a little better. In other news... Remove USE_LOCALE from the templates, it was set to `no' everywhere anyway. Also remove YACC and YFLAGS from the templates, configure is smart enough to find bison or yacc itself. Use AC_PROG_YACC for that instead of the hand-crafted code. Do not set YFLAGS to `-d'. The make rules that need this flag should explicitly invoke it. YFLAGS should be a user variable. Update the makefiles to that effect. 	e3059fc0f53ede1ae6f95076034b678f394d2e7a
----------------------------
Moved configure script from src/ to the top level directory. Moved configuration helper things into config/ dir. Adjusted some relative paths in makefiles. 	5b9d0d9a5cc223e2d875b477a7416851f9f9b564
----------------------------
Removed ELOG_TIMESTAMPS #define in favor of two run-time configuration options `Log_timestamp' and `Log_pid'. 	0a54de8fafeb32b9524d48e9abf519933c62c690
----------------------------
New ps display code, works on more platforms. Install a default configuration file. Clean up some funny business in the config file code. 	209aa77d98d8d44b329e942e6f15aec1284db2ca
----------------------------
"The definition for ""ProcessConfigFile()"" in guc-file.l does not match the prototype in guc.h.  The following patch corrects that. Billy G. Allie "	bb8bda3918752b15c2c68248ae3ae303291e7d48
----------------------------
The heralded `Grand Unified Configuration scheme' (GUC) That means you can now set your options in either or all of $PGDATA/configuration, some postmaster option (--enable-fsync=off), or set a SET command. The list of options is in backend/utils/misc/guc.c, documentation will be written post haste. pg_options is gone, so is that pq_geqo config file. Also removed were backend -K, -Q, and -T options (no longer applicable, although -d0 does the same as -Q). Added to configure an --enable-syslog option. changed all callers from TPRINTF to elog(DEBUG) 	6a68f42648f54690ad5b5ae6fb9104e86e15f0f1
----------------------------
Copy pg_ident.conf.sample into /lib directory.  Rename USERAUTH to AUTHTYPE in config file.  Patch both branches. 	2f52eee2d18b4928851fcc5da82867787f5f9a99
----------------------------
add a --with-setproctitle switch to configure that leaves the use of setproctitle() disabled by default ... 	69b323f4bc16baca4f7793a2b09b43232a17031b
----------------------------
Twiddle C++ configuration checks so that we #include <string> (if it exists) before testing 'using namespace std'.  This is necessary on some C++ setups where the compiler won't take a 'using' until you've included a header that mentions namespace std.  (Pretty braindead if you ask me, but...) 	1c8244ec678dc4c2dffdcffd5cb51c04e9fc5dfc
----------------------------
Transmit -I switches selected by configure (particularly those from --with-includes) to makefiles for pltcl and plperl, so that these switches will be used even though we do not want other top-level CFLAGS.  Ain't it fun trying to support multiple-compiler platforms? 	ac6637485be0fd6cd477139020b30d938ca9359b
----------------------------
"The check of class string in configure (line 1732) fails because this class is in <string> and not in <string.h> on QNX4/egcs-2.91.60. Probably this can be changed for all platforms. The test in line 1705 uses <string> as well. Because I am not sure, I havn't this included into the patch. doc/Makefile has to be sligthly  modified as it has been done for src/backend/Makefile due to a QNX4 problem (patch attached) Furthermore src/test/regress/run_check.sh needs to be patched as it has been done for regress.sh (patch attached). Please note that in the patch the postmaster is started always with the -i option. run_check.sh reports the test ""limit"" as failed, but in reallity it is OK. regress.sh reports it as OK. Andreas Kardos "	362a0f68d9278016ba5883095f2d4b5ace30618d
----------------------------
Remove configure check for how to abbreviate 'tr A-Z a-z', and instead just use the portable form, tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz There were a bunch of places that weren't paying attention to configure's result anyway (including configure itself!?); clean them up too. 	6dd06737bad7fcc6b791efa975438c7237fe7d26
----------------------------
7.0 buffer manager can support different backends running with different fsync settings, so the -F option no longer needs to be treated as secure. 	8994662a0bfff6ea3afa02149e1166251bad8997
----------------------------
pltcl didn't work well at all when Tcl had been built with a different compiler than the one selected to build Postgres with.  It was trying to feed Postgres-compiler switches to Tcl's compiler.  (Seen this before with the perl5 interface...) Fix to use only CFLAGS taken from Tcl's configure information, plus -I which is pretty universal. 	3ddeba7403f5ce04195578295b53b04c28c33545
----------------------------
fixed another psql \e bug (handle newlines as whitespace) repaired psql option scanning bug (special treatment to \g |pipe) fixed ipcclean makefile made configure look for Perl to handle psql help build gracefully 	ffc9812451c67293ea2ff4cf60ba8c195ca9616b
----------------------------
Fix silly definition order in config.h --- we had prototypes like extern int  inet_aton(const char *cp, struct in_addr * addr); appearing before the optional #define for const, which was certain to fail on a machine with neither const nor inet_aton(). 	8eafe405711e05d487704cd51531b2ce33065723
----------------------------
#undef const, inline, signed, volatile, on the expectation that a C++ compiler will understand them.  configure may have #define'd them to empty because the local C compiler doesn't understand them, but this may very well cause a C++ compilation to fail, so don't do it in C++. 	87ca3bd294902d5e51073815f41fffa7fc54da67
----------------------------
If configure finds that inet_aton() is not present on this platform, include the version from backend/port into libpq. There is a second-rate implementation of inet_aton() already present in fe-connect.c, #ifdef'd WIN32.  That ought to be removed in favor of using the better version from port/.  However, since I'm not in a position to test the WIN32 code, I will leave well enough alone for this release... 	bf00aec8d057cfc1c0036660876968ce1f85fb9d
----------------------------
Tweak smgrblindwrt per advice from Vadim: add parameter indicating whether to do fsync or not, and if so (which should be seldom) just do the fsync immediately.  This way we need not build data structures in md.c/fd.c for blind writes. 	2692d329eba45b30a038309f3e0ddb8d03f6e830
----------------------------
Buffer manager modifications to keep a local buffer-dirtied bit as well as a shared dirtybit for each shared buffer.  The shared dirtybit still controls writing the buffer, but the local bit controls whether we need to fsync the buffer's file.  This arrangement fixes a bug that allowed some required fsyncs to be missed, and should improve performance as well. For more info see my post of same date on pghackers. 	1f6d8b90b83e02af8e73adcb167581bb10d6be22
----------------------------
Add explanation about 'Unrecognized variable client_encoding' message at startup. 	5db0ef84e6642bd9daedc4023107edbbb4c6aecf
----------------------------
Document FSYNC in pg_options sgml file. 	321eedd0bfb77d67765d4a0caa89b16792611bed
----------------------------
I think we want machine pattern i.86 not i386 --- looks like config.guess could output several different high digits on most PC Unixen. 	b64e76859521526f998ae70229675a67bdac882a
----------------------------
Modify pgbench.c not to depend on configure, since it's not shipped with one. 	7ecf7eea636d4455a4dc6dcc82fdcf0f554157e5
----------------------------
"Add transcendental math functions (sine, cosine, etc) Add a random number generator and seed setter (random(), SET SEED) Fix up the interval*float8 math to carry partial months into the time field. Add float8*interval so we have symmetry in the available math. Fix the parser and define.c to accept SQL92 types as field arguments. Fix the parser to accept SQL92 types for CREATE TYPE, etc. This is necessary to allow... Bit/varbit support in contrib/bit cleaned up to compile and load cleanly. Still needs some work before final release. Implement the ""SOME"" keyword as a synonym for ""ANY"" per SQL92. Implement ascii(text), ichar(int4), repeat(text,int4) to help support the ODBC driver. Enable the TRUNCATE() function mapping in the ODBC driver. "	a349733bbbeaca5aa5b0b3520963b01a455c9ff8
----------------------------
Document new SET SEED command. 	1b992b468bc5fef62f5a1470f382c70311e9d162
----------------------------
Looks like Peter forgot to commit configure with configure.in. 	c4ef93dbc62d9c3de8161821a1df0cac8d8787ef
----------------------------
Adjusted for new (again!) config.guess output under QNX 	c1bfc9d7fa10648ff8ad72a37bc8958075496270
----------------------------
Regenerate configure (for configure.in version 1.305) 	95a31a8fea6c001d839b7bb1eb2a32e726976778
----------------------------
Fix configure.in. Remove SJIS, BIG5, WIN1250 from the selection list of multibyte encodings. These cannot be used as a backend/database encoding (OK to use as a client encoding). 	82e6e8c74e30fbf3be9a7f8694193e2f734fe956
----------------------------
Use the CXXFLAGS exported by configure (amazingly, we weren't before!) and do not arbitrarily pull in CFLAGS instead.  This caters to platforms where the C++ compiler does not like all the same switches the C compiler wants. 	fb75e3980070206d83645684e4ab81467f48bb2a
----------------------------
Unixware fix for new config.guess output, from Bill.Allie@mug.org. 	0517c3204e38116ba0d07f0412e83e9a51b02d59
----------------------------
Make use of configure symbols for unportable constructs.  Make inclusions of system headers more consistent. 	0a5a0b8dfd794dabce4194a0c14e723e86df7c34
----------------------------
Add configure checks to see if 'using namespace std' and '#include <string>' work in the local C++ compiler. 	0a1ed443f85ba1ffec47a18e19386294b9cb86dc
----------------------------
Added latest config.guess and config.sub 	341dc91820b3f80ae69a51f2780fd0d8afcb2c47
----------------------------
Rearrange steps in recommended install procedure to something more reasonable, ie configure and build first, then optionally run regress tests using new parallel (non-installed) test method, and only then backup and kill old installation. 	a7b8de40db31c935e5d89cd2141b1f346582c9c6
----------------------------
Update descriptions of configure's options, and document how to specify multiple directories for --with-includes or --with-libraries. 	4e9c5347662b892b18e75c3d1002793a1815fd38
----------------------------
Change resultmap: powerpc-unknown-linux-gnu --> powerpc-unknown-linux-gnulibc1 this is because for new config.guess. 	d7959b5c713ea04ee1b5630da37723c15a74762b
----------------------------
Make configure --help produce slightly more useful and consistently- formatted descriptions of --with options. 	bccac99e97bdd938d529ed29ff73000a168b2c5d
----------------------------
Forgot that odbc had its own copies of config.sub/config.guess. Update those to latest Autoconf sources, too. 	e1a1f22f13fa6124466b68984915b2b8d865170d
----------------------------
Change configure.in to note that since we are using expr(1)'s regex match command, the entries in template/.similar can really be regular expressions.  This isn't a new feature, just an observation of what the code already did. 	641c368ae915422dc09800844c2698590447e251
----------------------------
Add safety check on expression nesting depth.  Default value is set by a config.h #define, and the runtime value can be controlled via SET. 	0e314d747e2803a9bea7ee69ab0c7df881277eba
----------------------------
Update config.guess and config.sub to latest versions available from the GNU Autoconf CVS server. 	bc1f117094fbe2921f37923d8f7528284cb26dfc
----------------------------
Remove SHOW after datestyle reset. 	2a55934926293b8d39d54a35d2dd868489068559
----------------------------
Forgot to run autoconf. (Configure shouldn't really be in CVS ...) 	3526017a59aaee425985c587df05be28d30a4571
----------------------------
Added configure test for readline's filename_completion_function Completed psql's \? help 	8de482a8479eef200e184ce308bf3f40eac3215b
----------------------------
update to 6.40.0009 and provide WIN32 defines for auto-configured items such as BLCKSZ and MAXPGPATHLEN? 	81704b90700bf997c8ab6164ea610602e886040e
----------------------------
Add 'volatile' declarations to silence gcc warnings about longjmp. Shouldn't create any portability problems, since we have a configure test to #define away volatile if the compiler doesn't support it. 	1e091ad60171d729b1d2f6dba0fa3c7e19da5f3e
----------------------------
Add missing files like foreign key regression tests and config.h.win32. 	5cdfaea899409ad06d2421e419dd7e958a440f77
----------------------------
"The following is required in order to make beta1 compile on the Win32 platform (psql and libpq): The file ""config.h.win32"" in the include\ directory (from my patch from 2000-01-18) is missing from the tree. It needs to be put back :-) The following patch has to be applied in the interfaces\libpq directory. //Magnus "	ce9f73c16235d49dfc1a9a7314cafcef5c63a365
----------------------------
Moved psql \eset and \eshow to \encoding Improved psql's Ctrl-C handling Fixed configure test for sigsetjmp that now even recognizes it if it's a macro 	718bb2cc9c8483bed143d071aa000f9027c74a41
----------------------------
Apply Keith Park's updates for expected/horology-solaris-1947.out.  Fix erroneous expected output for RESET DateStyle: should be ISO now. Fix run_check.sh so that test postmaster is started with PGDATESTYLE=ISO, else the horology test won't pass. 	b48f983ec34683c5ce2a859e6eddfb1724885af7
----------------------------
Get rid of postgres.c's separate parsing logic for PGDATESTYLE env. variable, instead calling same code in variable.c that is used to parse SET DATESTYLE.  Fix bug: although backend's startup datestyle had been changed to ISO, 'RESET DATESTYLE' and 'SET DATESTYLE TO DEFAULT' didn't know about it.  For consistency I have made the latter two reset to the PGDATESTYLE-defined initial value, which may not be the same as the compiled-in default of ISO. 	f46571165d0d0e82b36e1f4ca2a10efb7255e3e6
----------------------------
Fix nasty bug in setting client_encoding 	4fec86f1f6baac423fdb8a899aee790c4f3ec452
----------------------------
New cost model for planning, incorporating a penalty for random page accesses versus sequential accesses, a (very crude) estimate of the effects of caching on random page accesses, and cost to evaluate WHERE- clause expressions.  Export critical parameters for this model as SET variables.  Also, create SET variables for the planner's enable flags (enable_seqscan, enable_indexscan, etc) so that these can be controlled more conveniently than via PGOPTIONS. Planner now estimates both startup cost (cost before retrieving first tuple) and total cost of each path, so it can optimize queries with LIMIT on a reasonable basis by interpolating between these costs. Same facility is a win for EXISTS(...) subqueries and some other cases. Redesign pathkey representation to achieve a major speedup in planning (I saw as much as 5X on a 10-way join); also minor changes in planner to reduce memory consumption by recycling discarded Path nodes and not constructing unnecessary lists. Minor cleanups to display more-plausible costs in some cases in EXPLAIN output. Initdb forced by change in interface to index cost estimation functions. 	b1577a7c78d2d8880b3c0f94689fb75bd074c897
----------------------------
Default argument for createdb Changed EXIT_ON_ERROR to ON_ERROR_STOP in psql 	2fb0ff0c5bcb751159c6601ca3647d68622ef02b
----------------------------
"You will need to copy ""config.h.win32"" to ""config.h"" in the include directory. I think this patch to the docs should be what is needed. Magnus Hagander "	5d93742b8df731c843037f40dd5f818fa886eb50
----------------------------
"as attache of this mail is patch (to the main tree) with to_char's family functions. Contain: conversion from a datetype to formatted text: to_char( datetime, 	text) to_char( timestamp,	text) to_char( int4,		text) to_char( int8,		text) to_char( float4,	text) to_char( float8,	text) to_char( numeric,	text) vice versa: to_date		( text, text) to_datetime	( text, text) to_timestamp	( text, text) to_number	( text, text)	   (convert to numeric) PostgreSQL to_char is very compatible with Oracle's to_char(), but not total exactly (now). Small differentions are in number formating. It will fix in next to_char() version. ! If will this patch aplly to the main tree, must be delete the current to_char version in contrib (directory ""dateformat"" and note in contrib's README), this patch not erase it (sorry Bruce). The patch patching files: doc/src/sgml/func.sgml ^^^^^^^^ Hmm, I'm not sure if my English... :( Check it anyone (volunteer)? Thomas, it is right? SGML is not my primary lang  and compile the current PG docs tree is very happy job (hard variables setting in docs/sgml/Makefile --> HSTYLE= /home/users/t/thomas/....  :-) What add any definition to global configure.in and set Makefiles in docs tree via ./configure? src/backend/utils/adt/Makefile src/backend/utils/adt/formatting.c src/include/catalog/pg_proc.h src/include/utils/formatting.h Karel Zak <zakkr@zf.jcu.cz>              http://home.zf.jcu.cz/~zakkr/ "	b866d2e2d79416f8497e4dffa7e800298d018f6c
----------------------------
Fix error messages for the lack of multi-byte support. Since --with-mb has been removed from configure, previous messages were not appropriate. 	2605ceb7042442b880ae122a7955206afe91fbb3
----------------------------
Removed MBFLAGS from makefiles since it's now done in include/config.h. 	533d5166292b94fb5dce0892c572b149d7da18bd
----------------------------
Make number of args to a function configurable. 	8a093d0ae3a139d912ce9f8ba2cde294de79e12e
----------------------------
Move INDEX_MAX_KEYS to postgres.h, and make it configurable for users. 	b99f3006756e6fe32f411533bc40d9cd9987b009
----------------------------
Type 'socklen_t' might be the right way to declare getsockopt()'s last parameter in some flavor of Unix, but Linux, HPUX, and SunOS all say it's int.  For now I'm just going to make it int so that I can compile. If the other way is actually necessary on some Unix somewhere, I guess we will need a configure test... 	9de156f116125728dc799130135988339467ccc4
----------------------------
Standardize on MAXPGPATH as the size of a file pathname buffer, eliminating some wildly inconsistent coding in various parts of the system.  I set MAXPGPATH = 1024 in config.h.in.  If anyone is really convinced that there ought to be a configure-time test to set the value, go right ahead ... but I think it's a waste of time. 	51f62d505e2aba66bf7870c7bd005cd32e7d0953
----------------------------
"Hi, I have changed a bit the makefiles for the win32 port - the *.def files (created when building shared libraries) are now clean from Makefile.shlib. I have also removed ""-g"" from CFLAGS in the ""cygwin32"" template - it can be enabled when running configure. Dan "	c3ac9f07b7bf2f764155a9b0e97c761fa780ac27
----------------------------
"<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2 Final//EN""> <HTML> <HEAD> <TITLE>PostgreSQL TODO list</TITLE> <BODY BGCOLOR=""#FFFFFF"" TEXT=""#000000"" LINK=""#FF0000"" VLINK=""#A00000""\ ALINK=""#0000FF""> <META NAME=""generator"" CONTENT=""txt2html v1.25""> </HEAD> <BODY> <H1><A NAME=""section-1"">TODO list for PostgreSQL</A></H1> Last updated:           Tue Sep 28 00:34:21 EDT 1999 <P> Current maintainer:     Bruce Momjian (<A HREF=""mailto:maillist@candle.pha.pa.us"">maillist@candle.pha.pa.us</A>) <P> The most recent version of this document can be viewed at<BR> the PostgreSQL web site, <A HREF=""http://www.PostgreSQL.org"">http://www.PostgreSQL.org</A>. <P> A dash(-) marks changes that will appear in the next release. <P> Names in brackets ""[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/""></A>]"" indicate more detailed information is available in<BR> the directory pgsql/doc/TODO.detail/ under that name. <H2><A NAME=""section-1.1"">RELIABILITY</A></H2> <P> <STRONG>RESOURCES</STRONG> <UL> <LI> Elog() does not free all its memory(Jan) <LI> spinlock stuck problem when elog(FATAL) and elog(ERROR) inside bufmgr <LI> Recover or force failure when disk space is exhausted </UL> <P> <STRONG>PARSER</STRONG> <UL> <LI> Disallow inherited columns with the same name as new columns <LI> INSERT INTO ... SELECT with AS columns matching result columns problem <LI> SELECT pg<U>class FROM pg</U>class generates strange error <LI> Alter TABLE ADD COLUMN does not honor DEFAULT, add CONSTRAINT <LI> Do not allow bpchar column creation without length <LI> -Select a[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/1"">1</A>] FROM test fails, it needs test.a[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/1"">1</A>] <LI> -Array index references without table name cause problems [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/array"">array</A>] <LI> Update table SET table.value = 3 fails(SQL standard says this is OK) <LI> Creating index of TIMESTAMP &amp; RELTIME fails, or rename to DATETIME(Thomas) <LI> SELECT foo UNION SELECT foo is incorrectly simplified to SELECT foo <LI> -INSERT ... SELECT ... GROUP BY groups by target columns not source columns <LI> -CREATE TABLE test (a char(5) DEFAULT text '', b int4) fails on INSERT <LI> UNION with LIMIT fails <LI> Unique index on base column not honored on inserts from inherited table INSERT INTO inherit_table (unique<U>index</U>col) VALUES (dup) should fail [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/inherit"">inherit</A>] <LI> CREATE TABLE x AS SELECT 1 UNION SELECT 2 fails <LI> CREATE TABLE test(col char(2) DEFAULT user) fails in length restriction <LI> mismatched types in CREATE TABLE ... DEFAULT causes problems [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/default"">default</A>] <LI> SELECT ... UNION ... ORDER BY fails when sort expr not in result list <LI> Be smarter about promoting types when UNION merges different data types <LI> SELECT ... UNION ... GROUP BY fails if column types disagree <LI> redesign INSERT ... SELECT to have two levels of target list <LI> -select * from pg_class where oid in (0,-1) <LI> have INTERSECT/EXCEPT prevent duplicates unless ALL is specified <LI> prevent primary key of nine columns [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/primary"">primary</A>] <LI> SELECT COUNT('asdf') FROM pg_class WHERE oid=12 crashes <LI> SELECT DISTINCT ON col1 col1 col2 FROM tab1 is broken [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/distinct"">distinct</A>] <LI> -When using aggregates + GROUP BY, no rows in should yield no rows out </UL> <P> <STRONG>VIEWS</STRONG> <UL> <LI> Views containing aggregates sometimes fail(Jan) <LI> Views with spaces in view name fail when referenced <LI> Creating view and inheriting the view causes view* to show duplicates(inherit) </UL> <P> <STRONG>MISC</STRONG> <UL> <LI> User who can create databases can modify pg_database table <LI> Plpgsql does not handle quoted mixed-case identifiers <LI> Fix btree to give a useful elog when key &gt; 1/2 (page - overhead) <LI> pg_dump should preserve primary key information <LI> plpgsql regression tests fail on BSD/OS </UL> <H2><A NAME=""section-1.2"">ENHANCEMENTS</A></H2> <P> <STRONG>URGENT</STRONG> <UL> <LI> Add referential integrity(Jan?)[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/primary"">primary</A>] <LI> Add OUTER joins, left and right[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/outer"">outer</A>](Thomas, Bruce) <LI> Allow long tuples by chaining or auto-storing outside db (chaining,large objs) <LI> Eliminate limits on query length <LI> Fix memory leak for expressions?[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/memory"">memory</A>](Tom?) <LI> -Fix memory leak for aggregates? </UL> <P> <STRONG>ADMIN</STRONG> <UL> <LI> Better interface for adding to pg_group <LI> More access control over who can create tables and access the database <LI> Test syslog functionality <LI> Allow elog() to return error codes, not just messages <LI> Allow international error message support and add error codes <LI> Generate postmaster pid file and remove flock/fcntl lock code [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/flock"">flock</A>] <LI> Add ability to specifiy location of lock/socket files [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/flock"">flock</A>] </UL> <P> <STRONG>TYPES</STRONG> <UL> <LI> Add BIT, BIT VARYING <LI> Nchar (as distinguished from ordinary varchar), <LI> Domain capability <LI> Add STDDEV/VARIANCE() function for standard deviation computation/variance <LI> Allow compression of large fields or a compressed field type <LI> Large objects <UL> <LI> Fix large object mapping scheme, own typeid or reltype(Peter) <LI> Allow large text type to use large objects(Peter) <LI> Not to stuff everything as files in a single directory, hash dirs <LI> Allow large object vacuuming <LI> Tables that start with xinv confused to be large objects </UL> <LI> Allow pg_descriptions when creating types, tables, columns, and functions <LI> Add IPv6 capability to INET/CIDR types <LI> Make a separate SERIAL type? <LI> Store binary-compatible type information in the system <LI> Allow user to define char1 column <LI> Add support for &amp; operator <LI> Allow LOCALE on a per-column basis, default to ASCII <LI> Allow array on int8[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/""></A>] <LI> Allow nulls in arrays <LI> Allow arrays to be ORDER'ed <LI> Remove Money type, add money formatting for decimal type <LI> Declare typein/out functions in pg_proc with a special ""C string"" data type <LI> Add non-large-object binary field <LI> -Add index on NUMERIC/DECIMAL type <LI> Make Absolutetime/Relativetime int4 because time_t can be int8 on some ports <LI> Functions returning sets don't really work right[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/function"">function</A>] </UL> <P> <STRONG>VIEWS</STRONG> <UL> <LI> Allow DISTINCT on views <LI> Allow views of aggregate columns <LI> Allow views with subselects </UL> <P> <STRONG>INDEXES</STRONG> <UL> <LI> Allow CREATE INDEX zman_index ON test (date_trunc( 'day', zman ) datetime_ops) fails index can't store constant parameters <LI> Allow creation of functional indexes to use default types <LI> Permissions on indexes - prevent them? <LI> Allow SQL function indexes <LI> Add FILLFACTOR to index creation <LI> Allow indexing of LIKE with localle character sets <LI> Allow indexing of more than eight columns </UL> <P> <STRONG>COMMANDS</STRONG> <UL> <LI> ALTER TABLE ADD COLUMN to inherited table put column in wrong place [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/inherit"">inherit</A>] <LI> Add ALTER TABLE DROP/ALTER COLUMN feature <LI> Allow CLUSTER on all tables at once, and improve CLUSTER, loses NOT <P> NULL specification on table [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/cluster"">cluster</A>] <LI> Add SIMILAR TO to allow character classes, 'pg_[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/a-c"">a-c</A>]%' <LI> Auto-destroy sequence on DROP of table with SERIAL(Ryan) <LI> Allow LOCK TABLE tab1, tab2, tab3 so all tables locked in unison <LI> Allow INSERT/UPDATE of system-generated oid value for a row <LI> Allow ESCAPE '\' at the end of LIKE for ANSI compliance [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/like"">like</A>] <LI> Rewrite the LIKE handling by rewriting the user string with the supplied ESCAPE [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/like"">like</A>] <LI> -Move LIKE index optimization handling to the optimizer <LI> Allow RULE recompilation <LI> Support UNION/INTERSECT/EXCEPT in sub-selects <LI> Allow DELETE and UPDATE to use inheritance using tablename* </UL> <P> <STRONG>CLIENTS</STRONG> <UL> <LI> Make NULL's come out at the beginning or end depending on the ORDER BY direction <LI> Allow flag to control COPY input/output of NULLs <LI> Update reltuples from COPY command <LI> Allow psql \copy to allow delimiters <LI> Add a function to return the last inserted oid, for use in psql scripts <LI> Allow psql to print nulls as distinct from """" [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/null"">null</A>] </UL> <P> <STRONG>EXOTIC FEATURES</STRONG> <UL> <LI> Add sql3 recursive unions <LI> Add the concept of dataspaces <LI> Add replication of distributed databases <LI> Allow queries across multiple databases </UL> <P> <STRONG>MISC</STRONG> <UL> <LI> Increase identifier length(NAMEDATALEN) if small performance hit <LI> Allow row re-use without vacuum(Vadim) <LI> Create a background process for each database that runs while database is idle, finding superceeded rows, gathering stats and vacuuming <LI> Add UNIQUE capability to non-btree indexes <LI> -Certain indexes will not shrink, i.e. oid indexes with many inserts <LI> Restore unused oid's on backend exit if no one else has gotten oids <LI> Have UPDATE/DELETE clean out indexes <LI> Allow WHERE restriction on ctid <LI> Allow cursors to be DECLAREd/OPENed/CLOSEed outside transactions <LI> Allow PQrequestCancel() to terminate when in waiting-for-lock state <LI> -Transaction log, so re-do log can be on a separate disk by with after-row images(Vadim) [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/logging"">logging</A>] <LI> Populate backend status area and write program to dump status data <LI> Make oid use unsigned int more reliably, pg_atoi() <LI> Allow subqueries in target list <LI> Put sort files, large objects in their own directory <LI> Do autocommit so always in a transaction block(?) <LI> Show location of syntax error in query [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/yacc"">yacc</A>] <LI> Redesign the function call interface to handle NULLs better [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/function"">function</A>] <LI> Document/trigger/rule so changes to pg<U>shadow recreate pg</U>pwd [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/pg_shadow"">pg_shadow</A>] <LI> Missing optimizer selectivities for date, r-tree, etc. [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/optimizer"">optimizer</A>] <LI> Overhaul mdmgr/smgr to fix double unlinking and double opens, cleanup <LI> Overhaul bufmgr/lockmgr/transaction manager <LI> Add PL/Perl(Mark Hollomon) <LI> Make postgres user have a password by default <LI> Add configure test to check for C++ need for *.h and namespaces <LI> Allow BLCKSZ &lt;= 64k, not &lt;= 32k <LI> redesign UNION structures to have separarate target lists <LI> Allow multi-level query trees for INSERT INTO ... SELECT </UL> <H2><A NAME=""section-1.3"">PERFORMANCE</A></H2> <P> <STRONG>FSYNC</STRONG> <UL> <LI> -Allow transaction commits with rollback with no-fsync performance [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/fsync"">fsync</A>] <LI> -Prevent fsync in SELECT-only queries </UL> <P> <STRONG>INDEXES</STRONG> <UL> <LI> Use indexes in ORDER BY for restrictive data sets, min(), max() <LI> Pull requested data directly from indexes, bypassing heap data <LI> Use index to restrict rows returned by multi-key index when used with non-consecutive keys or OR clauses, so fewer heap accesses <LI> -Convert function(constant) into a constant for index use <LI> Allow LIMIT ability on single-table queries that have no ORDER BY to use a matching index [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/limit"">limit</A>] <LI> Improve LIMIT processing by using index to limit rows processed [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/limit"">limit</A>] <LI> Have optimizer take LIMIT into account when considering index scans [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/limit"">limit</A>] <LI> Make index creation use psort code, because it is now faster(Vadim) <LI> Allow creation of sort temp tables &gt; 1 Gig <LI> Create more system table indexes for faster cache lookups <LI> fix indexscan() so it does leak memory by not requiring caller to free <LI> Improve <U>bt</U>binsrch() to handle equal keys better, remove <U>bt</U>firsteq()(Tom) <LI> Allow SELECT * FROM tab WHERE int2col = 4 use int2col index, int8, float4, numeric/decimal too [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/optimizer"">optimizer</A>] <LI> -Allow optimizer to prefer plans that match ORDER BY </UL> <P> <STRONG>CACHE</STRONG> <UL> <LI> Cache most recent query plan(s) [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/prepare"">prepare</A>] <LI> Shared catalog cache, reduce lseek()'s by caching table size in shared area <LI> elog() flushes cache, try invalidating just entries from current xact, perhaps using invalidation cache </UL> <P> <STRONG>MISC</STRONG> <UL> <LI> Allow compression of log and meta data <LI> Allow char() not to use variable-sized header to reduce disk size <LI> Do async I/O to do better read-ahead of data <LI> -Fix memory exhaustion when using many OR's [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/cnfify"">cnfify</A>] <LI> Get faster regex() code from Henry Spencer &lt;<A HREF=""mailto:henry@zoo.utoronto.ca"">henry@zoo.utoronto.ca</A>&gt; when it is available <LI> Use mmap() rather than SYSV shared memory(?) <LI> -Process const = const parts of OR clause in separate pass <LI> Make oid use oidin/oidout not int4in/int4out in pg_type.h <LI> Improve Subplan list handling <LI> Allow Subplans to use efficient joins(hash, merge) with upper variable [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/subquery"">subquery</A>] <LI> use fmgr_info()/fmgr_faddr() instead of fmgr() calls in high-traffic places, like GROUP BY, UNIQUE, index processing, etc. <LI> improve dynamic memory allocation by introducing tuple-context memory allocation [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/memory"">memory</A>] <LI> fix memory leak in cache code when non-existant table is referenced <LI> In WHERE tab1.x=3 AND tab1.x=tab2.y, add tab2.y=3 <LI> pass atttypmod through parser in more cases [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/atttypmod"">atttypmod</A>] <LI> remove duplicate type in/out functions for disk and net <LI> Allow persistent backends [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/persistent"">persistent</A>] <LI> Misc [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/performance"">performance</A>] </UL> <H2><A NAME=""section-1.4"">SOURCE CODE</A></H2> <UL> <LI> Add use of 'const' for varibles in source tree <LI> Fix C optimizer problem where fmgr_ptr calls return different types [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/alpha"">alpha</A>] <LI> -Add needed includes and removed unneeded include files(Bruce) <LI> Make configure --enable-debug add -g on compile line <LI> Does Mariposa source contain any other bug fixes? <LI> Remove SET KSQO option if OR processing is improved(Tom) </UL> <HR> <H3><A NAME=""section-1.4.1"">Developers who have claimed items are:</A></H3> <UL> <LI> Billy is Billy G. Allie &lt;<A HREF=""mailto:Bill.Allie@mug.org"">Bill.Allie@mug.org</A>&gt; <LI> Brook is Brook Milligan &lt;<A HREF=""mailto:brook@trillium.NMSU.Edu"">brook@trillium.NMSU.Edu</A>&gt; <LI> Bruce is Bruce Momjian&lt;<A HREF=""mailto:maillist@candle.pha.pa.us"">maillist@candle.pha.pa.us</A>&gt; <LI> Bryan is Bryan Henderson&lt;<A HREF=""mailto:bryanh@giraffe.netgate.net"">bryanh@giraffe.netgate.net</A>&gt; <LI> D'Arcy is D'Arcy J.M. Cain &lt;<A HREF=""mailto:darcy@druid.net"">darcy@druid.net</A>&gt; <LI> David is David Hartwig &lt;<A HREF=""mailto:daveh@insightdist.com"">daveh@insightdist.com</A>&gt; <LI> Edmund is Edmund Mergl &lt;<A HREF=""mailto:E.Mergl@bawue.de"">E.Mergl@bawue.de</A>&gt; <LI> Goran is Goran Thyni &lt;<A HREF=""mailto:goran@kyla.kiruna.se"">goran@kyla.kiruna.se</A>&gt; <LI> Hiroshi is Hiroshi Inoue&lt;<A HREF=""mailto:Inoue@tpf.co.jp"">Inoue@tpf.co.jp</A>&gt; <LI> Jan is Jan Wieck &lt;<A HREF=""mailto:wieck@sapserv.debis.de"">wieck@sapserv.debis.de</A>&gt; <LI> Marc is Marc Fournier &lt;<A HREF=""mailto:scrappy@hub.org"">scrappy@hub.org</A>&gt; <LI> Massimo Dal Zotto &lt;<A HREF=""mailto:dz@cs.unitn.it"">dz@cs.unitn.it</A>&gt; <LI> Michael is Michael Meskes &lt;<A HREF=""mailto:meskes@postgresql.org"">meskes@postgresql.org</A>&gt; <LI> Oleg is Oleg Bartunov &lt;<A HREF=""mailto:oleg@sai.msu.su"">oleg@sai.msu.su</A>&gt; <LI> Peter is Peter T Mount &lt;<A HREF=""mailto:peter@retep.org.uk"">peter@retep.org.uk</A>&gt; <LI> Ryan is Ryan Bradetich &lt;<A HREF=""mailto:rbrad@hpb50023.boi.hp.com"">rbrad@hpb50023.boi.hp.com</A>&gt; <LI> Stefan Simkovics &lt;<A HREF=""mailto:ssimkovi@rainbow.studorg.tuwien.ac.at"">ssimkovi@rainbow.studorg.tuwien.ac.at</A>&gt; <LI> Tatsuo is Tatsuo Ishii &lt;<A HREF=""mailto:t-ishii@sra.co.jp"">t-ishii@sra.co.jp</A>&gt; <LI> Tom is Tom Lane &lt;<A HREF=""mailto:tgl@sss.pgh.pa.us"">tgl@sss.pgh.pa.us</A>&gt; <LI> Thomas is Thomas Lockhart &lt;<A HREF=""mailto:lockhart@alumni.caltech.edu"">lockhart@alumni.caltech.edu</A>&gt; <LI> TomH is Tom I Helbekkmo &lt;<A HREF=""mailto:tih@Hamartun.Priv.NO"">tih@Hamartun.Priv.NO</A>&gt; <LI> Vadim is ""Vadim B. Mikheev"" &lt;<A HREF=""mailto:vadim@krs.ru"">vadim@krs.ru</A>&gt; </UL> </BODY> </HTML> "	bdd6c0a61fb29123d0a7dd9ac20740ad55c4a79f
----------------------------
"<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2 Final//EN""> <HTML> <HEAD> <TITLE>PostgreSQL TODO list</TITLE> <BODY BGCOLOR=""#FFFFFF"" TEXT=""#000000"" LINK=""#FF0000"" VLINK=""#A00000""\ ALINK=""#0000FF""> <META NAME=""generator"" CONTENT=""txt2html v1.25""> </HEAD> <BODY> <H1><A NAME=""section-1"">TODO list for PostgreSQL</A></H1> Last updated:           Tue Sep 28 00:34:21 EDT 1999 <P> Current maintainer:     Bruce Momjian (<A HREF=""mailto:maillist@candle.pha.pa.us"">maillist@candle.pha.pa.us</A>) <P> The most recent version of this document can be viewed at<BR> the PostgreSQL web site, <A HREF=""http://www.PostgreSQL.org"">http://www.PostgreSQL.org</A>. <P> A dash(-) marks changes that will appear in the next release. <P> Names in brackets ""[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/""></A>]"" indicate more detailed information is available in<BR> the directory pgsql/doc/TODO.detail/ under that name. <H2><A NAME=""section-1.1"">RELIABILITY</A></H2> <P> <STRONG>RESOURCES</STRONG> <UL> <LI> Elog() does not free all its memory(Jan) <LI> spinlock stuck problem when elog(FATAL) and elog(ERROR) inside bufmgr <LI> Recover or force failure when disk space is exhausted </UL> <P> <STRONG>PARSER</STRONG> <UL> <LI> Disallow inherited columns with the same name as new columns <LI> INSERT INTO ... SELECT with AS columns matching result columns problem <LI> SELECT pg<U>class FROM pg</U>class generates strange error <LI> Alter TABLE ADD COLUMN does not honor DEFAULT, add CONSTRAINT <LI> Do not allow bpchar column creation without length <LI> -Select a[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/1"">1</A>] FROM test fails, it needs test.a[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/1"">1</A>] <LI> -Array index references without table name cause problems [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/array"">array</A>] <LI> Update table SET table.value = 3 fails(SQL standard says this is OK) <LI> Creating index of TIMESTAMP &amp; RELTIME fails, or rename to DATETIME(Thomas) <LI> SELECT foo UNION SELECT foo is incorrectly simplified to SELECT foo <LI> -INSERT ... SELECT ... GROUP BY groups by target columns not source columns <LI> -CREATE TABLE test (a char(5) DEFAULT text '', b int4) fails on INSERT <LI> UNION with LIMIT fails <LI> Unique index on base column not honored on inserts from inherited table INSERT INTO inherit_table (unique<U>index</U>col) VALUES (dup) should fail [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/inherit"">inherit</A>] <LI> CREATE TABLE x AS SELECT 1 UNION SELECT 2 fails <LI> CREATE TABLE test(col char(2) DEFAULT user) fails in length restriction <LI> mismatched types in CREATE TABLE ... DEFAULT causes problems [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/default"">default</A>] <LI> SELECT ... UNION ... ORDER BY fails when sort expr not in result list <LI> Be smarter about promoting types when UNION merges different data types <LI> SELECT ... UNION ... GROUP BY fails if column types disagree <LI> redesign INSERT ... SELECT to have two levels of target list <LI> -select * from pg_class where oid in (0,-1) <LI> have INTERSECT/EXCEPT prevent duplicates unless ALL is specified <LI> prevent primary key of nine columns [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/primary"">primary</A>] <LI> SELECT COUNT('asdf') FROM pg_class WHERE oid=12 crashes <LI> SELECT DISTINCT ON col1 col1 col2 FROM tab1 is broken [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/distinct"">distinct</A>] <LI> -When using aggregates + GROUP BY, no rows in should yield no rows out </UL> <P> <STRONG>VIEWS</STRONG> <UL> <LI> Views containing aggregates sometimes fail(Jan) <LI> Views with spaces in view name fail when referenced <LI> Creating view and inheriting the view causes view* to show duplicates(inherit) </UL> <P> <STRONG>MISC</STRONG> <UL> <LI> User who can create databases can modify pg_database table <LI> Plpgsql does not handle quoted mixed-case identifiers <LI> Fix btree to give a useful elog when key &gt; 1/2 (page - overhead) <LI> pg_dump should preserve primary key information <LI> plpgsql regression tests fail on BSD/OS </UL> <H2><A NAME=""section-1.2"">ENHANCEMENTS</A></H2> <P> <STRONG>URGENT</STRONG> <UL> <LI> Add referential integrity(Jan?)[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/primary"">primary</A>] <LI> Add OUTER joins, left and right[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/outer"">outer</A>](Thomas, Bruce) <LI> Allow long tuples by chaining or auto-storing outside db (chaining,large objs) <LI> Eliminate limits on query length <LI> Fix memory leak for expressions?[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/memory"">memory</A>](Tom?) <LI> -Fix memory leak for aggregates? </UL> <P> <STRONG>ADMIN</STRONG> <UL> <LI> Better interface for adding to pg_group <LI> More access control over who can create tables and access the database <LI> Test syslog functionality <LI> Allow elog() to return error codes, not just messages <LI> Allow international error message support and add error codes <LI> Generate postmaster pid file and remove flock/fcntl lock code [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/flock"">flock</A>] <LI> Add ability to specifiy location of lock/socket files [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/flock"">flock</A>] </UL> <P> <STRONG>TYPES</STRONG> <UL> <LI> Add BIT, BIT VARYING <LI> Nchar (as distinguished from ordinary varchar), <LI> Domain capability <LI> Add STDDEV/VARIANCE() function for standard deviation computation/variance <LI> Allow compression of large fields or a compressed field type <LI> Large objects <UL> <LI> Fix large object mapping scheme, own typeid or reltype(Peter) <LI> Allow large text type to use large objects(Peter) <LI> Not to stuff everything as files in a single directory, hash dirs <LI> Allow large object vacuuming <LI> Tables that start with xinv confused to be large objects </UL> <LI> Allow pg_descriptions when creating types, tables, columns, and functions <LI> Add IPv6 capability to INET/CIDR types <LI> Make a separate SERIAL type? <LI> Store binary-compatible type information in the system <LI> Allow user to define char1 column <LI> Add support for &amp; operator <LI> Allow LOCALE on a per-column basis, default to ASCII <LI> Allow array on int8[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/""></A>] <LI> Allow nulls in arrays <LI> Allow arrays to be ORDER'ed <LI> Remove Money type, add money formatting for decimal type <LI> Declare typein/out functions in pg_proc with a special ""C string"" data type <LI> Add non-large-object binary field <LI> Add index on NUMERIC/DECIMAL type <LI> Make Absolutetime/Relativetime int4 because time_t can be int8 on some ports <LI> Functions returning sets don't really work right[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/function"">function</A>] </UL> <P> <STRONG>VIEWS</STRONG> <UL> <LI> Allow DISTINCT on views <LI> Allow views of aggregate columns <LI> Allow views with subselects </UL> <P> <STRONG>INDEXES</STRONG> <UL> <LI> Allow CREATE INDEX zman_index ON test (date_trunc( 'day', zman ) datetime_ops) fails index can't store constant parameters <LI> Allow creation of functional indexes to use default types <LI> Permissions on indexes - prevent them? <LI> Allow SQL function indexes <LI> Add FILLFACTOR to index creation <LI> Allow indexing of LIKE with localle character sets <LI> Allow indexing of more than eight columns </UL> <P> <STRONG>COMMANDS</STRONG> <UL> <LI> ALTER TABLE ADD COLUMN to inherited table put column in wrong place [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/inherit"">inherit</A>] <LI> Add ALTER TABLE DROP/ALTER COLUMN feature <LI> Allow CLUSTER on all tables at once, and improve CLUSTER, loses NOT <P> NULL specification on table [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/cluster"">cluster</A>] <LI> Add SIMILAR TO to allow character classes, 'pg_[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/a-c"">a-c</A>]%' <LI> Auto-destroy sequence on DROP of table with SERIAL(Ryan) <LI> Allow LOCK TABLE tab1, tab2, tab3 so all tables locked in unison <LI> Allow INSERT/UPDATE of system-generated oid value for a row <LI> Allow ESCAPE '\' at the end of LIKE for ANSI compliance [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/like"">like</A>] <LI> Rewrite the LIKE handling by rewriting the user string with the supplied ESCAPE [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/like"">like</A>] <LI> -Move LIKE index optimization handling to the optimizer <LI> Allow RULE recompilation <LI> Support UNION/INTERSECT/EXCEPT in sub-selects <LI> Allow DELETE and UPDATE to use inheritance using tablename* </UL> <P> <STRONG>CLIENTS</STRONG> <UL> <LI> Make NULL's come out at the beginning or end depending on the ORDER BY direction <LI> Allow flag to control COPY input/output of NULLs <LI> Update reltuples from COPY command <LI> Allow psql \copy to allow delimiters <LI> Add a function to return the last inserted oid, for use in psql scripts <LI> Allow psql to print nulls as distinct from """" [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/null"">null</A>] </UL> <P> <STRONG>EXOTIC FEATURES</STRONG> <UL> <LI> Add sql3 recursive unions <LI> Add the concept of dataspaces <LI> Add replication of distributed databases <LI> Allow queries across multiple databases </UL> <P> <STRONG>MISC</STRONG> <UL> <LI> Increase identifier length(NAMEDATALEN) if small performance hit <LI> Allow row re-use without vacuum(Vadim) <LI> Create a background process for each database that runs while database is idle, finding superceeded rows, gathering stats and vacuuming <LI> Add UNIQUE capability to non-btree indexes <LI> -Certain indexes will not shrink, i.e. oid indexes with many inserts <LI> Restore unused oid's on backend exit if no one else has gotten oids <LI> Have UPDATE/DELETE clean out indexes <LI> Allow WHERE restriction on ctid <LI> Allow cursors to be DECLAREd/OPENed/CLOSEed outside transactions <LI> Allow PQrequestCancel() to terminate when in waiting-for-lock state <LI> -Transaction log, so re-do log can be on a separate disk by with after-row images(Vadim) [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/logging"">logging</A>] <LI> Populate backend status area and write program to dump status data <LI> Make oid use unsigned int more reliably, pg_atoi() <LI> Allow subqueries in target list <LI> Put sort files, large objects in their own directory <LI> Do autocommit so always in a transaction block(?) <LI> Show location of syntax error in query [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/yacc"">yacc</A>] <LI> Redesign the function call interface to handle NULLs better [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/function"">function</A>] <LI> Document/trigger/rule so changes to pg<U>shadow recreate pg</U>pwd [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/pg_shadow"">pg_shadow</A>] <LI> Missing optimizer selectivities for date, r-tree, etc. [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/optimizer"">optimizer</A>] <LI> Overhaul mdmgr/smgr to fix double unlinking and double opens, cleanup <LI> Overhaul bufmgr/lockmgr/transaction manager <LI> Add PL/Perl(Mark Hollomon) <LI> Make postgres user have a password by default <LI> Add configure test to check for C++ need for *.h and namespaces <LI> Allow BLCKSZ &lt;= 64k, not &lt;= 32k <LI> redesign UNION structures to have separarate target lists <LI> Allow multi-level query trees for INSERT INTO ... SELECT </UL> <H2><A NAME=""section-1.3"">PERFORMANCE</A></H2> <P> <STRONG>FSYNC</STRONG> <UL> <LI> -Allow transaction commits with rollback with no-fsync performance [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/fsync"">fsync</A>] <LI> -Prevent fsync in SELECT-only queries </UL> <P> <STRONG>INDEXES</STRONG> <UL> <LI> Use indexes in ORDER BY for restrictive data sets, min(), max() <LI> Pull requested data directly from indexes, bypassing heap data <LI> Use index to restrict rows returned by multi-key index when used with non-consecutive keys or OR clauses, so fewer heap accesses <LI> -Convert function(constant) into a constant for index use <LI> Allow LIMIT ability on single-table queries that have no ORDER BY to use a matching index [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/limit"">limit</A>] <LI> Improve LIMIT processing by using index to limit rows processed [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/limit"">limit</A>] <LI> Have optimizer take LIMIT into account when considering index scans [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/limit"">limit</A>] <LI> Make index creation use psort code, because it is now faster(Vadim) <LI> Allow creation of sort temp tables &gt; 1 Gig <LI> Create more system table indexes for faster cache lookups <LI> fix indexscan() so it does leak memory by not requiring caller to free <LI> Improve <U>bt</U>binsrch() to handle equal keys better, remove <U>bt</U>firsteq()(Tom) <LI> Allow SELECT * FROM tab WHERE int2col = 4 use int2col index, int8, float4, numeric/decimal too [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/optimizer"">optimizer</A>] <LI> -Allow optimizer to prefer plans that match ORDER BY </UL> <P> <STRONG>CACHE</STRONG> <UL> <LI> Cache most recent query plan(s) [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/prepare"">prepare</A>] <LI> Shared catalog cache, reduce lseek()'s by caching table size in shared area <LI> elog() flushes cache, try invalidating just entries from current xact, perhaps using invalidation cache </UL> <P> <STRONG>MISC</STRONG> <UL> <LI> Allow compression of log and meta data <LI> Allow char() not to use variable-sized header to reduce disk size <LI> Do async I/O to do better read-ahead of data <LI> -Fix memory exhaustion when using many OR's [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/cnfify"">cnfify</A>] <LI> Get faster regex() code from Henry Spencer &lt;<A HREF=""mailto:henry@zoo.utoronto.ca"">henry@zoo.utoronto.ca</A>&gt; when it is available <LI> Use mmap() rather than SYSV shared memory(?) <LI> -Process const = const parts of OR clause in separate pass <LI> Make oid use oidin/oidout not int4in/int4out in pg_type.h <LI> Improve Subplan list handling <LI> Allow Subplans to use efficient joins(hash, merge) with upper variable [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/subquery"">subquery</A>] <LI> use fmgr_info()/fmgr_faddr() instead of fmgr() calls in high-traffic places, like GROUP BY, UNIQUE, index processing, etc. <LI> improve dynamic memory allocation by introducing tuple-context memory allocation [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/memory"">memory</A>] <LI> fix memory leak in cache code when non-existant table is referenced <LI> In WHERE tab1.x=3 AND tab1.x=tab2.y, add tab2.y=3 <LI> pass atttypmod through parser in more cases [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/atttypmod"">atttypmod</A>] <LI> remove duplicate type in/out functions for disk and net <LI> Allow persistent backends [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/persistent"">persistent</A>] <LI> Misc [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/performance"">performance</A>] </UL> <H2><A NAME=""section-1.4"">SOURCE CODE</A></H2> <UL> <LI> Add use of 'const' for varibles in source tree <LI> Fix C optimizer problem where fmgr_ptr calls return different types [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/alpha"">alpha</A>] <LI> -Add needed includes and removed unneeded include files(Bruce) <LI> Make configure --enable-debug add -g on compile line <LI> Does Mariposa source contain any other bug fixes? <LI> Remove SET KSQO option if OR processing is improved(Tom) </UL> <HR> <H3><A NAME=""section-1.4.1"">Developers who have claimed items are:</A></H3> <UL> <LI> Billy is Billy G. Allie &lt;<A HREF=""mailto:Bill.Allie@mug.org"">Bill.Allie@mug.org</A>&gt; <LI> Brook is Brook Milligan &lt;<A HREF=""mailto:brook@trillium.NMSU.Edu"">brook@trillium.NMSU.Edu</A>&gt; <LI> Bruce is Bruce Momjian&lt;<A HREF=""mailto:maillist@candle.pha.pa.us"">maillist@candle.pha.pa.us</A>&gt; <LI> Bryan is Bryan Henderson&lt;<A HREF=""mailto:bryanh@giraffe.netgate.net"">bryanh@giraffe.netgate.net</A>&gt; <LI> D'Arcy is D'Arcy J.M. Cain &lt;<A HREF=""mailto:darcy@druid.net"">darcy@druid.net</A>&gt; <LI> David is David Hartwig &lt;<A HREF=""mailto:daveh@insightdist.com"">daveh@insightdist.com</A>&gt; <LI> Edmund is Edmund Mergl &lt;<A HREF=""mailto:E.Mergl@bawue.de"">E.Mergl@bawue.de</A>&gt; <LI> Goran is Goran Thyni &lt;<A HREF=""mailto:goran@kyla.kiruna.se"">goran@kyla.kiruna.se</A>&gt; <LI> Hiroshi is Hiroshi Inoue&lt;<A HREF=""mailto:Inoue@tpf.co.jp"">Inoue@tpf.co.jp</A>&gt; <LI> Jan is Jan Wieck &lt;<A HREF=""mailto:wieck@sapserv.debis.de"">wieck@sapserv.debis.de</A>&gt; <LI> Marc is Marc Fournier &lt;<A HREF=""mailto:scrappy@hub.org"">scrappy@hub.org</A>&gt; <LI> Massimo Dal Zotto &lt;<A HREF=""mailto:dz@cs.unitn.it"">dz@cs.unitn.it</A>&gt; <LI> Michael is Michael Meskes &lt;<A HREF=""mailto:meskes@postgresql.org"">meskes@postgresql.org</A>&gt; <LI> Oleg is Oleg Bartunov &lt;<A HREF=""mailto:oleg@sai.msu.su"">oleg@sai.msu.su</A>&gt; <LI> Peter is Peter T Mount &lt;<A HREF=""mailto:peter@retep.org.uk"">peter@retep.org.uk</A>&gt; <LI> Ryan is Ryan Bradetich &lt;<A HREF=""mailto:rbrad@hpb50023.boi.hp.com"">rbrad@hpb50023.boi.hp.com</A>&gt; <LI> Stefan Simkovics &lt;<A HREF=""mailto:ssimkovi@rainbow.studorg.tuwien.ac.at"">ssimkovi@rainbow.studorg.tuwien.ac.at</A>&gt; <LI> Tatsuo is Tatsuo Ishii &lt;<A HREF=""mailto:t-ishii@sra.co.jp"">t-ishii@sra.co.jp</A>&gt; <LI> Tom is Tom Lane &lt;<A HREF=""mailto:tgl@sss.pgh.pa.us"">tgl@sss.pgh.pa.us</A>&gt; <LI> Thomas is Thomas Lockhart &lt;<A HREF=""mailto:lockhart@alumni.caltech.edu"">lockhart@alumni.caltech.edu</A>&gt; <LI> TomH is Tom I Helbekkmo &lt;<A HREF=""mailto:tih@Hamartun.Priv.NO"">tih@Hamartun.Priv.NO</A>&gt; <LI> Vadim is ""Vadim B. Mikheev"" &lt;<A HREF=""mailto:vadim@krs.ru"">vadim@krs.ru</A>&gt; </UL> </BODY> </HTML> "	cdd84ccd56fef11e9b1e366b6ddb580cdee4777a
----------------------------
"<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2 Final//EN""> <HTML> <HEAD> <TITLE>PostgreSQL TODO list</TITLE> <BODY BGCOLOR=""#FFFFFF"" TEXT=""#000000"" LINK=""#FF0000"" VLINK=""#A00000""\ ALINK=""#0000FF""> <META NAME=""generator"" CONTENT=""txt2html v1.25""> </HEAD> <BODY> <H1><A NAME=""section-1"">TODO list for PostgreSQL</A></H1> Last updated:           Tue Sep 28 00:34:21 EDT 1999 <P> Current maintainer:     Bruce Momjian (<A HREF=""mailto:maillist@candle.pha.pa.us"">maillist@candle.pha.pa.us</A>) <P> The most recent version of this document can be viewed at<BR> the PostgreSQL web site, <A HREF=""http://www.PostgreSQL.org"">http://www.PostgreSQL.org</A>. <P> A dash(-) marks changes that will appear in the next release. <P> Names in brackets ""[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/""></A>]"" indicate more detailed information is available in<BR> the directory pgsql/doc/TODO.detail/ under that name. <H2><A NAME=""section-1.1"">RELIABILITY</A></H2> <P> <STRONG>RESOURCES</STRONG> <UL> <LI> Elog() does not free all its memory(Jan) <LI> spinlock stuck problem when elog(FATAL) and elog(ERROR) inside bufmgr <LI> Recover or force failure when disk space is exhausted </UL> <P> <STRONG>PARSER</STRONG> <UL> <LI> Disallow inherited columns with the same name as new columns <LI> INSERT INTO ... SELECT with AS columns matching result columns problem <LI> SELECT pg<U>class FROM pg</U>class generates strange error <LI> Alter TABLE ADD COLUMN does not honor DEFAULT, add CONSTRAINT <LI> Do not allow bpchar column creation without length <LI> -Select a[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/1"">1</A>] FROM test fails, it needs test.a[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/1"">1</A>] <LI> -Array index references without table name cause problems [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/array"">array</A>] <LI> Update table SET table.value = 3 fails(SQL standard says this is OK) <LI> Creating index of TIMESTAMP &amp; RELTIME fails, or rename to DATETIME(Thomas) <LI> SELECT foo UNION SELECT foo is incorrectly simplified to SELECT foo <LI> -INSERT ... SELECT ... GROUP BY groups by target columns not source columns <LI> -CREATE TABLE test (a char(5) DEFAULT text '', b int4) fails on INSERT <LI> UNION with LIMIT fails <LI> Unique index on base column not honored on inserts from inherited table INSERT INTO inherit_table (unique<U>index</U>col) VALUES (dup) should fail [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/inherit"">inherit</A>] <LI> CREATE TABLE x AS SELECT 1 UNION SELECT 2 fails <LI> CREATE TABLE test(col char(2) DEFAULT user) fails in length restriction <LI> mismatched types in CREATE TABLE ... DEFAULT causes problems [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/default"">default</A>] <LI> SELECT ... UNION ... ORDER BY fails when sort expr not in result list <LI> Be smarter about promoting types when UNION merges different data types <LI> SELECT ... UNION ... GROUP BY fails if column types disagree <LI> redesign INSERT ... SELECT to have two levels of target list <LI> -select * from pg_class where oid in (0,-1) <LI> have INTERSECT/EXCEPT prevent duplicates unless ALL is specified <LI> prevent primary key of nine columns [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/primary"">primary</A>] <LI> SELECT COUNT('asdf') FROM pg_class WHERE oid=12 crashes <LI> SELECT DISTINCT ON col1 col1 col2 FROM tab1 is broken [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/distinct"">distinct</A>] <LI> -When using aggregates + GROUP BY, no rows in should yield no rows out </UL> <P> <STRONG>VIEWS</STRONG> <UL> <LI> Views containing aggregates sometimes fail(Jan) <LI> Views with spaces in view name fail when referenced </UL> <P> <STRONG>MISC</STRONG> <UL> <LI> User who can create databases can modify pg_database table <LI> Plpgsql does not handle quoted mixed-case identifiers <LI> Fix btree to give a useful elog when key &gt; 1/2 (page - overhead) <LI> pg_dump should preserve primary key information <LI> plpgsql regression tests fail on BSD/OS </UL> <H2><A NAME=""section-1.2"">ENHANCEMENTS</A></H2> <P> <STRONG>URGENT</STRONG> <UL> <LI> Add referential integrity(Jan?)[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/primary"">primary</A>] <LI> Add OUTER joins, left and right[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/outer"">outer</A>](Thomas, Bruce) <LI> Allow long tuples by chaining or auto-storing outside db (chaining,large objs) <LI> Eliminate limits on query length <LI> Fix memory leak for expressions?[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/memory"">memory</A>](Tom?) <LI> -Fix memory leak for aggregates? </UL> <P> <STRONG>ADMIN</STRONG> <UL> <LI> Better interface for adding to pg_group <LI> More access control over who can create tables and access the database <LI> Test syslog functionality <LI> Allow elog() to return error codes, not just messages <LI> Allow international error message support and add error codes <LI> Generate postmaster pid file and remove flock/fcntl lock code [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/flock"">flock</A>] <LI> Add ability to specifiy location of lock/socket files [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/flock"">flock</A>] </UL> <P> <STRONG>TYPES</STRONG> <UL> <LI> Add BIT, BIT VARYING <LI> Nchar (as distinguished from ordinary varchar), <LI> Domain capability <LI> Add STDDEV/VARIANCE() function for standard deviation computation/variance <LI> Allow compression of large fields or a compressed field type <LI> Large objects <UL> <LI> Fix large object mapping scheme, own typeid or reltype(Peter) <LI> Allow large text type to use large objects(Peter) <LI> Not to stuff everything as files in a single directory, hash dirs <LI> Allow large object vacuuming <LI> Tables that start with xinv confused to be large objects </UL> <LI> Allow pg_descriptions when creating types, tables, columns, and functions <LI> Add IPv6 capability to INET/CIDR types <LI> Make a separate SERIAL type? <LI> Store binary-compatible type information in the system <LI> Allow user to define char1 column <LI> Add support for &amp; operator <LI> Allow LOCALE on a per-column basis, default to ASCII <LI> Allow array on int8[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/""></A>] <LI> Allow nulls in arrays <LI> Allow arrays to be ORDER'ed <LI> Remove Money type, add money formatting for decimal type <LI> Declare typein/out functions in pg_proc with a special ""C string"" data type <LI> Add non-large-object binary field <LI> Add index on NUMERIC/DECIMAL type <LI> Make Absolutetime/Relativetime int4 because time_t can be int8 on some ports <LI> Functions returning sets don't really work right[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/function"">function</A>] </UL> <P> <STRONG>VIEWS</STRONG> <UL> <LI> Allow DISTINCT on views <LI> Allow views of aggregate columns <LI> Allow views with subselects </UL> <P> <STRONG>INDEXES</STRONG> <UL> <LI> Allow CREATE INDEX zman_index ON test (date_trunc( 'day', zman ) datetime_ops) fails index can't store constant parameters <LI> Allow creation of functional indexes to use default types <LI> Permissions on indexes - prevent them? <LI> Allow SQL function indexes <LI> Add FILLFACTOR to index creation <LI> Allow indexing of LIKE with localle character sets <LI> Allow indexing of more than eight columns </UL> <P> <STRONG>COMMANDS</STRONG> <UL> <LI> ALTER TABLE ADD COLUMN to inherited table put column in wrong place [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/inherit"">inherit</A>] <LI> Add ALTER TABLE DROP/ALTER COLUMN feature <LI> Allow CLUSTER on all tables at once, and improve CLUSTER, loses NOT <P> NULL specification on table [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/cluster"">cluster</A>] <LI> Add SIMILAR TO to allow character classes, 'pg_[<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/a-c"">a-c</A>]%' <LI> Auto-destroy sequence on DROP of table with SERIAL(Ryan) <LI> Allow LOCK TABLE tab1, tab2, tab3 so all tables locked in unison <LI> Allow INSERT/UPDATE of system-generated oid value for a row <LI> Allow ESCAPE '\' at the end of LIKE for ANSI compliance [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/like"">like</A>] <LI> Rewrite the LIKE handling by rewriting the user string with the supplied ESCAPE [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/like"">like</A>] <LI> -Move LIKE index optimization handling to the optimizer <LI> Allow RULE recompilation <LI> Support UNION/INTERSECT/EXCEPT in sub-selects <LI> Allow DELETE and UPDATE to use inheritance using tablename* </UL> <P> <STRONG>CLIENTS</STRONG> <UL> <LI> Make NULL's come out at the beginning or end depending on the ORDER BY direction <LI> Allow flag to control COPY input/output of NULLs <LI> Update reltuples from COPY command <LI> Allow psql \copy to allow delimiters <LI> Add a function to return the last inserted oid, for use in psql scripts <LI> Allow psql to print nulls as distinct from """" [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/null"">null</A>] </UL> <P> <STRONG>EXOTIC FEATURES</STRONG> <UL> <LI> Add sql3 recursive unions <LI> Add the concept of dataspaces <LI> Add replication of distributed databases <LI> Allow queries across multiple databases </UL> <P> <STRONG>MISC</STRONG> <UL> <LI> Increase identifier length(NAMEDATALEN) if small performance hit <LI> Allow row re-use without vacuum(Vadim) <LI> Create a background process for each database that runs while database is idle, finding superceeded rows, gathering stats and vacuuming <LI> Add UNIQUE capability to non-btree indexes <LI> -Certain indexes will not shrink, i.e. oid indexes with many inserts <LI> Restore unused oid's on backend exit if no one else has gotten oids <LI> Have UPDATE/DELETE clean out indexes <LI> Allow WHERE restriction on ctid <LI> Allow cursors to be DECLAREd/OPENed/CLOSEed outside transactions <LI> Allow PQrequestCancel() to terminate when in waiting-for-lock state <LI> -Transaction log, so re-do log can be on a separate disk by with after-row images(Vadim) [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/logging"">logging</A>] <LI> Populate backend status area and write program to dump status data <LI> Make oid use unsigned int more reliably, pg_atoi() <LI> Allow subqueries in target list <LI> Put sort files, large objects in their own directory <LI> Do autocommit so always in a transaction block(?) <LI> Show location of syntax error in query [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/yacc"">yacc</A>] <LI> Redesign the function call interface to handle NULLs better [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/function"">function</A>] <LI> Document/trigger/rule so changes to pg<U>shadow recreate pg</U>pwd [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/pg_shadow"">pg_shadow</A>] <LI> Missing optimizer selectivities for date, r-tree, etc. [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/optimizer"">optimizer</A>] <LI> Overhaul mdmgr/smgr to fix double unlinking and double opens, cleanup <LI> Overhaul bufmgr/lockmgr/transaction manager <LI> Add PL/Perl(Mark Hollomon) <LI> Make postgres user have a password by default <LI> Add configure test to check for C++ need for *.h and namespaces <LI> Allow BLCKSZ &lt;= 64k, not &lt;= 32k <LI> redesign UNION structures to have separarate target lists <LI> Allow multi-level query trees for INSERT INTO ... SELECT </UL> <H2><A NAME=""section-1.3"">PERFORMANCE</A></H2> <P> <STRONG>FSYNC</STRONG> <UL> <LI> -Allow transaction commits with rollback with no-fsync performance [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/fsync"">fsync</A>] <LI> -Prevent fsync in SELECT-only queries </UL> <P> <STRONG>INDEXES</STRONG> <UL> <LI> Use indexes in ORDER BY for restrictive data sets, min(), max() <LI> Pull requested data directly from indexes, bypassing heap data <LI> Use index to restrict rows returned by multi-key index when used with non-consecutive keys or OR clauses, so fewer heap accesses <LI> -Convert function(constant) into a constant for index use <LI> Allow LIMIT ability on single-table queries that have no ORDER BY to use a matching index [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/limit"">limit</A>] <LI> Improve LIMIT processing by using index to limit rows processed [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/limit"">limit</A>] <LI> Have optimizer take LIMIT into account when considering index scans [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/limit"">limit</A>] <LI> Make index creation use psort code, because it is now faster(Vadim) <LI> Allow creation of sort temp tables &gt; 1 Gig <LI> Create more system table indexes for faster cache lookups <LI> fix indexscan() so it does leak memory by not requiring caller to free <LI> Improve <U>bt</U>binsrch() to handle equal keys better, remove <U>bt</U>firsteq()(Tom) <LI> Allow SELECT * FROM tab WHERE int2col = 4 use int2col index, int8, float4, numeric/decimal too [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/optimizer"">optimizer</A>] <LI> -Allow optimizer to prefer plans that match ORDER BY </UL> <P> <STRONG>CACHE</STRONG> <UL> <LI> Cache most recent query plan(s) [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/prepare"">prepare</A>] <LI> Shared catalog cache, reduce lseek()'s by caching table size in shared area <LI> elog() flushes cache, try invalidating just entries from current xact, perhaps using invalidation cache </UL> <P> <STRONG>MISC</STRONG> <UL> <LI> Allow compression of log and meta data <LI> Allow char() not to use variable-sized header to reduce disk size <LI> Do async I/O to do better read-ahead of data <LI> -Fix memory exhaustion when using many OR's [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/cnfify"">cnfify</A>] <LI> Get faster regex() code from Henry Spencer &lt;<A HREF=""mailto:henry@zoo.utoronto.ca"">henry@zoo.utoronto.ca</A>&gt; when it is available <LI> Use mmap() rather than SYSV shared memory(?) <LI> -Process const = const parts of OR clause in separate pass <LI> Make oid use oidin/oidout not int4in/int4out in pg_type.h <LI> Improve Subplan list handling <LI> Allow Subplans to use efficient joins(hash, merge) with upper variable [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/subquery"">subquery</A>] <LI> use fmgr_info()/fmgr_faddr() instead of fmgr() calls in high-traffic places, like GROUP BY, UNIQUE, index processing, etc. <LI> improve dynamic memory allocation by introducing tuple-context memory allocation [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/memory"">memory</A>] <LI> fix memory leak in cache code when non-existant table is referenced <LI> In WHERE tab1.x=3 AND tab1.x=tab2.y, add tab2.y=3 <LI> pass atttypmod through parser in more cases [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/atttypmod"">atttypmod</A>] <LI> remove duplicate type in/out functions for disk and net <LI> Allow persistent backends [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/persistent"">persistent</A>] <LI> Misc [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/performance"">performance</A>] </UL> <H2><A NAME=""section-1.4"">SOURCE CODE</A></H2> <UL> <LI> Add use of 'const' for varibles in source tree <LI> Fix C optimizer problem where fmgr_ptr calls return different types [<A HREF=""http://www.postgresql.org/docs/pgsql/doc/TODO.detail/alpha"">alpha</A>] <LI> -Add needed includes and removed unneeded include files(Bruce) <LI> Make configure --enable-debug add -g on compile line <LI> Does Mariposa source contain any other bug fixes? <LI> Remove SET KSQO option if OR processing is improved(Tom) </UL> <HR> <H3><A NAME=""section-1.4.1"">Developers who have claimed items are:</A></H3> <UL> <LI> Billy is Billy G. Allie &lt;<A HREF=""mailto:Bill.Allie@mug.org"">Bill.Allie@mug.org</A>&gt; <LI> Brook is Brook Milligan &lt;<A HREF=""mailto:brook@trillium.NMSU.Edu"">brook@trillium.NMSU.Edu</A>&gt; <LI> Bruce is Bruce Momjian&lt;<A HREF=""mailto:maillist@candle.pha.pa.us"">maillist@candle.pha.pa.us</A>&gt; <LI> Bryan is Bryan Henderson&lt;<A HREF=""mailto:bryanh@giraffe.netgate.net"">bryanh@giraffe.netgate.net</A>&gt; <LI> D'Arcy is D'Arcy J.M. Cain &lt;<A HREF=""mailto:darcy@druid.net"">darcy@druid.net</A>&gt; <LI> David is David Hartwig &lt;<A HREF=""mailto:daveh@insightdist.com"">daveh@insightdist.com</A>&gt; <LI> Edmund is Edmund Mergl &lt;<A HREF=""mailto:E.Mergl@bawue.de"">E.Mergl@bawue.de</A>&gt; <LI> Goran is Goran Thyni &lt;<A HREF=""mailto:goran@kyla.kiruna.se"">goran@kyla.kiruna.se</A>&gt; <LI> Hiroshi is Hiroshi Inoue&lt;<A HREF=""mailto:Inoue@tpf.co.jp"">Inoue@tpf.co.jp</A>&gt; <LI> Jan is Jan Wieck &lt;<A HREF=""mailto:wieck@sapserv.debis.de"">wieck@sapserv.debis.de</A>&gt; <LI> Marc is Marc Fournier &lt;<A HREF=""mailto:scrappy@hub.org"">scrappy@hub.org</A>&gt; <LI> Massimo Dal Zotto &lt;<A HREF=""mailto:dz@cs.unitn.it"">dz@cs.unitn.it</A>&gt; <LI> Michael is Michael Meskes &lt;<A HREF=""mailto:meskes@postgresql.org"">meskes@postgresql.org</A>&gt; <LI> Oleg is Oleg Bartunov &lt;<A HREF=""mailto:oleg@sai.msu.su"">oleg@sai.msu.su</A>&gt; <LI> Peter is Peter T Mount &lt;<A HREF=""mailto:peter@retep.org.uk"">peter@retep.org.uk</A>&gt; <LI> Ryan is Ryan Bradetich &lt;<A HREF=""mailto:rbrad@hpb50023.boi.hp.com"">rbrad@hpb50023.boi.hp.com</A>&gt; <LI> Stefan Simkovics &lt;<A HREF=""mailto:ssimkovi@rainbow.studorg.tuwien.ac.at"">ssimkovi@rainbow.studorg.tuwien.ac.at</A>&gt; <LI> Tatsuo is Tatsuo Ishii &lt;<A HREF=""mailto:t-ishii@sra.co.jp"">t-ishii@sra.co.jp</A>&gt; <LI> Tom is Tom Lane &lt;<A HREF=""mailto:tgl@sss.pgh.pa.us"">tgl@sss.pgh.pa.us</A>&gt; <LI> Thomas is Thomas Lockhart &lt;<A HREF=""mailto:lockhart@alumni.caltech.edu"">lockhart@alumni.caltech.edu</A>&gt; <LI> TomH is Tom I Helbekkmo &lt;<A HREF=""mailto:tih@Hamartun.Priv.NO"">tih@Hamartun.Priv.NO</A>&gt; <LI> Vadim is ""Vadim B. Mikheev"" &lt;<A HREF=""mailto:vadim@krs.ru"">vadim@krs.ru</A>&gt; </UL> </BODY> </HTML> "	b89044b27548c85b7e3d0b8bd7b55dd01280e8dc
----------------------------
Massimo's SET FSYNC and SHOW PG_OPTIONS changes, without SET QUERY_LIMIT. 	d62a7ac6d39702f6df4d119d0d2e3ba7b382e203
----------------------------
Fix for perl5 on BSD/OS breaks most other platforms, so back it out. istm that this would be a job for configure. Most modern OSes actually use perl5 by default ;) 	ae01c7f5bb4f40386e64138ae33b12f862f13796
----------------------------
I didn't see any further discussion so here is, I hope, a clean fix to configure.in to determine if a system is ELF or not.  Note that some of the tests earlier may be redundant but I took the safest route. D'Arcy J.M. Cain 	b2a0a4e8f5dc9a5b60ae2fda4938f993bcfaf7f8
----------------------------
Remove getopt configure check. 	c9acd2da12bc7fd01c7b81702d116594205f0e85
----------------------------
Put back mistakenly removed configure test for HAVE_NETINET_IN_H. 	44bc7ab2a63aa133b465efb3400d6b5254bd71e5
----------------------------
Fix configure problem. 	7badb1e792acfadec6e86214ca1292e8465b7f97
----------------------------
configure cleanup 	a927d6ea4eb8e074e50cead866a7bbae093a00b7
----------------------------
configure cleanup 	d0634aca3999e6ad7642a907bff24ff03f3eda9f
----------------------------
Update configure include checks. 	07262a2dfbf352844ecda2dc88bcaa4b66c332e5
----------------------------
Update includes from configure 	46355e94d4caf3d602ac1dfbca885bd8f818f3bc
----------------------------
More config.h cleanups. 	8f5561a0d96b110c593dab2b11ff08fd2ba826d7
----------------------------
Add config.h as needed. 	fbe4ad21540db2858032a2069c45d021c86a5596
----------------------------
Add back improperly removed #include for config.h. This probably ought to be kept in *all* the port files, but these two are the only ones that generated compiler warnings for me ... 	e1e110228f8a2a42e48be7ee0735496413b06946
----------------------------
make distclean missed a few symlinks created by configure. 	0aa544eb4161d2695409589d3607b6c2c1921170
----------------------------
Move default NBuffers setting into config.h, and rename it to DEF_NBUFFERS for readability.  Make sure the default value is OK according to postmaster.c's new sanity check for -B values. 	642d21a59bac907d00e94900f134aa645cada90b
----------------------------
Fix for duplicate LC_COLLATE 	0bb2c0673c2e7996e9211e0ebfe58a636ad930cf
----------------------------
Add configurable option controlling security checks in LO functions. 	4cd4a54c80fc1ed7b16039a71706dc80ce5d422e
----------------------------
configure.in forgot to do AC_LANG_C to reselect C-based tests after checking for presence of C++ compiler.  Odd we hadn't seen any reports of problems before... 	6687bcb558928f23301b1bec5691bc0a419af6b5
----------------------------
Turns out that configure's test for HPUXMATHLIB didn't work when used with egcs --- now it does. 	6f979c154150115571ef14af59902121a11fde7f
----------------------------
Here it is.  Remove or rename the current interfaces/libpq++ and untar this file in interfaces/ It will all need to be checked in.  I used the char *rcsid[] method for cvs ids so it can be strings | grep'd to find version numbers.  The new version for the library is 3.0. Run configure from src/ to create the Makefile and it should be good to go. I did minimal documentation references in the README, I'll see if I can get something to Tom Lockhart rather quickly. Vince. 	b14c99d8d6bdb3155fe54e6f24e8aac32a09ed81
----------------------------
Update commentary in sample GEQO config file. 	795f6ca66ab734559e6eed7a9466eb19b58f3166
----------------------------
Reduce default GEQO 'effort' setting to MEDIUM always. This agrees with the documentation and seems like a more useful default anyhow ... 	b2f14e11ec4fff4fb78bd7b0893a3b155f095411
----------------------------
Allow GEQO effort to be specified numerically, as well as symbolic LOW/MEDIUM/HIGH values --- needed for experiments with other effort levels ... 	b21005fa7cf2fb2c319b48d1b7669239553360a5
----------------------------
Minor bug fixes. Replaced DateStyle support with ISO. 	3f59cc08316f9aea92823a021c6232b298e00d03
----------------------------
Tighten coding in new_join_pathkey, which seems to be a hotspot for GEQO ... 	0b8b1fe3aababb9fbdf2d0e15f70ca41e1392fe4
----------------------------
Change GEQO optimizer to release memory after each gene is evaluated.  This bounds memory usage to something reasonable even when many tables are being joined. 	1332c1e14404407c9a106bf7096e8f58b16dc566
----------------------------
Fix some typos in geqo optimizer --- it now generates reasonable plans again.  Still eats memory like there's no tomorrow, however :-(. 	f2ed835baf0f9d4d77df312a58550eb64b63eee7
----------------------------
I've got 2 pretty small patches. configtype.patch simply fixes a typo in config.h.in pg_dump.c.patch Updates a bunch of error messages to include a reason from the backend, and also removes a couple of unnecessary if's Ole Gjerde 	de81fbd047a031321903f390a3274fdf49d872ce
----------------------------
set client_encoding to <nothing> crashes backend. 	0c1e2e493d4056b2ed0f62be41ef17d1ed49c11a
----------------------------
Fix configure to generate correct expansion of library directory in pl/plpgsql/src/mklang.sql. 	5085132c6d3f5ea9c5dec18ee6a2a70ddf4e91b5
----------------------------
"This patch is to add more comments to postgres.init.sh , clairify the options available, and to add easy support for installation of postgres into the runlevel system. ""sh postgres.init.sh install"" Will now install ""postgres"" in the /etc/rc.d/init.d directory and execute /sbin/chkconfig to hook up the symbolic links.  An uninstall option is also added. Enclosed is the patch and the patched file Clark "	9e4e33c996b6027391f2cf8b1e47d75c3e5a8c23
----------------------------
Portability patches for HPUX 11 and Unixware in configure and related files.  Also remove float.c's gratuitous redeclaration of isinf() ... looks like there are more decls in there that ought to be in config.h, but I'll leave well enough alone for now ... 	d30e2ac306c26271474e1b96c087ff8e6d859ac2
----------------------------
use new config.guess output for system specific expected files .. 	9a4344e73e02eeed321cdc1ca63ae50405808ef0
----------------------------
use config.guess instead of uname -s to figure out system, so that we can include platform spcific changes ... thanks to Mark Hollomon <mhh@nortelnetworks.com> for the awk script used 	a6311431b58f91b5fe31e97bc7efad63d01b6ccb
----------------------------
add mipsel-unknown-linux-gnu support. config.guess seems slightly changed since April 1? 	a2c96a16e453b83cebdfd948e42dd1087d28b41f
----------------------------
Reduce default file size limit to 1Gb, and move the configuration constant to config.h. 	5ce851dcda7c10513b18eb5ea1ed30976f21f174
----------------------------
Use MAXALIGN value found by configure instead of a hardwired assumption. 	2de404e173f3740fa47f4567994ad30639923810
----------------------------
Remove overly presumptuous use of __STDC__ in c.h, replacing it with configure-script tests to see whether const, inline, volatile, etc work or not.  (Curiously, configure was already doing the work to see if const and inline were OK, but the results were not getting plugged into config.h :-(.) 	f620241d73516b66ecad84084e645a617194efc0
----------------------------
Update config.guess and config.sub to versions from autoconf 2.13. 	b5b5852c26a75e23fab995b4e5f6448088538891
----------------------------
Revise memutils.h to use alignment information gathered by configure, instead of having a bunch of crufty platform-specific guesses. 	1e117923aa03a58d3c4b55b84b564aeaf681449d
----------------------------
Add KOI8/WIN/ALT to set client_encoding command help 	e1a22d5e8442dbcf55b522f87f59334978c0619d
----------------------------
Hmmm.  It had to do with tcl/tk on FreeBSD.  The configure scripts are in different directories.  The patch gave the option of specifying a dir for the tk script and if they were both in the same directory then it didn't mind being empty.  It's small so I'm including it.  It was tested with autoconf 2.12. Vince. 	0ab3c093564f683164652208677ed08b601c9c22
----------------------------
Fix int8 configure one more time ... prior version didn't define INT64_FORMAT in all cases. 	f621b85a2a0dba37813736f3f073c8b0b69b5d53
----------------------------
Have configure check for use of %lld for int64, and if that fails, check for use of %qd...a more generic solution then having #ifdef __<INSERT OS HERE>__ in the code... 	75007a72d6d3387c1e5cd6ba11e06c76513bfd64
----------------------------
geqo now at 11 tables 	a564d2bf0f5f72a752ddc4a212731404eccf403e
----------------------------
Reduce DEF_MAXBACKENDS to 32 so that default configuration is less likely to fail for lack of semaphores. 	d19fc4cacbc38279cdf44d960f686d06fa037196
----------------------------
Document configure's --with-maxbackends switch. Fix a few small typos. 	13abdde2b9399fe853296c368a4ff39f9a5d6fad
----------------------------
Rearrange handling of MAXBACKENDS a little bit.  The default setting of MAXBACKENDS is now 1024, since all it's costing is about 32 bytes of memory per array slot.  configure's --with-maxbackends switch now controls DEF_MAXBACKENDS which is simply the default value of the postmaster's -N switch.  Thus, the out-of-the-box configuration will still limit you to 64 backends, but you can go up to 1024 backends simply by restarting the postmaster with a different -N switch --- no rebuild required. 	9d197856dd5eda5cf85b15e564ae09ef8fef0e9e
----------------------------
Allow maximum number of backends to be set at configure time (--with-maxbackends).  Add a postmaster switch (-N backends) that allows the limit to be reduced at postmaster start time.  (You can't increase it, sorry to say, because there are still some fixed-size arrays.) Grab the number of semaphores indicated by min(MAXBACKENDS, -N) at postmaster startup, so that this particular form of bogus configuration is exposed immediately rather than under heavy load. 	e77b630cf0c1501008b3b72b5621f2951ef82b71
----------------------------
Remove duplicate geqo functions, and more optimizer cleanup 	ba2883b264d7bc392604bc9f76abfc30de89f5f8
----------------------------
Modify int8 to not depend on sscanf(), and fix configure's test for int8 support.  configure now checks only snprintf() for int8 support, not sprintf and sscanf as it used to.  The reason for doing this is that if we are supplying our own snprintf code (which does handle long long int), we now only need working long long support in the compiler not in the platform's C library.  I have verified that int8 now passes regression test on HPUX 9, and I think it should work on SunOS 4.1.* and other older platforms if gcc is used. 	724119a979f8f28c9e2acf92b95ef0c476768e65
----------------------------
Make GEQO use dependent on table and index count. 	f1b78234716bd639b045873c7be0c9424b897f16
----------------------------
freebsd4.0 needed to be added to configure... 	6ca2bf65346f0c54ac3347fbcb003cc2f8242fc4
----------------------------
Add configure test to see whether vsnprintf() is present, separately from snprintf() --- HPUX, for one, has snprintf but not vsnprintf.  Fix a minor typo in snprintf.c, too. 	7fab608205e7a29b2a9bcd344e409edbb4cea6e3
----------------------------
Replace direct inclusions of c.h with inclusion of postgres.h, to ensure that config.h is included as well. 	21badba151f12fe80921c2791772482d00f728d2
----------------------------
Change ordering of HAVE_TM_ZONE and HAVE_INT_TIMEZONE code blocks to give HAVE_TM_ZONE priority. This fixes glibc2 machines and any other machine which passes both tests in configure. Repair HAVE_TM_ZONE code which stuffs tm structure with date type values. Same problems as were originally there before v6.1, but never noticed. Thanks to Oleg for nagging :) 	4d56dbd678fb84cac66a47421ae06a090d438a99
----------------------------
Fix typos in rules.sgml. Add Emacs configuration block to postgres.sgml. 	c0d816c57a21d161dca18c9f7b28b4bd27ba7d92
----------------------------
Use autoconf to determine whether system has POSIX signals, instead of relying on port's os.h to tell us.  (Needed for HPUX where system major version is not enough info.) configure unsets USE_TK if X libraries not found. doc/Makefile uses gzcat or zcat as found by autoconf. 	b10a71977778e33538a4fa41a3eac79eda0534ec
----------------------------
modify configure so that template/.similar entries can be selected when they match a prefix of the  value.  The previous method, which stripped all version data from  and then tried to match that against .similar entries, was entirely useless when .similar contained several entries for different version numbers of a single OS name. 	6fef1a26ccda3856c9fe453e660ebdc15d0697aa
----------------------------
Somehow had the solaris template names reversed. Probably was something fixed in src/configure.in a while ago. 	f47bd801e3052dd296534603accec8ddaa53dc2e
----------------------------
Move configuration info to after installation procedure. Include only the current release  in the release notes section. 	40064c2b2401e56311d0d96b62606e95fef00f02
----------------------------
"Minor FreeBSD fixes put in place From: SHIOZAKI Takehiko <takehi-s@ascii.co.jp> I tried snapshot(Oct30) and made some patches. # I think that it is confused to manage both Makefile.shlib and # makefiles/Makefile.*, don't you? * configure Now FreeBSD 2.X is not supported..., so I added its entry. If ELF_SYSTEM is set, gmake treat it defined even though it is ""false"".  So nothing should be set to use ""ifdef"". BSD_SHLIB etc. may have same problems. * Makefile.shlib As you said, FreeBSD entry is much like BSD's. I only added ELF_SYSTEM code. * makefiles/Makefile.freebsd Ifdef/else/endif can not be indented with TABs. "	15d61bb43968123a78b7f2ae2b4ce689fbdaa83e
----------------------------
Minor editing and markup changes as a result of preparing the Postscript documentation for v6.4. Bigger updates to the installation instructions (install and config). 	f1f9ec3344d40961db0ca62cccd9f8f519f5abf2
----------------------------
Okay, this shoudl provide a fix for the freebsd problem... Added a ELF_SYS variable and check to configure.in... 	4283089d07dc38ba35235a7b5ce72465968c896b
----------------------------
Incorporate changes suggested by Tom Lane. Update storage space estimates. Continue cleanup. Still need to consolidate configure parameters with new config.sgml info. 	d0ffbe2f618b9d80f2919496e213ed14708039fe
----------------------------
Include configuration chapter with new info on configure and make. 	866104b3df460973d1d9b8ab4a712d5a2056a837
----------------------------
Update instructions for running configure (the old ones seem to date from some pre-autoconf interactive configure script). Revise sequence of instructions to allow you to start the regular postmaster run before running regression tests; there's no need to start and kill a special postmaster for regression tests. Update the description of interpreting regression test results. 	82f54c9d2c68298818f750a8b1fa8743cad8b1ef
----------------------------
Fix for version guessing in configure. 	759b17f0f6a60508f4bdddc16997d78eaa3d7755
----------------------------
Use AC_CONFIG_HEADER as documented by Autoconf manual: call it only once at the top of the file.  I'm surprised include/config.h wasn't being overwritten from interfaces/odbc/config.h.in ... 	f0f1b628e3c26735162be3475e2417276cd5a03a
----------------------------
The TCL/TK configuration cleanup patches I submitted have the following problem: 'tclsh' still had to be found even if --with-libs (or --with-libraries) was specified to configure. --with-libs is really an overloaded option.  It really should only be used to specify additions directories to search in order to file needed libraries.  It was also being used to locate the *Config.sh files. Billy G. Allie 	f49cf6d09448a9bd6c869923315ab27f22c17c64
----------------------------
Make genbki.sh a configureable shell program to allow auto-detection of the proper cpp program. 	b48edd74d12c7d37514b298806e37a5dc9791f8d
----------------------------
Add Taral's test for flags required by the detected cpp program to read from stdin. Necessary at least for systems missing cpp but having gcc -E. Include new configured file backend/catalog/genbki.sh. 	fe6d19f15fab4a087a532d10c61b6783cb91fbe3
----------------------------
From: Peter Gucwa <pg@softcomputer.com> Here are patches needed to complie under AIX 4.2. I changed configure.in, pqcomm.c, config.h.in, and fe-connect.c. Also I had to install flex because lex did not want to translate pgc.l. 	4fff1dada7bbaf36fea5330b641bc464566d48f2
----------------------------
change configure so that if postgresql isn't being installed as root, do not configure in the perl5 interface. the perl5 interface needs to be installed under /usr/local/lib/perl5/*, which is generally owned by root.  This allows a non-root build/install with the only root requirement being the make/install of hte perl5 stuff... 	cd3a8e232cd6b62dd8c31ecbd780c0944c84bce0
----------------------------
Recommend ldconfig on any ELF. 	0044a1bc1d506e83c9f97cba003188a953834739
----------------------------
configure cleanup 	ada4cfce297bc0c1675da8ed838a12c7f9262cd9
----------------------------
There where a few more problems fixed by the patch below. o configure.in Jan. 	40703f282afdfe8bb319f2bd914bba031db7b0f2
----------------------------
"Use the $(LN_S) substitution for ""ln -s"" since configure tests for it. "	7d4b59f02400b738ceaf95dd5ba7c9b7f75fcb4d
----------------------------
Clean up for configuration from the Postgres main configure script. Use @top-srcdir@ to find the right Makefile.global and use ODBCSRCDIR to point to this local directory. Move non-platform-specific stuff to outside the if clauses. Still need to move all platform-specific stuff to the templates. 	ed24461ca1f7689e196c124abb0514671a98b1a7
----------------------------
Add conditional compilation of the ODBC directory. Requires --with-odbc specified in the standalone configure. 	fca4519d5bd6687495d31098519fe4c1f9d38abf
----------------------------
"Separate out the lextest so that it is run by ""make"" and ""make install"". Before, ""make install"" did not run the lextest. Fix up the ODBC make from this main configure. Include configure test for ""ln -s"" in Makefile.global.in. Was always in configure, just not carried through to here for use. "	608dbb1b3e15d88928bd045bdf0f6dc31a17ab6d
----------------------------
Update source code to Byron's v6.30.0250 sources plus minor cleanup to get rid of unused variables. Get clean compile on Linux (Thomas and Gerald). Implement autoconf/configure for standalone builds and use the existing autoconf/configure system when in the Postgres source tree. Code tests and functions with ApplixWare-4.4.1beta on a Linux box. Changes should be backward compatible with WIN32 but still needs testing. 	1eab86e26da7d6a18d8acc4c320d72b0df2527b7
----------------------------
Try to configure interfaces/odbc using the --with-odbc switch. Suppress installing man pages from here; do it from the doc/Makefile now. 	72129e98ce40d44a1b4c537b8c71611666cb36a0
----------------------------
Add configure test to make sure fcntl(SETLK) is available. 	e7e027a6c9ca2fde9c05da9fda8ea89d1a6296c6
----------------------------
Add configure test to make sure fcntl(SETLK) is available, and make backend/libpq/pqcomm.c only try to lock the socket file when the call exists.  Also, change open-RDONLY to open-WRONLY; at least on my platform, you can't get a write lock on a file you didn't open for writing. 	9e23ab9b5c62ff048584ba3e5de646eff5017fca
----------------------------
Our 'install-sh' script is BSD-style, therefore requires -c to behave sanely.  configure was not treating it as BSD... 	3512284bdaa34cc03051543f0cdb7fa19fcd9385
----------------------------
Fix for memory leak, configure path fix, from Tom Lane. 	a186b57bff6307176f03ceeccbf91fecdcbc213a
----------------------------
Add Unix-specific installation and configuration info for psqlodbc. 	29c3c3a291b9f67f00fe474e6ba3a15cdff4592b
----------------------------
The attached patches fix the following problems: 1.  The UnixWare tas macro was reformatted (by indent or it like?) which caused it to break.  The asm macro construct is very particular about the %mem construct -- it has to start in column 1. 2.  When compiling libpq++, g++ was used even if configure found the C++ com- piler to be CC. 3.  When compiling libpq++, '-Wno-error' was added to CXXFLAGS, even if the compiler wasn't g++. Billy G. Allie 	f1ab71ec5f2614540587282bcaa4dad44a54efa7
----------------------------
Cleanup of configure.in 	a19b1dc705297706c0771a1d1977d66d96dbfae1
----------------------------
Configure fix for install script search. 	b07f4b4efb1eb9873f493613ed3c7ab69bf51b78
----------------------------
From: Tom Lane <tgl@sss.pgh.pa.us> We're carrying around a copy of install-sh in case the local system has no install script.  It's wasted baggage, because configure doesn't know it's there :-(.  (Apparently everyone who's used postgres lately already had an install script somewhere in their path.  I happened to try to run configure with a minimal PATH tonight, and it promptly gave up for lack of an install program.)  Here's the patch. 	91178b8b2ee131b8de301efe10ac3e80b080e735
----------------------------
Make old db directory configurable. 	3b7d13a6b0e6c242ee87d43119781937b0554db5
----------------------------
Massimo Dal Zotto <dz@cs.unitn.it> > socket-flock.patch > >       use advisory locks to check if the unix socket can be deleted. >       A running postmaster keeps a lock on that file. A starting >       postmaster exits if the file exists and is locked, otherwise >       it deletes the sockets and proceeds. >       This avoid the need to remove manually the file after a postmaster >       or system crash. >       I don't know if flock is available on any system. If not we could >       define a HAVE_FLOCK set by configure. 	51e8e187d1ca6963a5467890a7f8ebbf8b59f573
----------------------------
From: Massimo Dal Zotto <dz@cs.unitn.it> config.patch remove old defines no more used in the code. 	1acf0d85fefca64737fa05f99d7b6dd44d7bc783
----------------------------
"I have found a minor problem with current configure.in. [AC_MSG_RESULT(yes) AC_DEFINE(HAVE_LONG_INT_64)], this line produces something like: echo ""$ac_t""""yes"" 1>&6 cat >> confdefs.h <<\EOF and would append garbage ""yes cat"" to confdefs.h. Of course the result confdefs.h is not syntactically correct therefore following tests using confdefs.h would all fail.  To avoid the problem, we could switch the order of AC_MSG_RESULT and AC_DEFINE (see attached patch). This happend on my LinuxPPC box. Tatsuo Ishii t-ishii@sra.co.jp "	648f007fdb1e145df88839aab5aa4376d6e46afe
----------------------------
Fix for SNPRINTF test in configure From: Tom Lane <tgl@sss.pgh.pa.us> 	31de2c9461dff3284ad61084c73eba093fa3f68e
----------------------------
Check for bad result from pg_id. A bad result can come from shared library trouble, and the name of the shared library has been changed recently. Had to rerun ldconfig on my machine to get it working again. Give an error message with a helpful hint if so... 	58e9267026a5fb9217d6231349c55f8b1c745b48
----------------------------
Adrian Hall reported a problem to me that snprintf() doesn't exist in, at least, Solaris 2.5.1.  We use it in backend/utils/adt/int8.c. Add a check to configure so that we see if it exists or not, and, if not, compile in snprintf.c from backend/port, which was taken from, and falls under the same Berkeley license as us, the FreeBSD libc/stdio ... 	0668aa88179cce20362bad88c9f0be0a461bb699
----------------------------
Information moved to doc/src/sgml/geqo.sgml. 	596731dcf8ba4ad4bce42a5924dba53a74eaba62
----------------------------
From: t-ishii@sra.co.jp As Bruce mentioned, this is due to the conflict among changes we made. Included patches should fix the problem(I changed all MB to MULTIBYTE). Please let me know if you have further problem. P.S. I did not include pathces to configure and gram.c to save the file size(configure.in and gram.y modified). 	5979d7384179a41390c1ed122c6cc60d30287e2a
----------------------------
My mailer munged the intro text in my last post.  Here is the text in a more readable form.  -- I am submitting the following patches to the June 6, 1998 snapshot of PostgreSQL.  These patches implement a port of PostgreSQL to SCO UnixWare 7, and updates the Univel port (UnixWare 2.x).  The patched files, and the reason for the patch are: File            Reason for the patch --------------- --------------------------------------------------------------- src/backend/port/dynloader/unixware.c src/backend/port/dynloader/unixware.h src/include/port/unixware.h src/makefiles/Makefile.unixware src/template/unixware Created for the UNIXWARE port. src/include/port/univel.h Modifed this file to work with the changes made to s_lock.[ch]. src/backend/storage/buffer/s_lock.c src/include/storage/s_lock.h Moved the UNIXWARE (and Univel) tas() function from s_lock.c to s_lock.h.  The UnixWare compiler asm construct is treated as a macro and needs to be in the s_lock.h file.  I also reworked the tas() function to correct some errors in the code. src/include/version.h.in The use of the ## operator with quoted strings in the VERSION macro caused problems with the UnixWare C compiler.  I removed the ## operators since they were not needed in this case.  The macro expands into a sequence of quoted strings that will be concatenated by any ANSI C compiler. src/config.guess This script was modified to recognize SCO UnixWare 7. src/configure src/configure.in The configure script was modified to recognize SCO UnixWare 7. Billy G. Allie 	0624f3dcbd990bc9cf9b2e9740cdd68de72227c9
----------------------------
Currently, building on any platform that hasn't got getrusage() requires manual editing of src/backend/port/getrusage.c, because its substitute version of getrusage is #if'd out. There is no good reason for that, because configure won't even include the file into the Makefile unless the platform hasn't got getrusage.  Furthermore, we only have one working substitute version of getrusage --- the alleged HPUX syscall-based code doesn't work. (It causes a coredump because the syscall returns a struct rusage that's much larger than the stub struct defined in src/include/rusagestub.h.)  The times()-based emulation works fine on HPUX, however. I propose, therefore, that getrusage.c should just unconditionally compile the times-based version, and rely on configure to include the file only if needed.  This will be one less manual configuration step on all platforms that need this code. Patch attached. Tom Lane. 	976b3862ce8f4f6c9c7bdc7e21010ffe39dba504
----------------------------
Hi, here are the patches to enhance existing MB handling. This time I have implemented a framework of encoding translation between the backend and the frontend. Also I have added a new variable setting command: SET CLIENT_ENCODING TO 'encoding'; Other features include: Latin1 support more 8 bit cleaness See doc/README.mb for more details. Note that the pacthes are against May 30 snapshot. Tatsuo Ishii 	cb7cbc16fa4b5933fb5d63052568e3ed6859857b
----------------------------
Here are two patches to fix up the c++ (and c) support in the configuration system.  The idea is to make the configure arguments that specify compilers to be compatible with the other --with options.  The main point, though, is that the c++ support is on by default, but can easily be disabled by the --without-CXX option for those few(?) that don't want it. Brook Milligan 	916cb38431af6e41cdc8f744d545ffd01343daba
----------------------------
Auto-seed random so user's can't request random values based on our postmaster random seed used from cancel. 	755c00a3604b3de3dc02daf880e79142c00bc9ca
----------------------------
1998-05-18  Karl Eichwalder  <ke@suse.de> * configure.in (AC_CHECK_LIB): check for ncurses; if this fails check for curses. 	b2d7c58cb23daef2f6ee729ce9896560645f84e3
----------------------------
Remove --disable in configure 	1a07a522f9719a7cec105ccdeb4ddccdee5afe29
----------------------------
Remove --disabled options from configure 	d020a2835ff14268be8b75a298a48dd0ec731dae
----------------------------
"The attached patch corrects two problems with autoconfiguration of psql in Postgres 6.3.2.  Both of these problems were complained of recently in pgsql-questions: 1. In the right circumstances, psql.c will fail to compile due to trying to include a nonexistent <history.h>.  (Thread ""Compile-time error"" around 17 Apr 98.) 2. In other circumstances, psql will compile but does not provide command history capability, even though the underlying readline library supports it.  (Various threads, most recently ""query repetition in psql"" around 29 Apr.) Tom Lane "	982c695fbd33aaabdbcb546f78ed475bdd474ea2
----------------------------
Someone remove a #define too much from pg_proc.h which breaks compiling nbtsearch.c after configuring with --enable-cassert. Patch below. -- --------------------------------------------- Göran Thyni, sysadm, JMS Bildbasen, Kiruna 	1b70585d4b41b3ffa4532b9ed72ae9ac9d920206
----------------------------
Include full tools installation instructions from Tom Helbekkmo. Include small section on authoring and Makefile configuration. Rearrange section order. 	446a9936ab4527bed3e3fc176b5a4e128247ba86
----------------------------
"From: t-ishii@sra.co.jp Hi, here are patches I promised (against 6.3.2): * character_length(), position(), substring() are now aware of multi-byte characters * add octet_length() * add --with-mb option to configure * new regression tests for EUC_KR (contributed by ""Soonmyung. Hong"" <hong@lunaris.hanmesoft.co.kr>) * add some test cases to the EUC_JP regression test * fix problem in regress/regress.sh in case of System V * fix toupper(), tolower() to handle 8bit chars note that: o  patches for both configure.in and configure are included. maybe the one for configure is not necessary. o pg_proc.h was modified to add octet_length(). I used OIDs (1374-1379) for that. Please let me know if these numbers are not appropriate. "	f554af0a9fdbe0e9636fce36d6c809e81ce1539c
----------------------------
"From: Tom Lane <tgl@sss.pgh.pa.us> HP-UX (all versions) requires shared libraries to have execute permission, and really needs them to be exactly mode 555 for performance reasons.  The standard configure/install procedure installs libpq.sl as mode 644, which DOES NOT WORK. The attached patch modifies the makefiles to distinguish INSTL_LIB_OPTS (install mode for ordinary libraries) from INSTL_SHLIB_OPTS (mode for shared libs), and adds a test to configure to set INSTL_SHLIB_OPTS=""-m 555"" when on HP-UX. "	6d817475b243c0b220176b0ee0c631d0b33f97bd
----------------------------
Add prper perl config testing. 	e8fd57d7633ab9ddcd64861e13a59aa8dfbc3b05
----------------------------
Clean up configure so that it properly (I hope?) GUESSes the template to use, if not stipulated via --with-template 	f2b64d3593f71fb76a3164ffbf2d350de7aad177
----------------------------
A few minor mods: gram.c updated scan.c updated ecpg/Makefile added LDFLAGS configure requires sfio for those systems with it installed... 	83fd305f7839446dcc1830318a7f4f3713261f2c
----------------------------
Get rid of the TEMPLATE verbosity and make it so that --with-template is documented in ./configure --help 	2219c230ed3df2244d8e866c30cc2ff7fcceeb21
----------------------------
From: Brook Milligan <brook@trillium.NMSU.Edu> Here is a pair of patches that (I hope) finish the configuration issues with tcl/tk and make the recognition of the two packages completely parallel in organization.  This should make future changes easier to maintain. Hope to see this in 6.2.2. 	89731922831ce09fd547b5b872e6cf3bce096eb1
----------------------------
Update configure. 	3da39b3fd26b5fbc51f85cb0963da94d1b213d1e
----------------------------
"this patch solve 2 problemes : probleme number 1 : - configure can find the library readline , but don't find the header file . so in this case we don't use lib readline . probleme number 2 : - when you have postgres 6.2.1 and readline installed with the same prefix( and generally all your software ) .  you can compile the version 6.3 .  I use this prefix , when configure ask me for ""Additional directories to search for include files"" . ( because there a conflict in the header when you compile psql.c ) In this case, you must permut the sequence of directive -I . Erwan MAS "	fdb37f073be63ba111235dd0e47181cf93596b26
----------------------------
configure cleanup. 	34fec16198ef8a18f69992df0ac7d0bee5a00551
----------------------------
Here are 3 patches (all relative to the src directory) to help with the configuration of v6.3.1.  I have replaced the queries for include/lib directories with --with configuration options.  I have also included a list of potential tcl/tk include directories directly in the CPPFLAGS variable.  As new versions are needed, these should be added to the list in reverse numerical order (libraries are in a separate list near the end).  This greatly simplifies the later checks if --with-tcl is set.  I hope this solution works for everyone. I also added a check to disable the perl support if postgres was not already installed (as per the instructions in the directory). By the way, why must there be an installed pgsql to compile perl support? This seems odd, at best. Finally, I changed the Makefile in the libpgtcl interface to place the shared libraries at the end of the list of files, not at the beginning.  With NetBSD at least, libraries are linked in order, so the original sequence does not work. Brook Milligan 	05102c755105a40f60ef9bebbc0abc6a212b349a
----------------------------
A couple of weeks ago I submitted a patch to fix configure --with-tcl. However somebody else also applied a patch to the same part of configure to fix a different problem. So part of my patch was not applied or got reversed or ... whatever. The attached patch will restore configure --with-tcl to working order and should remove a lot of the messages complaining about tcl not working. Alvin 	675502693750e59619180baa027c76fcb15f3f7f
----------------------------
resync configure 	91964bd98429ef89a9a462f7b7d508d697d7b352
----------------------------
"Pointed out by: Doug Winterburn <dlw@seavme.xroads.com> 3) Add ""#include ""config.h"" to src/interfaces/ecpg/preproc/pgc.l to correct ""strings.h not found"".  config.h has the proper define to make this work and should probably be near the top of pgc.l before the first include. "	62943bb76fdb8e2283e2d01e2c81963578a50f62
----------------------------
"Pointed out by: Doug Winterburn <dlw@seavme.xroads.com> 2) Add ""#define gettimeofday(a,b) gettimeofday(a) to src/include/config.h On the 88k SVR4, gettimeofday only has one argument.  This is checked for in a few other packages by configure, so there should be some examples of the configure test out there. "	92c6bf9775bbcee2f8da9e2c872c3a28f3eaf228
----------------------------
There's a patch attached to fix gcc 2.8.x warnings, except for the yyerror ones from bison. It also includes a few 'enhancements' to the C programming style (which are, of course, personal). The other patch removes the compilation of backend/lib/qsort.c, as qsort() is a standard function in stdlib.h and can be used any where else (and it is). It was only used in backend/optimizer/geqo/geqo_pool.c, backend/optimizer/path/predmig.c, and backend/storage/page/bufpage.c > > Some or all of these changes might not be appropriate for v6.3, since we > > are in beta testing and since they do not affect the current functionality.  > > For those cases, how about submitting patches based on the final v6.3 > > release? There's more to come. Please review these patches. I ran the regression tests and they only failed where this was expected (random, geo, etc). Cheers, Jeroen 	9a0dd4fb183958f59f68d8a5f096dd8df18d9b59
----------------------------
fix for tcl/tk in configure 	4d09be441321cfbaa942426f473e2d6e0cf0cfbd
----------------------------
"Reply-To: Jordi MacDonald <jordi@spartanmedia.com> There is an error in the configure script when using --with-pgport= that will cause the compiled version of PostgreSQL to no longer allow connections to the new port and to treat shared memory improperly. What happens is that if the port is changed, the configure script defines DEF_PGPORT as """", which atoi() will return as 0, which makes the IPC_KEY value 0. This then causes semaphores to be allocated, but never released. Postgres eventually returns from semget() with ""no space left on device"". The source of this error could easily be overlooked in version 6.3 since it is possible to connect via UNIX domain sockets, and having DEF_PGPORT defined as ""0"" would not be noticed until TCP was used. "	bb7f173c0c07db2973e4b35286560ca8cc01d3a1
----------------------------
One last change to configure for 'non-gcc' compiler 	b1c7c31e07b9284843d85bbe71a327a1ca13be63
----------------------------
Change configure to reflect v6.3 vs v6.2 :) 	86d1343987c86e9876e90b7f31a363282c1557f0
----------------------------
Forgot to run autoconf after updatign configure.in for Cyrillic patch 	4ce6f0826e5c2ced4fee3646015061b97233517b
----------------------------
"From: ""Denis V. Dmitrienko"" <denis@null.net> What it does: It solves stupid problem with cyrillic charsets IP-based on-fly recoding. take a look at /data/charset.conf for details. You can use any tables for any charset. Tables are from Russian Apache project. Tables in this patch contains also Ukrainian characters. Then run ./configure --enable-recode "	0227a4e1141ae83ac3ae145fa283ede13e86e23e
----------------------------
From: t-ishii@sra.co.jp Ok. I have decided to use: #if defined(sun) && if defined(sparc) && !defined(__svr4) instead of defined(sunos4).  interfaces/libpq/libpq-fe.h and include/c.h have been modified(see included patches). Another porblems I have found are: o SunOS lacks strtoul(). to fix this I stole strtoul.c from FreeBSD and place it under backend/port. necessary modifications have been also made to backend/port/Makefile.in, include/config.h.in and configure.in (see included patches). 	96316211c3a1300b304d452e09c726fb775aa502
----------------------------
Configure patches from Brook Milligan. 	55f86ec8f7b86480facd04d641a05d953c03ec33
----------------------------
"The problem is that $ac_cv_prog_gcc is empty, instead of 'no' or whatsoever. The patch is not a solution, because configure is generated from configure.in, and I don't know how to patch it to get a working 'configure'. From: ""Pedro J. Lobo"" <pjlobo@euitt.upm.es> "	067cb82d6adc916ab0ae504bc43a7422ad58c4e7
----------------------------
Makefile.in needs to be configured to use PORTNAME variable 	b7c0d48423a0128cf71c9a8a0243e87e49707629
----------------------------
Remove interfaces/ecpg/{include,preproc}/Makefile.in from configure 	084e66a07766824c9566c276cc56d8eff7cb329b
----------------------------
Clean up Makefiles - shouldn't require configure *.in Makefiles, as they should pull their data/info from Makefile.global 	d8b59b1d30f4a00d3b593178be05ca1ab9df5f76
----------------------------
Remove configure code from ecpg, as well as remove the 'for' loop from the Makefile, as it isn't appropriate for GNUmake 	7783c2b9ff236694266dc41435e614bab3010b23
----------------------------
From: Michael Meskes <meskes@topsystem.de> Cleanups for ecpg, as well as a missing patch so that its configured in 	df10360d8e3f279db041b6f14f13adca1ba39d33
----------------------------
From: Michael Meskes <meskes@topsystem.de> Cleanups for ecpg, as well as a missing patch so that its configured in 	72aa1dabb9aa956002bd541afab88eb1a22c10ba
----------------------------
"From: Michael Meskes <meskes@topsystem.de> Remove ""temp"" configure files "	755c2be9b43570c2a3252490fe2696372e310480
----------------------------
Build in a 'dummy' tas file...nothing in it, just used for the link process of configure 	af7a2b3243f64e56a5e77b5d0ce70de0f98c789a
----------------------------
Fix up the alpha port/dynloader for configure 	67c92f423aae5bb2500b7dffb0fc2a4267d2e546
----------------------------
Move all the isinf() stuff from float.c to isinf.c, and build it according to configure vs port specific #ifdef's... 	e6e364088ac5c980e3fb99300ba74cc26296000b
----------------------------
add CC:cc so that configure uses cc on non-gcc machine From: Stan Brown <stanb@awod.com> 	7aeda9d667567121b05895b9edbcd58f81950060
----------------------------
Patch to document the /etc/psqlrc / ~/.psqlrc config files From: <Dr. Andrew C.R. Martin> martin@biochem.ucl.ac.uk 	b611fefa0fadf690383970356573fe5f94be72c3
----------------------------
"From: Tom I Helbekkmo <tih@Hamartun.Priv.NO> Hi -- a couple of small items concerning the January 23rd snapshot: the inclusion of the Kerberos stuff in one Makefile, a ""leading tab"" cleanup in another, and a fix for a typo in the configure script. "	25a8c053e3309d53b82862e96a5594120ac7528b
----------------------------
A dummy file so that configure under solaris works 	e697082f00ddcba87917af4376ea3adb41c916df
----------------------------
Must commit configure changes after patch to configure.in 	2a29325cec90101db8f972f16b7353c27785f710
----------------------------
"From: ""Billy G. Allie"" <Bill.Allie@mug.org> The attached patches will allow postgreSQL to compile successfully on SCO UNIXWARE 2.1.x.  The patches fix the following problems: 1.  Configure did not properly recognize the UNIXWARE system as needing the univel port.  It used the sys4 port. 2.  Configure did not properly process the CC flag in the template file. 3.  There was no working test and set locking implementation for the native UNIXWARE compiler. 4.  The test and set locking used for Intel X86 that was selected by defining NEED_I386_TAS_ASM could fail in a multi-processor environment. 5.  The makefiles for libpq and libpgtcl did not make a shared library for the univel port. "	36c1c94bca30a730bec1bb9f5163ccfbb7565fed
----------------------------
"Fix: nodeAgg.c: WARN -> NOTICE for elog parse_oper.c: was created after patch for fmgr_info, so function call wrong scan.c: regenerated for i386_solaris using flex 2.5.4 gethostname.c: required prototype for gethostname() function config.h.in: create prototype for isinfo() function isinf.c: ""fake"" isinf() under i386_solaris using fpclass() call... "	d876c2580352fad94a22e57792a12da9ec9b85dd
----------------------------
"Further clean up ""auto-configuration"" for ports "	80b6206c5a739d99f0232d141c414ba103640934
----------------------------
Add a 'dummy' file for i386_solaris.c for configure 	dfef663fd677101d925b5cae24488add33c1634f
----------------------------
Some *very* major changes by darrenk@insightdist.com (Darren King) ========================================== What follows is a set of diffs that cleans up the usage of BLCKSZ. As a side effect, the person compiling the code can change the value of BLCKSZ _at_their_own_risk_.  By that, I mean that I've tried it here at 4096 and 16384 with no ill-effects.  A value of 4096 _shouldn't_ affect much as far as the kernel/file system goes, but making it bigger than 8192 can have severe consequences if you don't know what you're doing.  16394 worked for me, _BUT_ when I went to 32768 and did an initdb, the SCSI driver broke and the partition that I was running under went to hell in a hand basket. Had to reboot and do a good bit of fsck'ing to fix things up. The patch can be safely applied though.  Just leave BLCKSZ = 8192 and everything is as before.  It basically only cleans up all of the references to BLCKSZ in the code. If this patch is applied, a comment in the config.h file though above the BLCKSZ define with warning about monkeying around with it would be a good idea. Darren  darrenk@insightdist.com (Also cleans up some of the #includes in files referencing BLCKSZ.) ========================================== 	374bb5d2610d0f520abbc602bbf1d6b9c533f335
----------------------------
Make sure configure reflects changes 	0356acebd557b1dd99a2d627851b146ec0a7ce36
----------------------------
These files will get link'd to 'dynloader.[ch]', from configure, which will then get link'd into SUBSYS.o 	153558dff8a95dd89f3b5713838c22debe3b78e8
----------------------------
More cleanups.  Move alot of the prototype definitions straight into config.h, right beside their appropriate HAVE_ #ifdefs...one central location that is included everywhere... 	903e21b4513a956bcbe2de6152b201b7fbd001f6
----------------------------
Update configure so that it auto-detects and configures for missing functions... 	d7046ada024752df1fbcede0220c0fd32a9a1d09
----------------------------
"Okay, that's it for tonight...broke a few ports, most likely, but that is expected...a few ports don't have ""ports"" anymore, with most things auto-configured by configure like it should be :) "	2b4db36c00caaf117e38f1d267e06934a1fab091
----------------------------
port.c no longer required...individual functions that were in there are auto-generated via configure individual functions in individual files 	3ad815fc2a15c96afd29298cff0ad0dfaf7c9fc4
----------------------------
"More cleanups.  I can now compile without PORTNAME being defined n Makefile.global. End result, if all goes well, should allow for much easier porting, since there will no longer be a concept of a ""port"".  Most, if not everything, *should* be determined by configure, or by the compiler itself.  Still work to be done though :) "	5379b84eff3ae207635d7ac9527b0a3f5eb272e7
----------------------------
"Enable timespan_finite() and text_timespan() routines (was commented out). Define an ""ISO-style"" timespan output format with ""hh:mm:ss"" fields. Enabled by DateStyle = USE_ISO_DATES. "	d451a3b3bcdb81902687f578ef646a08653eb9e1
----------------------------
"First pass through, of many to come, towards making the whole source tree ""non-PORTNAME"" dependent.  Technically, anything that is PORTNAME dependent should be able to be derived at compile time, through configure or through gcc "	542d4e528d9622b2f0d0f9444fb963a9c6b1c209
----------------------------
Use environment variable PGDATESTYLE on backend startup to initialize date/time formats and conventions. 	8de20a3aedbd2034a51ae039c8bbe2f3f1481b24
----------------------------
Allow logging of output to syslog or /tmp/postgres.log. Put all configurable parameters near top of file. Remove explicit path to postmaster executable. More comments. 	1932d92161b35339a5947eded598233821ca2676
----------------------------
Add 'GERMAN' option to DateStyle. 	0295864514162361c30ca034e110223bb8ee20ef
----------------------------
gmake distclean wasn't removing the configure generated Makefile in pg_version... ...fixed 	3253f9e222da2a31ff118868ab4830bc72f1a33c
----------------------------
Add mention of PGDATESTYLE, PGTZ, PGCOSTHEAP, PGCOSTINDEX, PGRPLANS, PGGEQO as initialization environment variables. 	e9c31055e68a5fcfc641cff89e3514311f46e299
----------------------------
Add other initialization environment variables: PGCOSTHEAP, PGCOSTINDEX, PGRPLANS, PGGEQO (PGDATESTYLE, PGTZ already defined) 	3a73060ba517a5b52d107a6b15c3a4e359c2e3c3
----------------------------
"Add PGTZ environment variable to initialization code. Rename PG_DATESTYLE to PGDATESTYLE environment variable. Move environment variable code to a different place so it now works! Note that regression tests can now run with ""setenv PGTZ PST8PDT"" at the frontend rather than requiring the backend to have TZ set. "	367089b0c12eee2b4efd764931cee74b2b6fcd0b
----------------------------
Make configure more automated, from Brook Milligan. 	1dfde614a40fb28859cb537d838dff357433544c
----------------------------
"c.h: #define StrNCpy(dst,src,len)    \ (strncpy((dst),(src),(len)),(len > 0) ? *((dst)+(len)-1)='\0' : \ NULL,(void)(dst)) ^^^^^^ - to avoid ""value computed is not used"" from gcc in ma-a-any places (should to fix thouse places instead, but ... time) config.h.in: /* * TBL_FREE_CMD_MEMORY: free memory allocated for an user query inside * transaction block after this query is done. */ #define TBL_FREE_CMD_MEMORY - this is default now. "	6855820e8f13d798f271dc1498cb56ceb48dc521
----------------------------
Update configure. 	9eaaf36f04e7cd0ef103e3c7accbb99af3ad2e1d
----------------------------
Configure OS cleanup. 	2a8bea900a3c3a239b87ae0dd171517132b814a6
----------------------------
Update configure. 	e9cd0f2e6bfec624de8d4f15a4c880b583008ac0
----------------------------
Have to do [[ ]] in configure.in. 	c3072cb1f04228ee2a185a63ca311f50a4f978a5
----------------------------
Add in srandom() check to configure Add appropriate HAVE_{RANDOM,SRANDOM} values to config.h Add approrpiate #ifdef's to sparc_solaris port files for Solaris v2.6 	220941dac56019c8f01b67f1801c83eee0c6052e
----------------------------
-Linux configure additoin, libtcl Makefile patch. 	9b7f362d0ac937ae8d0a77bcbf58d0324ae863b7
----------------------------
configure cleanup. 	e0a4c7acaaa15592fb72c9736e1309e35c38fa00
----------------------------
Increase default geqo parameter to 8. 	cf5a8723ddc1e7ce152007d80e5ff973f229a72d
----------------------------
pg_password utility.  Cleanup for psql passwords.  New datetime contrib stuff for new version.  Fix for strutils needing config.h. 	f8fda03d12971361781546e3f74d1a703d1841c3
----------------------------
Makei configure less os-version specific, were possible. 	105889e1d83407250cf5e3f08045261f70e4e0e2
----------------------------
Configure cleanup for /usr/ucb patch. 	f5f18af02b156cd2acf0b1f7bd7fba843f48f217
----------------------------
configure.in cleanup for tr and strerror2. 	cdc2c06386e88477a5d7f098e220d9c88da6cfe3
----------------------------
configure.in cleanup from sco install. 	6c93fe8f9d6957cd8323e885f42d326629e6999b
----------------------------
Update configure after sunos4 update. 	9db76f384d48b615de011ef9e74c076acbcedf3e
----------------------------
Add sysv4 support to configure and docs. 	10da89c1fbb4bd6388a7254181803de7ba22958a
----------------------------
"Add test results for ""SET DateStyle"" alternative datetime formats. "	54c38a95ee5fed61f33af48c1ccc91dae818286a
----------------------------
Include tests for DateStyle output format variations. 	48b5432769d302768c0a869e579a916243ec1374
----------------------------
"Test ""SET DateStyle TO..."" output options. "	c05a7bd972d01a2e7af901afe1069625e21f119e
----------------------------
"Test the ""SET DateStyle TO..."" date formatting modes. "	89abee4691f9bd50666b3bbf854539876124e50c
----------------------------
Use the standard date/time encoder rather than strftime() for output. This allows use of the DateStyle session variable. 	1f4f4534a0060a1cc39ad45760416d87cd80124b
----------------------------
geqo_rel_paths(): compute_joinrel_size() shouldn't be called for non-JoinPath path! So now we have: if ( IsA_JoinPath (cheapest) ) rel->size = compute_joinrel_size(cheapest); 	dee872de5c76b3652bcb985d3e06af32e4c9db4a
----------------------------
"From: ""Eric H. Raskin"" <ehr@listworks.com> Subject: [PATCHES] DG/UX 5.4R11 patches 1) config.guess -- it doesn't understand that the new default ""TARGET_BINARY_INTERFACE"" (m88kdgux) is now an ELF format, not BCS. "	65c4a526fec879413d260cf5be06a8c72628464d
----------------------------
gimme_tree(): got rid of compute_rel_size() - compute_joinrel_size already called by geqo_rel_paths. 	e3d2f1f35d478eaabf4cd08b64967266760498ec
----------------------------
"From: ""D'Arcy J.M. Cain"" <darcy@druid.net> Subject: [HACKERS] backend/optimizer/geqo/geqo_erx.c I sent these changes in with a bunch of others.  Some were folded in but others, like these, were not.  I am not sure why so I am resending this to the developers list by itself for discussion. The readon why I suggest these changes is that the compiler can't tell that minimum_count is initialized before it is used.  The tests that I add in here will cause an immediate error if it doesn't.  As the comments below suggest, if it is 100% guaranteed that the variable will always be initialized then how this is so should be commented here.  I don't know how much strain the actual test puts on the performance but if it isn't too much then maybe leave it in for absolute safety anyway. There are also a few returns just to stop warnings. "	f50b103ce1b0aca3f63d47865dcf6f89ded158e5
----------------------------
bsdi configure detection fix. 	ce2fcd0180cc0de5253167545608673695d1a712
----------------------------
SET geqo TO 'on' restores _use_geqo_rels_ to GEQO_RELS, not to last specified with 'on' #. What is better ? 	b46e5b528103f204224bfe007f3d2ffe3513a8a1
----------------------------
#define GEQO_RELS 6 (not 7) 	9c0d64c21c3623db84bffaa6f0f3cff679a20e7e
----------------------------
Update man and psqlHelp for new SET GEQO=# option. 	09e41a037e5761a86e981c013b173385c84f5d31
----------------------------
#define GEQO_RELS 7 moved from geqo.h to internal.h. 	465047d604b5f6fff26b9303010b6078619a64cf
----------------------------
Use GEQO if _use_geqo_ is TRUE and # of relations is >= _use_geqo_rels_ (both are settable via SET geqo TO ...). 	05404562fb2b850e4202de9b3fe769c17fa43903
----------------------------
SET var TO 'a=b' ^^ is supported by get_token now. (SET geqo TO 'on=XXX' works now). 	cda886fd06a1ab6c2d5ff42d442905e971327279
----------------------------
Add bsdi 3.0 to configure. 	f93bd64504217eeeda04f8ba56ea3145aab5c639
----------------------------
Enable GEQO for more than six tables, from Martin. 	8bc7439ccf936d58bfca0509e138b3e3b0df73f0
----------------------------
From: Darren King <aixssd!darrenk@abs.net> Subject: [PATCHES] AIX make patch resubmitted. Misc patches for AIX from Darren: 1)  New src/makefiles/Makefile.aix  This patch should only be applied if the following patch (4) is applied to backend/Makefile! Still looking into having configure determine the last line to do the shared link.  The 325 code will work for 41, so I put that in as the default.  Included a commented out 41 line for completeness. *and* 4)  Patch the backend Makefile.  I've reviewed this patch with respect to the other ports that use MAKE_EXPORTS (svr4 and univel) as closely as I could and I don't see where it will break them.  If it does, please let me know and I'll rework it somehow. 	24ed6d604d3659edb9a175e0fd90ae7983480506
----------------------------
"From: ""Martin J. Laubach"" <mjl@CSlab.tuwien.ac.at> Subject: [PATCHES] libpq SET var TO patch One last, I hope. This one corrects a bogus format string, and actually sends the contents of PG_DATESTYLE to the backend. That means, you can do a setenv PG_DATESTYLE 'iso', and your libpq will pick that up and tell the backend. "	821720213437d1da3515d8ce12916ca16ee33b8e
----------------------------
SET geqo TO ON|OFF 	de97e7fae8e1470baa8ed58ee468db502cfed171
----------------------------
#ifdef GEQO bool _use_geqo_ = true; #else bool _use_geqo_ = false; #endif _use_geqo_ is settable via SET var TO ... 	a4792bd3d6ac50a313ccf0a24baa8637bb6f3ec6
----------------------------
Fix configure so that installbsd gets -c also From: Lee Roth <roth@tpusa.com> 	f4279c46e7776a3f194d08a2e2870239e44b4c65
----------------------------
"To: Thomas Lockhart <Thomas.G.Lockhart@jpl.nasa.gov> Subject: Re: [PATCHES] SET DateStyle patches On Tue, 22 Apr 1997, Thomas Lockhart wrote: > Some more patches! These (try to) finish implementing SET variable TO value > for ""DateStyle"" (changed the name from simply ""date"" to be more descriptive). > This is based on code from Martin and Bruce (?), which was easy to modify. > The syntax is > > SET DateStyle TO 'iso' > SET DateStyle TO 'postgres' > SET DateStyle TO 'sql' > SET DateStyle TO 'european' > SET DateStyle TO 'noneuropean' > SET DateStyle TO 'us'         (same as ""noneuropean"") > SET DateStyle TO 'default'    (current same as ""postgres,us"") > > (""european"" is just compared for the first 4 characters, and ""noneuropean"" > is compared for the first 7 to allow less typing). > > Multiple arguments are allowed, so SET datestyle TO 'sql,euro' is valid. > > My mods also try to implement ""SHOW variable"" and ""RESET variable"", but > that part just core dumps at the moment. I would guess that my errors > are obvious to someone who knows what they are doing with the parser stuff, > so if someone (Bruce and/or Martin??) could have it do the right thing > we will have a more complete set of what we need. > > Also, I would like to have a floating point precision global variable to > implement ""SET precision TO 10"" and perhaps ""SET precision TO 10,2"" for > float8 and float4, but I don't know how to do that for integer types rather > than strings. If someone is fixing the SHOW and RESET code, perhaps they can > add some hooks for me to do the floats while they are at it. > > I've left some remnants of variable structures in the source code which > I did not use in the interests of getting something working for v6.1. > We'll have time to clean things up for the next release... "	4b5319129cfe1e0c768d6263dbd0040df2efd3b4
----------------------------
From: System Administrator <igor@sba.miami.edu> Subject: [PORTS] Configure for DEC-Alpha Configure script properly detects alpha-dec-osf4.0 machine, but sets a default GENERIC template for it. I modified tempplate/.similar to add alpha-dec-osf4.0=alpha. Then configure properly set the template to alpha. 	cf398593fdc865b162fa495c91c5b1e289b86d6b
----------------------------
"Add fcvt() as a check to configure so that we can get rid of the BSD44_derived type check in numutils.c:ftoa() Pointed out by: ""Martin J. Laubach"" <mjl@emsi.priv.at> "	5514c1fa23956186893c3d325bde60d82a714782
----------------------------
From: adrian@waltham.harvard.net Subject: [PATCHES] Patch for configure.in to not ask for CASSERT The following patch defaults to CASSERT, so it doesn't ask you.  You can still use --enable-cassert and --disable-cassert to do it explicitly. Default: disabled 	2de10b0b017d49a338d94f950205281ef8c9f277
----------------------------
Document --enable-cassert/--disable-cassert configure options 	435b9ed2f26a57e51a9f029250121fef2e8052b4
----------------------------
From: adrian@waltham.harvard.net Subject: [HACKERS] Another patch to configure.in I heard very little in objections/approvals to defaulting some of the parameters to configure.  Enclosed is a patch to configure.in which removes the questions for PGPORT USE_LOCALE NOHBA By default (i.e. assuming you don't put anything extra in the configure command line), it assumes PGPORT=5432, USE_LOCAL=no and NOHBA=no (i.e. HBA is turned on) --with-pgport=PGPORT_NO         Over-rides the PGPORT value --enable-locale                 enables USE_LOCALE --disable-hba                   disables HBA Just for completeness: --prefix=BASEDIR                Defaults to /usr/local/pgsql --with-template=TEMPLATE        Defaults to asking you 	49153540daf53e5162dd6f533312792b1a83c334
----------------------------
Have CASSERT enabled/disabled via configure, and passed through config.h instead of as a -D 	f9d2ec0eba0a5024ad0f356e32ae88841f3f94e6
----------------------------
scripts required by configure to bypass its inabilty to use []'s inside of configure ([] have special means to m4 *sigh*) 	32523e4cb822b4dc9b428f602ca323151bfc559c
----------------------------
Much improved configure that integrates the build script right into it Submitted by: adrian@waltham.harvard.net 	e6dfee305cecd12972e8d11c9594bb60a74764f0
----------------------------
"From: ""Martin S. Utesch"" <utesch@aut.tu-freiberg.de> Subject: Re: [HACKERS] GEQO and views (rules) Oke, this was caused by a classic bug :-/ I thougth, root->base_relation_list_ could be represented as relid string 1-2-3-4- etc. Instead, in case of views, the count of relids doesn't start with ""1"" but maybe 4-5-6- etc . :-( GEQO patch follows ... views are now all right. "	1c688d1bbe9e48234a6b2a6a6558ac441e26997e
----------------------------
One helluva mess. Further extended Makefile.global/build/configure so that we can have a 'template' file for each OS (and each version of OS, as in BSDi) which is used as much as possible to generate Makefile.global Any future ports should look at using the template file as a basis, before moving over to Makefile.global. This will most probably break alot of the ports, atho I've tried to be very neat about it... 	f2eb14ad0dbf8950b67b77c949ad254aa02bba89
----------------------------
Various improvements to reduce questions :) Remove USE_LOCALE from Makefile.global.in Add USE_LOCALE to build/configure/config.h Add check for BUILDRUN in configure to make sure that build is run before configure 	e3649e9e5288e34833cd613fe5a058204d3261b6
----------------------------
From: Oleg Bartunov <oleg@sai.msu.su> Subject: [HACKERS] locale patches ! Hi there, here are little patches to get Postgres 6.1 works with locale stuff. This is a patch against 970402.tar.gz, there are no problem to apply them by hand to 6.0 release. Collate stuff tested about 1-2 months in real working database but I'm sure there must be no problem. US hackers could vote against locale implementation ( locale for sure will affect to speed of postgres ), so I introduce variable USE_LOCALE which controls locale stuff. Non-US users now could use ~* operator for searching and <order by> for strings with nation alphabet. Please, don't forget, as I did first time, to set environment variable LC_CTYPE and LC_COLLATE because backend get locale information from them. I start postmaster from a little script, assuming that shell is Bash shell it looks like: #!/bin/sh export LC_CTYPE=koi8-r export LC_COLLATE=koi8-r postmaster -B 1024 -S -D/usr/local/pgsql/data/ -o '-Fe' 	5b1311acfbd6b84dbb84975240914214c51fcb48
----------------------------
turn GEQO code on by default 	dd07f766585e6304491dd2b990c4b40fd19c9b43
----------------------------
Add ability to change installation directory in build, prior to configure 	17c43214113c71f405ab85945925b7e210c54ed7
----------------------------
Forgot to add an AC_SUBST(STRERROR) to configure.in for the strerror() test Thanks to D'Arcy for pointing this one out 	ae93ad851131547884125e65b2af0e164dd69b1a
----------------------------
use autoconf 2.12 instead of 2.10 to gernate configure script... *hopefully* will fix the linux configuration problem..? 	419b4304ba213c9ede279e316c0ac41d36e008c7
----------------------------
"> There are some minor fixes to the GEQO. > Please apply them to the direcory ""backend/optimizer/geqo"". > Two new files with different crossover techniques are included. > Standard procedure is optimization by means of ""geqo_erx.c"" > (Edge Recombination Crossover). From: ""Martin S. Utesch"" <utesch@aut.tu-freiberg.de> "	71fd8d4a4ba7f1b050a026dfcba1fcdde32bb078
----------------------------
Add in the sunos4 portname to configure detection 	336eb7056d87b8cc341a955341318968e836918f
----------------------------
Make sure anything configure related is removed on a distclean 	a4c18f553c50feb30e76ecfafde6598e9d461243
----------------------------
Create a distclean make directive to handle cleaning out configure generated files, that shouldn't be removed on a make clean Pointed out by half the hackers mailing list :) 	9b4b8e92ebe74c46d9e5fed33634f4abd77610fd
----------------------------
Add in port hpux to configure Pointed out by: Mark Hollomon <mhh@nortel.ca> 	069b71d721a1a7f29b3cd6abce2f50adc6748a49
----------------------------
Disable GEQO...it seems to be broken as shown by the message to bugs@postgresql.org concerning updates 	5b5bbdb1617b6b30a2bf073d731f8f101966656d
----------------------------
Remove WIN32 stuff, and improve conformance to configure 	517c8db8695e62afee438599a0c0da8f888b7490
----------------------------
"Add a clean target so that the root directory gets cleared of all the ""configure"" related files on a make clean "	d250ead6544ba3b76e7c033f7bd214bd68c78a0e
----------------------------
And, make sure that initdb.sh copies the pg_geqo.sample file to ${DATADIR}.  The file is left as pg_geqo.sample, since, unlike pg_hba.conf, it isn't a required file...but this way ppl know that its there, and that its where it is required, if they choose to use it 	ebdd6aa78b22403ab940476b3abc358a056311fb
----------------------------
Add and install the pg_geqo.sample file 	23513b47b9eabc7671dc03669fde6829f9f2c2a1
----------------------------
Add the GEQO Todo file too 	7507e6b5fc0413aa031a2a460ee7fdf2e17065c1
----------------------------
Add the GEQO README file to the docs distribution 	c9ead90ea34eec4bfcdf9e6957998d12e65f6e0a
----------------------------
"Merge in GEQO Optimizer From: ""Martin S. Utesch"" <utesch@aut.tu-freiberg.de> "	29138eeb3ca299d0fdc3d4ea2cbe523b759c9db0
----------------------------
Had configure check for strdup, but didn't have it set HAVE_STRDUP Fixed 	aa7dbd0b95a167568a62ed3fc3cff00e4920a360
----------------------------
Remove machine.h, since it wasn't doing anything that config.h wasn't already doing Removed only reference to a machine.h I could find in c.h, to win32/machine.h 	86c28441b4798a102200a58021ffbdbbd08b9ede
----------------------------
"Try to further reduce the PORT dependencies. Essentially, config.h now includes an 'os.h', which is created via configure by linking a ""port.h"" file from the port directory to the include directory. Going to try to merge backend/port in similar ways "	e7c767b47720805a448c1f3fb0c6210fb5ff77c7
----------------------------
Changes to configure/config.h.in to check for: sigprocmask, setsid and waitpid Especially for nextstep systems Awaiting for a context diff from Gregor to complete changes for the nextstep port 	171e0c27e477ff1e6cd9d50ce9751c3c0044b380
----------------------------
Various fixes suggested by Gregor Hoffleit Add a check to configure for strdup Remove all the '-ltermcap' checks from psql/Makefile Have {psql,pg_dump}/Makefile modified if strdup doesn't exist on the system 	ad6bfe67bd234fec5f78ff274a830a9686645d30
----------------------------
Add in netbsd*) to configure Pointed out by D'Arcy 	37e7e77c3354bcf84efdad242437db34cb12ba53
----------------------------
Add ultrix to configure 	4c0faba0febc28b865e4eeaebbef244e060cc1d6
----------------------------
Add in the nextstep port so that configure will (should?) run on it 	cfd9f6e7a98a5f0a0a37ac0599d47510f9d9898b
----------------------------
Add test for union semun to configure Remove references to NEED_UNION_SEMUN from include/config.h.in and from include/storage/ipc.h, replacing it with a single HAVE_UNION_SEMUN 	e72b1ccd30ca89c250a021def7ab82c2f417dbfe
----------------------------
Add Makefile.in so that configure can determine if inet_aton.o is required Add CFLAGS= @CPPFLAGS@ to Makefile.global and configure so that build is useful for finding extra header files Split header files from libraries in build.  Doesn't make much sense to look for a header file in /usr/local/lib, nor to look for a library in /usr/local/include :) 	4001a8c7d35c601544a325403ea2545a28b4b4e2
----------------------------
Add a 'build' script.  All it currently does is prompts the user for additional 'lib' directories to search to find libraries, and then runs ./configure directly 	b17a92f5e6c0ae53b7ca3041b9f54b6562dab097
----------------------------
remove old non-autoconf config.h clean up some of the readline code in config.h.in 	63c28920abe37a6669f4105b28dbf0038d0791c0
----------------------------
Slight change to nabstime.c so that configure is able to handle a system whereby timezone isn't an int, but tzset() exists... This isn't a definitive fix, as there is probably an easier way of fixing the bug... 	8d3d5d2e2f8739aa74a3e1293a324036f1852dfe
----------------------------
Remove rlstubs.[ch], since they weren't actually doing anything that couldn't be #ifdef'd into psql.c itself From what I can tell, if USE_READLINE is true or false, psql works under FreeBSD, without configure.  Now to test it *again* under sparc_solaris with configure and see if it works... 	917042f1c6f9822c771b3e8363dd5a8b8c0e7855
----------------------------
Okay, this should pretty much clean up the psql/readline/history mess. Added a README.readline file until configure is integrated to *try* and explain the way things stand. Removed a stray configure .in file 	aa46d53fa41a073e138acf906bb25d311c575b6b
----------------------------
Some fixes for using configure under sparc_solaris 	49f30e80fccfff1fc2df3854e01de448ce5a309f
----------------------------
The check should be for getrusage(), not rusage() ... change the defines to reflect what configure is going to define when the time comes 	37e86216237ad284fc92b2cd017613765b9e062b
----------------------------
Switch over NEED_RUSAGE to HAVE_RUSAGE for configure 	60265ee6513df64552701fbb4a329845441cfdba
----------------------------
Missed this when I removed the rest of the configure stuff 	a961613f4927cf8770fffdb050c9856ba6dfdf0d
----------------------------
Change NEED_SIG_JMP to HAVE_SIGSETJMP in preparation for configure 	c19b247aec78552d1dca7d9c2a679203c4d936fc
----------------------------
Another switch for configure: NEED_SYS_SELECT_H to HAVE_SYS_SELECT_H 	f12c5f898cb6953abaac21e63f2206ca6ef382b0
----------------------------
Convert NEED_{RINT,CBRT,ISINF} to HAVE_* in prepration for configure... 	0a16069901693ddfdc7c1652e3de619e7f27ed02
----------------------------
Replace occurances of USE_{LIMITS,VALUES}_H with HAVE_* in preparation for switch over to configure 	3ffd5694ddb484ab2907d43b8b3896ecd9f0320a
----------------------------
Remove from include/config.h: #if defined(aix) #define TERMIOS_H_LOCATION <termios.h> #else #define TERMIOS_H_LOCATION <sys/termios.h> #endif libpq/fe-exec.c modified so that location of termios.h is determined by whether HAVE_TERMIOS_H is defined or not, in preparation for switch to configure 	cfe18a8e3f24014334f4bfe5bb8583f6baaeb13b
----------------------------
This should clean everything up back to pre-configure status 	1ac3ea9dcfb698409f571799da7942d9aa8d905e
----------------------------
Remove all the configure related stuff... 	03f013699032a633b853988be960dd5810074655
----------------------------
Slight oops...Makefile.global generated by configure *wasn't* supposed to be committed... 	29d3deb3e8f322051c4d6a2b6909cb162af133f6
----------------------------
Okay, that does it for tonight... Cleaned out alot of the #define that can be auto-detect'd by configure from config.h... 	a245ba7cb7f010ca32874807950c74af5341a5c6
----------------------------
Have configure auto-detect more of the libraries, and shorten out the ports section of Makefile.global as a result. 	ca6da613cd3fc5757aad90ca43baece5738c83bf
----------------------------
Slowly building up config.h so that it is pretty much generated by configure, thereby reducing the ports dependencies in it :) 	e736ca311355d4754be20f126ee0f5d92e851648
----------------------------
Okay, GNUmakefile.in == GNUmakefile, except for the stuff that configure is auto-finding 	83267ffa4ffba7baabc3aed47cc7e47542faaf1c
----------------------------
Add config.h to configure 	36f7766a1812def542cc0ccfde9bf7ab26841dfc
----------------------------
Forgot, we don't use Makefile anymore. Mv Makefile.in to GNUmakefile.in and reflect the change in the configure script 	792913f415ce5dc3f8b04caa4ccd26b53e00ef75
----------------------------
The last patch fixes some incongruences in the #define used to compile the Tcl arrays support. Here are the correct values to be defined in config.h and pgtclCmds.c. Submitted by: Massimo Dal Zotto <dz@cs.unitn.it> 	fdaf47f9f44c3dd8fe8768c471fe36e345e38000
----------------------------
Patch from  Massimo Dal Zotto <dz@cs.unitn.it> The first patch changes the behavior of aclcheck for groups. Currently an user can access a table only if he has the required permission for ALL the groups defined for that table. With my patch he can access a table if he has the permission for ONE of the groups, which seems to me a more useful thing. If you think this should be the correct behavior of the acl group check feel free to remove the #ifdef, if not please add a commented line to config.h. 	1e5755cf73341779953405f0c4e58f1f79454f30
----------------------------
"From: Keith Parks <emkxp01@mtcc.demon.co.uk> OK, The votes are in for the NOFILES limit. With the exception of Next, for which I've not yet heard, all supported platforms seem to have the sysconf() call. port           supported	default	Source. aix            yes		2000	darrenk@insightdist.com alpha          yes		4096	mjl@wwx.vip.at BSD44_derived  yes		64	scrappy@hub.org bsdi           yes		???	maillist@candle.pha.pa.us dgux           yes		???	geek@andrew.cmu.edu hpux           yes		60	emkxp01@mtcc.demon.co.uk i386_solaris   yes		64	emkxp01@mtcc.demon.co.uk irix5          yes		200	martin@biochem.uc.ac.uk linux          yes		256	emkxp01@mtcc.demon.co.uk next           ????		??? sparc_solaris  yes		64	emkxp01@mtcc.demon.co.uk sunos4         yes		64	emkxp01@mtcc.demon.co.uk svr4           yes		64	chicks@chicks.net ultrix4        yes		64	erik@sockdev.uni-c.dk So here's a patch that I think will do the job. (I assume Next will have sysconf() but if not just add MISSING_SYSCONF to the config.h file ) Thanks, Keith. "	ef228cb170c8f6cd13ea3a3e37314afd4723813e
----------------------------
PORT NeXT requires an isascii() define...put it in config.h, most likely *should* have gone into the ports directory, but hopefully *someday* we'll be able to get rid of that? 	a9bfcf459e19c357faa929d0523fb937d7d28ab6
----------------------------
More config.h syncing for limits.h 	3d53b87369155b3503dcedce8078bbef14d37c43
----------------------------
There was JMP_BUF defined in config.h. And SIGJMP_BUF later. And now - JMP_BUF again. Is it enough, folks ? Fixed again: cc1: warnings being treated as errors exc.c: In function 'ExcRaise': exc.c:187: warning: passing arg 1 of 'Longjmp' from incompatible pointer type gmake[3]: *** [exc.o] Error 1 	4a5135c34e11859ebad5a59801a0b93531c4ad55
----------------------------
OK, I think I've got the postconfig thing right now. 	8cfe27dff005bbc786905fc530e7dcb16dd1f18c
----------------------------
Go back to $(postconfig...) from $(exec postconfig...) so it works on non-bash. 	1d84088f50f06b8cdd22be2775a4bccb3533ff60
----------------------------
"Eliminate pesky ""postconfig not found"" message. "	45f1d32bf1ae54570b352921849bd55d2bfef2dc
----------------------------
E Use EUROPEAN_DATES from config.h instead of -D option 	3010f46d2a42a43d369c0601c1a92f6e9a1405bf
----------------------------
Force user to set PORTNAME.  Remove NAMEDATALEN from CFLAGS (don't need it there because it's in config.h, which is cleaner). 	1363ca1d52ac7a2edb17cd004d95e00b291c0f47
----------------------------
"#include ""postgres.h"" is a standard include for all .c files, auto-including config.h, c.h *and* elog.h...added elog.h "	9caf84bc00ee6759d35556bdadcec71721198ce2
----------------------------
Document more #ifdef's into config.h Get rid of ESCAPE_PATCH ifdef, as its on by default, and there is no apparent reason for turning it off...it fixes a bug 	94e825145d55aa67ae362b10ff3517d9f4cebf79
----------------------------
Moved definition of MAXPATHLEN to config.h 	1c00e68fadca6bd33bdf575d8cf656e98d2ff807
----------------------------
"Added a #define NEED_SIG_JMP to config.h Removed #ifdef's for OPENLINK_PATCH.  We enable it by default, and nobody *has* to enable the functionality, but no reason to retain the ""old code"" "	927e5887a0e2939e1e7f92422ff22740b4df7953
----------------------------
Moved '#define *DEBUG' defines to config.h, and document where first found. Document any '#ifdef' segments found in config.h 	2ecb7e5e2c8b39de8590654a3902a75974ccd838
----------------------------
Moved '#define *DEBUG' defines to config.h, and document where first found. Document any '#ifdef' segments found in config.h Remove gistold.c, since it was older copy of gist.c 	6e420677dd2c07ab971df21817d09af3c7b6015f
----------------------------
#define cleanup: moved #define IPORTAL_DEBUG to config.h 	6c8465f69baf767c476bddaba1878ba07948ee2a
----------------------------
Moved all the CFLAG -D's from the makefiles to config.h towards better centralized configurations/porting... 	2d8ffead2479331895b838b1732dd6d4a54fe14e
----------------------------
Moved more -D's out of the port specific Makefiles straight into the config.h file 	1b6322a9c0458b3a467fd82090a6d9d98a36be19
----------------------------
Centralize more of the defines from backend/port under config.h Further ports should *really* avoid backend/port and make use of config.h 	d16bc9ce372f0e5860401d503a28c98764aa2174
----------------------------
"Move ""port specific"" #ifdefs out of here and into config.h - created a HAVE_TZSET define for this purpose "	a839456c417fbd87420726ff68048178038bb3ca
----------------------------
"Moved the following definitions to include/config.h from Makefile.global: NAMEDATALEN OIDDATALEN EUROPEAN_DATES HBA DEADLOCK_TIMEOUT OPENLINK_PATCHES NULL_PATCH ARRAY_PATCH Attempting to document and centralize as many of the ""defines"" as possible... kinda useless to have defines if nobody knows they exist, eh? "	d6dfbecb07bf6dbbcef5bcc9b917163cec97ca33
----------------------------
Move the NAMEDATALEN/OIDNAMELEN defines to include/config.h 	87bb8daab8203292a79be090d2375e5646730166
----------------------------
Moved the define of SIGNAL_ARGS that D'Arcy just created to config.h so that hopefully this sort of thing can eventually be determined using configure? 	ff25e44d0305385a505bdc69d60548646a62bc1b
----------------------------
Added NEED_UNION_SEMUN to config.h 	0fadfc00add2b0f4b0438f554a5f10b3fd68d0e0
----------------------------
Moved whether to define union semun from include/storage/ipc.h to a define in include/config.h 	22ef6d06fc66776a55493198987ceb4601c818c3
----------------------------
This file was superceeded by README.fsync. 	e788e8aa039fd29ad6d6cffcae0b1385b9e58a0a
----------------------------
Add fsync option to Postgres manual page. 	33b7d74c6ff01b9b023fe7c51cd95d60d87305d1
----------------------------
Documentation on the fsync() patch from OpenLink Submitted by:  Cees de Groot <C.deGroot@inter.nl.net> 	5995953a02e71c0696d5be011181e3ad72b71b1e
----------------------------
enable PQ_NOTIFY_PATCH in config.h 	33dccad831a7b48f9b27cf4a45809d0af1b7fd6d
----------------------------
Add use of INDEXSCAN_PATCH to config.h instead of putting it in Makefile.global 	c5dd292007c3948a44e085c26205c1242e7ec350
----------------------------
Oops, win32 does have one more thing in its machine.h...move that define to config.h 	54223de000837c97328fc72a482f4eb6590451ec
----------------------------
We have a machine.h for each platform just because of BLCKSZ, and every platform with a machine.h has the same BLCKSZ? Consolidate machine.h into config.h 	3a606407c793f55485031cef085f50bbc9473316
----------------------------
"#include ""postgres.h"" exists in most .c files in system, so adding #include ""config.h"" here will (should?) ensure that any platform dependencies defined in config.h should be reflected in all .c files... "	eadf5dc754f68457499e65815bff47f9152c581d
----------------------------
"added #include ""config.h"" for ESCAPE_PATCH define "	e1f31a2bb67d5b70f12951562da3fa33b141cafe
----------------------------
Removed -DESCAPE_PATCH ... moved to include/config.h 	43eeb6468817be06812bcfda3c07222b60fbcf8d
----------------------------
At this rate, maybe next year sometime I'll get this done... Goals: reduce the difficulty of porting from platform to platform, release to release, but moving as much as possible into config.h 	321b8c80fd192c1528eb95446aca0a9319aab278
----------------------------
first attempt at centralizing config information for ports 	849292a188125fdb7ca7e9c7c51def4c3392922f
----------------------------
"first pass...move some of the ""Port"" dependencies to src/include/config.h "	c028568217ce84574b4c46b9c66d2530caaad440
----------------------------
"Create support for a ""common"" include directory for the source tree, instead of having include files all over the place... Immediate goal...a 'config.h' file so that we can make #ifdef's being used throughout the code more a rarity as far as porting is concerned "	51b3f2d3715175794e0b04e5ee2e6585cc80813a
----------------------------
fixed a bug with not commenting out FSYNC= in initdb.sh 	c777e8131ed08d6baccc402608a19d664561671a
----------------------------
fsync patch from openlink NOTE: FSYNC needs to be set at top of initdb.sh to enable use of fsync patches...disabled by default 	350cb69aed92a2b4209fac1e18d1636fb3e3a0aa
----------------------------
fsync patch from openlink 	faf21935d1221d097ce26bea9a0dac68efa00a18
